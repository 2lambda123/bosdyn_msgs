// generated from rosidl_adapter/resource/msg.idl.em
// with input from bosdyn_msgs/msg/ForDuration.msg
// generated code does not contain a copyright notice

#include "bosdyn_msgs/msg/Node.idl"
#include "builtin_interfaces/msg/Duration.idl"

module bosdyn_msgs {
  module msg {
    @verbatim (language="comment", text=
      "AUTOMATICALLY GENERATED BY PROTO CONVERSION")
    struct ForDuration {
      @verbatim (language="comment", text=
        "Run this child for a maximum amount of mission execution time." "\n"
        "Will exit with child's status if the child finishes early," "\n"
        "FAILURE if the child remains in RUNNING state for too long" "\n"
        "and no timeout_child is specified, or the status of the" "\n"
        "timeout_child." "\n"
        "Maximum duration of mission execution time.")
      builtin_interfaces::msg::Duration duration;

      boolean duration_is_set;

      @verbatim (language="comment", text=
        "Child to execute for the duration.")
      bosdyn_msgs::msg::Node child;

      boolean child_is_set;

      @verbatim (language="comment", text=
        "Optional blackboard variable name.  If specified, this node will define a blackboard" "\n"
        "variable that its child has access to, and write the number of seconds remaining as" "\n"
        "a double to the blackboard under this name.")
      string time_remaining_name;

      @verbatim (language="comment", text=
        "Optional node that will run if the child times out.  If not specified, this node" "\n"
        "will return FAILURE when the child times out.  If specified, and the" "\n"
        "child times out, this node will return the status of the timeout_child." "\n"
        "The timeout_child does not respect the original timeout.")
      bosdyn_msgs::msg::Node timeout_child;

      boolean timeout_child_is_set;
    };
  };
};
