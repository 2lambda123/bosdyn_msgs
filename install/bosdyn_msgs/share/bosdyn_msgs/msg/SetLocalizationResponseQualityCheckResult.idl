// generated from rosidl_adapter/resource/msg.idl.em
// with input from bosdyn_msgs/msg/SetLocalizationResponseQualityCheckResult.msg
// generated code does not contain a copyright notice


module bosdyn_msgs {
  module msg {
    module SetLocalizationResponseQualityCheckResult_Constants {
      @verbatim (language="comment", text=
        "Unset. Note that the quality check is only performed if the overall Status" "\n"        "enum returns STATUS_SUCCESS, and will be unset otherwise.")
      const int8 QUALITY_CHECK_UNKNOWN = 0;
      @verbatim (language="comment", text=
        "The quality check passed.")
      const int8 QUALITY_CHECK_SUCCESS = 1;
      @verbatim (language="comment", text=
        "After applying the localization, a poor point cloud match to the map was detected." "\n"        "This can happen if, for example, the map has changed, or the starting location" "\n"        "of the robot is now very different than it was at recording time.")
      const int8 QUALITY_CHECK_POOR_POINT_CLOUD_MATCH = 2;
      @verbatim (language="comment", text=
        "After applying the localization, Graph Nav checked the localization, and found that" "\n"        "the robot's gravity vector does not align with the map's. This can happen if a fiducial" "\n"        "being used to align to the map was detected wrongly during recording, or if the robot's" "\n"        "IMU is miscalibrated. It can also occur when the inital guess passed in to the SetLocalization" "\n"        "RPC is in the incorrect reference frame.")
      const int8 QUALITY_CHECK_POOR_GRAVITY_ALIGNMENT = 3;
      @verbatim (language="comment", text=
        "There wasn't enough data to make a determination about quality.")
      const int8 QUALITY_CHECK_SKIPPED = 4;
    };
    @verbatim (language="comment", text=
      "AUTOMATICALLY GENERATED BY PROTO CONVERSION")
    struct SetLocalizationResponseQualityCheckResult {
      int8 value;
    };
  };
};
