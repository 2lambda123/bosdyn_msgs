// generated from rosidl_adapter/resource/msg.idl.em
// with input from bosdyn_msgs/msg/EdgeAnnotations.msg
// generated code does not contain a copyright notice

#include "bosdyn_msgs/msg/EdgeAnnotationsDirectionConstraint.idl"
#include "bosdyn_msgs/msg/EdgeAnnotationsGroundClutterAvoidanceMode.idl"
#include "bosdyn_msgs/msg/EdgeAnnotationsPathFollowingMode.idl"
#include "bosdyn_msgs/msg/EdgeAnnotationsStairData.idl"
#include "bosdyn_msgs/msg/EdgeEdgeSource.idl"
#include "bosdyn_msgs/msg/KeyStringValueBosdynMsgsAreaCallbackRegion.idl"
#include "bosdyn_msgs/msg/MobilityParams.idl"

module bosdyn_msgs {
  module msg {
    @verbatim (language="comment", text=
      "AUTOMATICALLY GENERATED BY PROTO CONVERSION")
    struct EdgeAnnotations {
      @verbatim (language="comment", text=
        "Velocity limits to use while traversing the edge." "\n"
        "These are maxima and minima, NOT target speeds." "\n"
        "DEPRECATED as of 2.4 and will be removed in 4.0. Please use mobility_params.vel_limit." "\n"
        "Defines any parameters of the stairs" "\n"
        "Stairs information/parameters specific to the edge.")
      bosdyn_msgs::msg::EdgeAnnotationsStairData stairs;

      boolean stairs_is_set;

      @verbatim (language="comment", text=
        "Direction constraints for how the robot must move and the directions it can face" "\n"
        "when traversing the edge.")
      bosdyn_msgs::msg::EdgeAnnotationsDirectionConstraint direction_constraint;

      @verbatim (language="comment", text=
        "If true, the robot must be aligned with the edge in yaw before traversing it.")
      boolean require_alignment;

      boolean require_alignment_is_set;

      @verbatim (language="comment", text=
        "If true, the edge crosses flat ground and the robot shouldn't try to climb over" "\n"
        "obstacles." "\n"
        "DEPRECATED as of 3.3.  Replaced by ground_clutter_mode." "\n"
        "Terrain coefficient of friction user hint. This value must be postive and will clamped if" "\n"
        "necessary on the robot side. Best suggested values lie in the range between 0.4 and 0.8" "\n"
        "(which is the robot's default.)" "\n"
        "DEPRECATED as of 2.1 and will be removed in 4.0. Use mobility_params instead, which" "\n"
        "includes ground_mu_hint as part of the terrain_params." "\n"
        "If true, the edge crosses over grated metal. This changes some parameters of the robot's" "\n"
        "perception system to allow it to see grated floors bettter." "\n"
        "DEPRECATED as of 2.1 and will be removed in 4.0. Use mobility_params instead, which" "\n"
        "includes grated_floor as part of the terrain_params." "\n"
        "Overrides the following fields of the mobility parameters to whatever is" "\n"
        "stored in the map. For example, if this FieldMask contains \"stairs_mode\" and" "\n"
        "\"terrain_params.enable_grated_floor\", then the map will be" "\n"
        "annotated with \"stairs_mode\" and \"enable_grated_floor\" settings. An empty FieldMask means" "\n"
        "all fields are active annotations. Note that the more conservative of the velocity limit" "\n"
        "stored in the mobility parameters and the TravelParams of the entire route will be used" "\n"
        "for this edge (regardless of what override_mobility_params says)." "\n"
        "        google.protobuf.FieldMask override_mobility_params = 9;" "\n"
        "Contains terrain parameters, swing height, obstacle avoidance parameters, etc." "\n"
        "When the robot crosses this edge, it will use the mobility parameters here.")
      bosdyn_msgs::msg::MobilityParams mobility_params;

      boolean mobility_params_is_set;

      @verbatim (language="comment", text=
        "Assign edges a cost; used when finding the \"shortest\" (lowest cost) path.")
      double cost;

      boolean cost_is_set;

      @verbatim (language="comment", text=
        "How this edge was made.")
      bosdyn_msgs::msg::EdgeEdgeSource edge_source;

      @verbatim (language="comment", text=
        "If true, disables alternate-route-finding for this edge.")
      boolean disable_alternate_route_finding;

      @verbatim (language="comment", text=
        "Path following mode" "\n"
        "Path following mode for this edge.")
      bosdyn_msgs::msg::EdgeAnnotationsPathFollowingMode path_following_mode;

      @verbatim (language="comment", text=
        "Disable directed exploration for this edge.")
      boolean disable_directed_exploration;

      @verbatim (language="comment", text=
        "Reference to area callback regions needed to cross this edge." "\n"
        "The string is a unique id for this region, which may be shared" "\n"
        "across multiple edges.")
      sequence<bosdyn_msgs::msg::KeyStringValueBosdynMsgsAreaCallbackRegion> area_callbacks;

      @verbatim (language="comment", text=
        "Ground clutter avoidance mode." "\n"
        "This enables detection and avoidance of low obstacles.")
      bosdyn_msgs::msg::EdgeAnnotationsGroundClutterAvoidanceMode ground_clutter_mode;
    };
  };
};
