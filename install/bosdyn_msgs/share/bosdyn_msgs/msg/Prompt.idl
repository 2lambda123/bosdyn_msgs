// generated from rosidl_adapter/resource/msg.idl.em
// with input from bosdyn_msgs/msg/Prompt.msg
// generated code does not contain a copyright notice

#include "bosdyn_msgs/msg/AlertDataSeverityLevel.idl"
#include "bosdyn_msgs/msg/Node.idl"
#include "bosdyn_msgs/msg/PromptOption.idl"

module bosdyn_msgs {
  module msg {
    @verbatim (language="comment", text=
      "AUTOMATICALLY GENERATED BY PROTO CONVERSION")
    struct Prompt {
      @verbatim (language="comment", text=
        "Prompt the world at large to answer a question." "\n"
        "This node represents a request for information from ANY listeners that may be out there." "\n"
        "Should we always re-prompt when this node is started?" "\n"
        "If false, this node will only ever prompt if it is started and its question is unanswered." "\n"
        "This may be used, for example, to ask the user to check the robot after any self-right." "\n"
        "If true, this node will prompt whenever it is started." "\n"
        "This may be used, for example, to tell the user to perform some one-time action, like open a" "\n"
        "door for the robot.")
      boolean always_reprompt;

      @verbatim (language="comment", text=
        "The text of the question itself.  The question text may contain formatted blackboard" "\n"
        "variables.  Please see the documentation in FormatBlackboard for more information" "\n"
        "about supported string formats.")
      string text;

      @verbatim (language="comment", text=
        "Metadata describing the source of the question." "\n"
        "The answer will be written into the state blackboard with this as the variable name.")
      string source;

      @verbatim (language="comment", text=
        "Data about the options to choose from." "\n"
        "The set of options that can be chosen for this prompt.")
      sequence<bosdyn_msgs::msg::PromptOption> options;

      @verbatim (language="comment", text=
        "Child node, run after the prompt has been responded to." "\n"
        "Children will have access to the answer code provided by the response.")
      bosdyn_msgs::msg::Node child;

      boolean child_is_set;

      @verbatim (language="comment", text=
        "Hint that Question posed by this Prompt is meant to be answered by some automated system." "\n"
        "See the Question message for details.")
      boolean for_autonomous_processing;

      @verbatim (language="comment", text=
        "Severity for this prompt. Used to determine what sort of alerting" "\n"
        "this prompt will trigger." "\n"
        "Here are guidelines for severity as it pertains to missions:" "\n"
        "INFO: Normal operation.  For example, waiting for charge; waiting on the dock for logs to" "\n"
        "download. WARN: Something went wrong, but the mission will try to recover autonomously." "\n"
        "ERROR: Something went wrong, and the mission can't recover without human intervention." "\n"
        "Intervention is not time sensitive and can be resolved when convenient." "\n"
        "CRITICAL: Something went wrong, and the mission can't recover without human intervention." "\n"
        "Human needs to rescue the robot before battery runs out because it's not charging.")
      bosdyn_msgs::msg::AlertDataSeverityLevel severity;

      @verbatim (language="comment", text=
        "If specified, this node will write its current question (bosdyn.api.mission.Question proto)" "\n"
        "to the blackboard while it is being ticked.")
      string question_name_in_blackboard;
    };
  };
};
