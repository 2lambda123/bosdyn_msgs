// generated from rosidl_adapter/resource/msg.idl.em
// with input from bosdyn_msgs/msg/FrameTreeSnapshot.msg
// generated code does not contain a copyright notice

#include "bosdyn_msgs/msg/KeyStringValueBosdynMsgsFrameTreeSnapshotParentEdge.idl"

module bosdyn_msgs {
  module msg {
    @verbatim (language="comment", text=
      "AUTOMATICALLY GENERATED BY PROTO CONVERSION")
    struct FrameTreeSnapshot {
      @verbatim (language="comment", text=
        "     *   A frame is a named location in space." "\n"
        "     * For example, the following frames are defined by the API:" "\n"
        "     *  - \"body\":   A frame centered on the robot's body." "\n"
        "     *  - \"vision\": A non-moving (inertial) frame that is the robot's best" "\n"
        "     *              estimate of a fixed location in the world. It is based on" "\n"
        "     *              both dead reckoning and visual analysis of the world." "\n"
        "     *  - \"odom\":   A non-moving (inertial) frame that is based on the kinematic" "\n"
        "     *              odometry of the robot only." "\n"
        "     * Additional frames are available for robot joints, sensors, and items" "\n"
        "     * detected in the world." "\n"
        "     *" "\n"
        "     * The FrameTreeSnapshot represents the relationships between the frames that the robot" "\n"
        "     * knows about at a particular point in time. For example, with the FrameTreeSnapshot," "\n"
        "     * an API client can determine where the \"body\" is relative to the \"vision\"." "\n"
        "     *" "\n"
        "     * To reduce data bandwidth, the FrameTreeSnapshot will typically contain" "\n"
        "     * a small subset of all known frames. By default, all services MUST" "\n"
        "     * include \"vision\", \"body\", and \"odom\" frames in the FrameTreeSnapshot, but" "\n"
        "     * additional frames can also be included. For example, an Image service" "\n"
        "     * would likely include the frame located at the base of the camera lens" "\n"
        "     * where the picture was taken." "\n"
        "     *" "\n"
        "     * Frame relationships are expressed as edges between \"parent\" frames and" "\n"
        "     * \"child\" frames, with an SE3Pose indicating the pose of the \"child\" frame" "\n"
        "     * expressed in the \"parent\" frame. These edges are included in the edge_map" "\n"
        "     * field. For example, if frame \"hand\" is 1m in front of the frame \"shoulder\"," "\n"
        "     * then the FrameTreeSnapshot might contain:" "\n"
        "     *  edge_map {" "\n"
        "     *     key: \"hand\"" "\n"
        "     *     value: {" "\n"
        "     *         parent_frame_name: \"shoulder\"" "\n"
        "     *         parent_tform_child: {" "\n"
        "     *            position: {" "\n"
        "     *              x: 1.0" "\n"
        "     *              y: 0.0" "\n"
        "     *              z: 0.0" "\n"
        "     *            }" "\n"
        "     *         }" "\n"
        "     *      }" "\n"
        "     *  }" "\n"
        "     *" "\n"
        "     * Frame relationships can be inverted. So, to find where the \"shoulder\"" "\n"
        "     * is in relationship the \"hand\", the parent_tform_child pose in the edge" "\n"
        "     * above can be inverted:" "\n"
        "     *      hand_tform_shoulder = shoulder_tform_hand.inverse()" "\n"
        "     * Frame relationships can also be concatenated. If there is an additional" "\n"
        "     * edge specifying the pose of the \"shoulder\" relative to the \"body\", then" "\n"
        "     * to find where the \"hand\" is relative to the \"body\" do:" "\n"
        "     *      body_tform_hand = body_tform_shoulder * shoulder_tform_hand" "\n"
        "     *" "\n"
        "     * The two properties above reduce data size. Instead of having to send N^2" "\n"
        "     * edge_map entries to represent all relationships between N frames," "\n"
        "     * only N edge_map entries need to be sent. Clients will need to determine" "\n"
        "     * the chain of edges to follow to get from one frame to another frae," "\n"
        "     * and then do inversion and concatentation to generate the appropriate pose." "\n"
        "     *" "\n"
        "     * Note that all FrameTreeSnapshots are expected to be a single rooted tree." "\n"
        "     * The syntax for FrameTreeSnapshot could also support graphs with" "\n"
        "     * cycles, or forests of trees - but clients should treat those as invalid" "\n"
        "     * representations." "\n"
        "     *" "\n"
        "ParentEdge represents the relationship from a child frame to a parent frame." "\n"
        "child_to_parent_edge_map maps the child frame name to the ParentEdge." "\n"
        "In aggregate, this forms the tree structure.")
      sequence<bosdyn_msgs::msg::KeyStringValueBosdynMsgsFrameTreeSnapshotParentEdge> child_to_parent_edge_map;
    };
  };
};
