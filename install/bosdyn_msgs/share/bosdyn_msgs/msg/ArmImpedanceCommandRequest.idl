// generated from rosidl_adapter/resource/msg.idl.em
// with input from bosdyn_msgs/msg/ArmImpedanceCommandRequest.msg
// generated code does not contain a copyright notice

#include "bosdyn_msgs/msg/SE3Trajectory.idl"
#include "bosdyn_msgs/msg/Vector.idl"
#include "geometry_msgs/msg/Pose.idl"
#include "geometry_msgs/msg/Wrench.idl"

module bosdyn_msgs {
  module msg {
    @verbatim (language="comment", text=
      "AUTOMATICALLY GENERATED BY PROTO CONVERSION")
    struct ArmImpedanceCommandRequest {
      @verbatim (language="comment", text=
        "Name of the frame relative to which the task frame is defined for this command." "\n"
        "Common frames for this include \"odom\", \"vision\", \"body\", and \"flat_body\".")
      string root_frame_name;

      @verbatim (language="comment", text=
        "This transform specifies the pose of the task frame relative to the root frame." "\n"
        "If unset, it defaults to identity, and the task frame coincides with the root frame." "\n"
        "The `desired_tool` frame will be specified relative to the task frame. For peg in" "\n"
        "hole tasks for example, the task frame could be a frame attached to the top of the" "\n"
        "hole with z-axis aligned with the hole axis, and the `desired_tool` frame could" "\n"
        "move in z to direct the peg deeper into the hole.")
      geometry_msgs::msg::Pose root_tform_task;

      boolean root_tform_task_is_set;

      @verbatim (language="comment", text=
        "The tool pose relative to the parent link (link_wr1). This can also be thought of as the" "\n"
        "\"remote center\" frame. For peg in hole tasks for example, one might put the tool frame" "\n"
        "at the tip of the peg, or slightly below the tip floating in space, at the point on which" "\n"
        "we want our virtual springs to pull." "\n"
        "Defaults to" "\n"
        "   [0.19557 0 0]" "\n"
        "   [1 0 0 0]" "\n"
        "which is a frame aligned with the wrist frame, with its origin slightly in front of" "\n"
        "the gripper's palm plate.")
      geometry_msgs::msg::Pose wrist_tform_tool;

      boolean wrist_tform_tool_is_set;

      @verbatim (language="comment", text=
        "Trajectory of where we want the tool to be relative to the task frame. Note that this `desired_tool`" "\n"
        "frame is not the same as the tool frame attached to the wrist link. If our tool deviates from this" "\n"
        "`desired_tool` pose, it will be subject to a wrench determined by our stiffness and damping matrices.")
      bosdyn_msgs::msg::SE3Trajectory task_tform_desired_tool;

      boolean task_tform_desired_tool_is_set;

      @verbatim (language="comment", text=
        "Feed forward wrench to apply at the tool, expressed with respect to the `desired_tool` frame")
      geometry_msgs::msg::Wrench feed_forward_wrench_at_tool_in_desired_tool;

      boolean feed_forward_wrench_at_tool_in_desired_tool_is_set;

      @verbatim (language="comment", text=
        "Stiffness matrix in the `desired_tool` frame. The matrix is parameterized by a vector of 6 doubles," "\n"
        "representing the diagonal of this 6x6 matrix: [x,y,z,tx,ty,tz] (N/m, N/m, N/m, Nm/rad, Nm/rad, Nm/rad)." "\n"
        "All other entries will be set to 0. All stiffness values along the diagonal should be non-negative.")
      bosdyn_msgs::msg::Vector diagonal_stiffness_matrix;

      boolean diagonal_stiffness_matrix_is_set;

      @verbatim (language="comment", text=
        "Damping matrix in the `desired_tool` frame. The matrix is parameterized by a vector of 6 doubles," "\n"
        "representing the diagonal of this 6x6 matrix: [x,y,z,tx,ty,tz] (Ns/m, Ns/m, Ns/m, Nms/rad, Nms/rad, Nms/rad)" "\n"
        "All other entries will be set to 0. All damping values along the diagonal should be non-negative.")
      bosdyn_msgs::msg::Vector diagonal_damping_matrix;

      boolean diagonal_damping_matrix_is_set;

      @verbatim (language="comment", text=
        "Maximum force magnitude in Newtons we're allowed to exert. If the tool deviates such that the" "\n"
        "magnitude of the requested force would exceed this threshold, saturate the requested force." "\n"
        "If this value is not set, a default of 60N will be used.")
      double max_force_mag;

      boolean max_force_mag_is_set;

      @verbatim (language="comment", text=
        "Maximum torque magnitude in Newton meters we're allowed to exert. If the tool deviates such" "\n"
        "that the magnitude of the requested torque would exceed this threshold, saturate the" "\n"
        "requested torque. If this value is not set, a default of 15Nm will be used.")
      double max_torque_mag;

      boolean max_torque_mag_is_set;
    };
  };
};
