// generated from rosidl_adapter/resource/msg.idl.em
// with input from bosdyn_msgs/msg/ProcessTopologyRequestOdometryLoopClosureParams.msg
// generated code does not contain a copyright notice


module bosdyn_msgs {
  module msg {
    @verbatim (language="comment", text=
      "AUTOMATICALLY GENERATED BY PROTO CONVERSION")
    struct ProcessTopologyRequestOdometryLoopClosureParams {
      @verbatim (language="comment", text=
        "The maximum distance between waypoints found by walking a path from one" "\n"
        "waypoint to the other using only the existing edges in the map. Beyond" "\n"
        "this distance, we are unwilling to trust odometry.")
      double max_loop_closure_path_length;

      boolean max_loop_closure_path_length_is_set;

      @verbatim (language="comment", text=
        "The minimum distance between waypoints found by walking a path from" "\n"
        "one waypoint to the other using only the existing edges in the map." "\n"
        "Set this higher to avoid creating small shortcuts along the existing path." "\n"
        "Note that this is a 2d path length.")
      double min_loop_closure_path_length;

      boolean min_loop_closure_path_length_is_set;

      @verbatim (language="comment", text=
        "The maximum apparent height change of the created edge that we are" "\n"
        "willing to accept between waypoints. This avoids closing loops up ramps," "\n"
        "stairs, etc. or closing loops where there is significant odometry drift.")
      double max_loop_closure_height_change;

      boolean max_loop_closure_height_change_is_set;

      @verbatim (language="comment", text=
        "Once a loop closure candidate is found, the system creates an edge between the" "\n"
        "candidate waypoints. Only create the edge if it is shorter than this value." "\n"
        "Note that this is a 3d edge length.")
      double max_loop_closure_edge_length;

      boolean max_loop_closure_edge_length_is_set;

      @verbatim (language="comment", text=
        "Use prior loop closures to infer new odometry based loop closures. This is" "\n"
        "useful when other sources of loop closures (like fiducials) are being used." "\n"
        "The existence of those loop closures allows the system to infer other nearby" "\n"
        "loop closures using odometry. Alternatively, the user may call the ProcessTopology" "\n"
        "RPC multiple times to achieve the same effect.")
      int32 num_extra_loop_closure_iterations;

      boolean num_extra_loop_closure_iterations_is_set;

      @verbatim (language="comment", text=
        "If true, redundant edges will be ignored, and only the \"best\" in a small area" "\n"
        "will be selected (true by default).")
      boolean prune_edges;

      boolean prune_edges_is_set;
    };
  };
};
