// generated from rosidl_adapter/resource/msg.idl.em
// with input from bosdyn_msgs/msg/RouteFollowingParamsRouteBlockedBehavior.msg
// generated code does not contain a copyright notice


module bosdyn_msgs {
  module msg {
    module RouteFollowingParamsRouteBlockedBehavior_Constants {
      @verbatim (language="comment", text=
        "The mode is unset.")
      const int8 ROUTE_BLOCKED_UNKNOWN = 0;
      @verbatim (language="comment", text=
        "For NavigateToRequests, the robot will find the shortest path to the desination" "\n"        "that avoids the blockage." "\n"        "For NavigateRouteRequests, the robot will find the shortest path to any point" "\n"        "after the furthest-along blockage, and after the furthest-along traversed edge," "\n"        "and go to the point that gives that shortest path. Then, the robot will follow" "\n"        "the rest of the route from that point. If multiple points on the route are" "\n"        "similarly close to the robot, the robot will prefer the earliest on the route." "\n"        "This is the default.")
      const int8 ROUTE_BLOCKED_REROUTE = 1;
      @verbatim (language="comment", text=
        "The robot will fail the command with status STATUS_STUCK;")
      const int8 ROUTE_BLOCKED_FAIL = 2;
    };
    @verbatim (language="comment", text=
      "AUTOMATICALLY GENERATED BY PROTO CONVERSION")
    struct RouteFollowingParamsRouteBlockedBehavior {
      int8 value;
    };
  };
};
