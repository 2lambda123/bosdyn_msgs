// generated from rosidl_adapter/resource/msg.idl.em
// with input from bosdyn_msgs/msg/BosdynRecordEvent.msg
// generated code does not contain a copyright notice

#include "bosdyn_msgs/msg/Event.idl"
#include "bosdyn_msgs/msg/KeyStringValueBosdynMsgsValue.idl"

module bosdyn_msgs {
  module msg {
    @verbatim (language="comment", text=
      "AUTOMATICALLY GENERATED BY PROTO CONVERSION")
    struct BosdynRecordEvent {
      @verbatim (language="comment", text=
        "Record an APIEvent" "\n"
        "Name of the service to use.")
      string service_name;

      @verbatim (language="comment", text=
        "Host machine the service is running on.")
      string host;

      @verbatim (language="comment", text=
        "The event to be logged. Note that everything should be populated except the id, start_time" "\n"
        "and end_time. The start and end time will be populated by the mission, using the node's start" "\n"
        "time. The id field shouldn't be set when the start and end times are the same.")
      bosdyn_msgs::msg::Event event;

      boolean event_is_set;

      @verbatim (language="comment", text=
        "If set to false, this node will wait for the RecordEvents rpc to complete.  If set to true," "\n"
        "this node will send the RecordEventsRequest, and then return SUCCESS without waiting for" "\n"
        "the RecordEventsResponse.")
      boolean succeed_early;

      @verbatim (language="comment", text=
        "In addition to the parameters specified in the event field, this field can be used" "\n"
        "to specify events only known at runtime.  Map key will be parameter label, map value will be" "\n"
        "evaluated then packed into parameter value.")
      sequence<bosdyn_msgs::msg::KeyStringValueBosdynMsgsValue> additional_parameters;
    };
  };
};
