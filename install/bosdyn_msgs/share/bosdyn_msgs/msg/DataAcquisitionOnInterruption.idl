// generated from rosidl_adapter/resource/msg.idl.em
// with input from bosdyn_msgs/msg/DataAcquisitionOnInterruption.msg
// generated code does not contain a copyright notice

#include "bosdyn_msgs/msg/DataAcquisition.idl"
#include "bosdyn_msgs/msg/Metadata.idl"
#include "bosdyn_msgs/msg/Node.idl"

module bosdyn_msgs {
  module msg {
    @verbatim (language="comment", text=
      "AUTOMATICALLY GENERATED BY PROTO CONVERSION")
    struct DataAcquisitionOnInterruption {
      @verbatim (language="comment", text=
        "Send an AcquireDataRequest to the data acquisition service when the mission is interrupted." "\n"
        "Interuptions are anything that causes the mission to stop ticking automatically." "\n"
        "Child to run when node starts. If mission is interrupted while the child is still running," "\n"
        "the mission service will send an AcquireDataRequest to the data acquisition service. The" "\n"
        "child will resume when the mission resumes. The DataAcquisitionOnInterruption node will" "\n"
        "always return the status of this child node.")
      bosdyn_msgs::msg::Node child;

      boolean child_is_set;

      @verbatim (language="comment", text=
        "Data acquisition request that will be sent if the mission is interrupted." "\n"
        "This is not an actual node. It will only be used for the data acquisition request details." "\n"
        "The completion_behavior and request_name_in_blackboard fields will not be used.")
      bosdyn_msgs::msg::DataAcquisition request_when_interrupted;

      boolean request_when_interrupted_is_set;

      @verbatim (language="comment", text=
        "Clients can specify a chunk of metadata for each possible interruption reason (fields 4-11)." "\n"
        "When an interruption occurs the metdata corresponding to the interruption reason will be" "\n"
        "merged with request_when_interrupted.request.metadata." "\n"
        "Interruption reason: PauseMission RPC called.")
      bosdyn_msgs::msg::Metadata pause_mission_metadata;

      boolean pause_mission_metadata_is_set;

      @verbatim (language="comment", text=
        "Interruption reason: RestartMission RPC called.")
      bosdyn_msgs::msg::Metadata restart_mission_metadata;

      boolean restart_mission_metadata_is_set;

      @verbatim (language="comment", text=
        "Interruption reason: LoadMission RPC called.")
      bosdyn_msgs::msg::Metadata load_mission_metadata;

      boolean load_mission_metadata_is_set;

      @verbatim (language="comment", text=
        "Interruption reason: StopMission RPC called.")
      bosdyn_msgs::msg::Metadata stop_mission_metadata;

      boolean stop_mission_metadata_is_set;

      @verbatim (language="comment", text=
        "Interruption reason: Lease use error occured.")
      bosdyn_msgs::msg::Metadata lease_use_error_metadata;

      boolean lease_use_error_metadata_is_set;

      @verbatim (language="comment", text=
        "Interruption reason: Play mission timeout exceeded.")
      bosdyn_msgs::msg::Metadata play_mission_timeout_metadata;

      boolean play_mission_timeout_metadata_is_set;

      @verbatim (language="comment", text=
        "Interruption reason: Child node returned an error result.")
      bosdyn_msgs::msg::Metadata child_node_error_metadata;

      boolean child_node_error_metadata_is_set;

      @verbatim (language="comment", text=
        "Interruption reason: Child node threw an exception.")
      bosdyn_msgs::msg::Metadata child_node_exception_metadata;

      boolean child_node_exception_metadata_is_set;

      @verbatim (language="comment", text=
        "This is used if any of the above are empty or if an unexpected interruption occurs.")
      bosdyn_msgs::msg::Metadata default_metadata;

      boolean default_metadata_is_set;

      @verbatim (language="comment", text=
        "If key(s) are specified, the additional information about the lease use error will be stored" "\n"
        "in the AcquireDataRequest metadata. All given key(s) must be used in order to access the" "\n"
        "error message reason from the JSON metadata. The last key holds error message.")
      sequence<string> keys_for_lease_use_error_message;
    };
  };
};
