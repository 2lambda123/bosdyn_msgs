// generated from rosidl_adapter/resource/msg.idl.em
// with input from bosdyn_msgs/msg/BosdynNavigateRoute.msg
// generated code does not contain a copyright notice

#include "bosdyn_msgs/msg/Route.idl"
#include "bosdyn_msgs/msg/RouteFollowingParams.idl"
#include "bosdyn_msgs/msg/TravelParams.idl"

module bosdyn_msgs {
  module msg {
    @verbatim (language="comment", text=
      "AUTOMATICALLY GENERATED BY PROTO CONVERSION")
    struct BosdynNavigateRoute {
      @verbatim (language="comment", text=
        "Tell the robot to navigate a route." "\n"
        "Name of the service to use.")
      string service_name;

      @verbatim (language="comment", text=
        "Host machine the service is running on.")
      string host;

      @verbatim (language="comment", text=
        "A route for the robot to follow.")
      bosdyn_msgs::msg::Route route;

      boolean route_is_set;

      @verbatim (language="comment", text=
        "What should the robot do if it is not at the expected point in the route, or the route is" "\n"
        "blocked.")
      bosdyn_msgs::msg::RouteFollowingParams route_follow_params;

      boolean route_follow_params_is_set;

      @verbatim (language="comment", text=
        "Parameters that define how to traverse and end the route.")
      bosdyn_msgs::msg::TravelParams travel_params;

      boolean travel_params_is_set;

      @verbatim (language="comment", text=
        "If provided, this will write the last NavigationFeedbackResponse message" "\n"
        "to a blackboard variable with this name.")
      string navigation_feedback_response_blackboard_key;

      @verbatim (language="comment", text=
        "If provided, this will write the last NavigateRouteResponse message to" "\n"
        "a blackboard variable with this name.")
      string navigate_route_response_blackboard_key;
    };
  };
};
