// generated from rosidl_adapter/resource/msg.idl.em
// with input from bosdyn_msgs/msg/NavigateRouteRequest.msg
// generated code does not contain a copyright notice

#include "bosdyn_msgs/msg/Lease.idl"
#include "bosdyn_msgs/msg/RequestHeader.idl"
#include "bosdyn_msgs/msg/Route.idl"
#include "bosdyn_msgs/msg/RouteFollowingParams.idl"
#include "bosdyn_msgs/msg/SE2Pose.idl"
#include "bosdyn_msgs/msg/TravelParams.idl"
#include "builtin_interfaces/msg/Time.idl"

module bosdyn_msgs {
  module msg {
    @verbatim (language="comment", text=
      "AUTOMATICALLY GENERATED BY PROTO CONVERSION")
    struct NavigateRouteRequest {
      @verbatim (language="comment", text=
        "A NavigateRoute request message specifies a route of waypoints/edges and parameters" "\n"
        "about how to get there. Like NavigateTo, this command returns immediately upon" "\n"
        "processing and provides a command_id that the user can use along with a NavigationFeedbackRequest RPC to" "\n"
        "poll the system for feedback on this command. The RPC does not block until the route is completed." "\n"
        "Common request header.")
      bosdyn_msgs::msg::RequestHeader header;

      boolean header_is_set;

      @verbatim (language="comment", text=
        "The Lease to show ownership of the robot.")
      sequence<bosdyn_msgs::msg::Lease> leases;

      @verbatim (language="comment", text=
        "A route for the robot to follow.")
      bosdyn_msgs::msg::Route route;

      boolean route_is_set;

      @verbatim (language="comment", text=
        "What should the robot do if it is not at the expected point in the route, or the route is" "\n"
        "blocked.")
      bosdyn_msgs::msg::RouteFollowingParams route_follow_params;

      boolean route_follow_params_is_set;

      @verbatim (language="comment", text=
        "How to travel the route.")
      bosdyn_msgs::msg::TravelParams travel_params;

      boolean travel_params_is_set;

      @verbatim (language="comment", text=
        "The timestamp (in robot time) that the navigation command is valid until.")
      builtin_interfaces::msg::Time end_time;

      boolean end_time_is_set;

      @verbatim (language="comment", text=
        "Identifier provided by the time sync service to verify time sync between robot and client.")
      string clock_identifier;

      @verbatim (language="comment", text=
        "If provided, graph_nav will move the robot to an SE2 pose relative to the final waypoint" "\n"
        "in the route." "\n"
        "Note that the robot will treat this as a simple goto request. It will first arrive at the" "\n"
        "destination waypoint, and then travel in a straight line from the destination waypoint to the" "\n"
        "offset goal, attempting to avoid obstacles along the way.")
      bosdyn_msgs::msg::SE2Pose destination_waypoint_tform_body_goal;

      boolean destination_waypoint_tform_body_goal_is_set;

      @verbatim (language="comment", text=
        "Unique identifier for the command. If 0, this is a new command, otherwise it is a continuation" "\n"
        "of an existing command.")
      uint32 command_id;
    };
  };
};
