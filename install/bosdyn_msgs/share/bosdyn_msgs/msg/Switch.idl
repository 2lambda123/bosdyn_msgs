// generated from rosidl_adapter/resource/msg.idl.em
// with input from bosdyn_msgs/msg/Switch.msg
// generated code does not contain a copyright notice

#include "bosdyn_msgs/msg/KeyInt32ValueBosdynMsgsNode.idl"
#include "bosdyn_msgs/msg/Node.idl"
#include "bosdyn_msgs/msg/Value.idl"

module bosdyn_msgs {
  module msg {
    @verbatim (language="comment", text=
      "AUTOMATICALLY GENERATED BY PROTO CONVERSION")
    struct Switch {
      @verbatim (language="comment", text=
        "Run a specific child based on a specified pivot_value." "\n"
        "" "\n"
        "This node exists because of a subtle implmentation detail in Selector(always_restart = true)." "\n"
        "The astute reader might believe that they can construct a switch node by using a selector" "\n"
        "with sequences & conditions as children.  This is ALMOST true, EXCEPT that a selector" "\n"
        "(with always_restart = true) can leave multiple children in the running state IF:" "\n"
        "" "\n"
        " - A later selector child was RUNNING last tick" "\n"
        " - An eariler selector child returns RUNNING this tick" "\n"
        "" "\n"
        "Even though the later selector child won't be ticked, it will still be left in the running state" "\n"
        "and not restart when the selector advances to it again later.  Sometimes this is desireable," "\n"
        "sometimes it isn't.  Switch is constrained to only have one child running, and if the switch ever" "\n"
        "switches children and return to a previously running child, that child will be restarted." "\n"
        "Expresses an integer value that decides which child to run.")
      bosdyn_msgs::msg::Value pivot_value;

      boolean pivot_value_is_set;

      @verbatim (language="comment", text=
        "If false, this node will read the pivot_value once when its starts, and execute" "\n"
        "the specified child until it finishes even if the pivot_value changes." "\n"
        "" "\n"
        "If true, this node will read from the pivot_value every tick, and change" "\n"
        "which child it's ticking when an underlying blackboard variable changes.")
      boolean always_restart;

      @verbatim (language="comment", text=
        "List of all children to possibly run.")
      sequence<bosdyn_msgs::msg::KeyInt32ValueBosdynMsgsNode> int_children;

      @verbatim (language="comment", text=
        "If none of the above cases match, use this child")
      bosdyn_msgs::msg::Node default_child;

      boolean default_child_is_set;
    };
  };
};
