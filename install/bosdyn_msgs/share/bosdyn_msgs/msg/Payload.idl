// generated from rosidl_adapter/resource/msg.idl.em
// with input from bosdyn_msgs/msg/Payload.msg
// generated code does not contain a copyright notice

#include "bosdyn_msgs/msg/MountFrameName.idl"
#include "bosdyn_msgs/msg/PayloadMassVolumeProperties.idl"
#include "bosdyn_msgs/msg/PayloadPreset.idl"
#include "bosdyn_msgs/msg/SoftwareVersion.idl"
#include "geometry_msgs/msg/Pose.idl"

module bosdyn_msgs {
  module msg {
    @verbatim (language="comment", text=
      "AUTOMATICALLY GENERATED BY PROTO CONVERSION")
    struct Payload {
      @verbatim (language="comment", text=
        "A Payload describes a single payload installed on the Spot platform." "\n"
        "It includes all external information necessary to represent" "\n"
        "the payload to the user as a single record." "\n"
        "A unique id provided by the payload or auto-generated by the website.")
      string guid;

      @verbatim (language="comment", text=
        "A human readable name describing this payload. It is provided by the" "\n"
        "payload as part of the payload announcement system.")
      string name;

      @verbatim (language="comment", text=
        "A human-readable description string providing more context as to the" "\n"
        "function of this payload. It is displayed in UIs.")
      string description;

      @verbatim (language="comment", text=
        "A list of labels used to indicate what type of payload this is.")
      sequence<string> label_prefix;

      @verbatim (language="comment", text=
        "Set true once the payload is authorized by the administrator in the payload webpage." "\n"
        "Must be set to false at registration time.")
      boolean is_authorized;

      @verbatim (language="comment", text=
        "Set true if the payload is attached to the robot." "\n"
        "Must be set to false at registration time.")
      boolean is_enabled;

      @verbatim (language="comment", text=
        "Set true for payloads registered without their own computers. These records" "\n"
        "are all manually entered.")
      boolean is_noncompute_payload;

      @verbatim (language="comment", text=
        "Payload version details.")
      bosdyn_msgs::msg::SoftwareVersion version;

      boolean version_is_set;

      @verbatim (language="comment", text=
        "The pose of the payload relative to the body frame.")
      geometry_msgs::msg::Pose body_tform_payload;

      boolean body_tform_payload_is_set;

      @verbatim (language="comment", text=
        "The pose of the payload relative to the mount frame.")
      geometry_msgs::msg::Pose mount_tform_payload;

      boolean mount_tform_payload_is_set;

      @verbatim (language="comment", text=
        "Optional - mount frame_name (if not included, payload is assumed to be in the body mount" "\n"
        "frame)")
      bosdyn_msgs::msg::MountFrameName mount_frame_name;

      @verbatim (language="comment", text=
        "Number of seconds to wait between heartbeats before assuming payload is no longer live" "\n"
        "If unset (0) liveness checks will be disabled for this service.")
      double liveness_timeout_secs;

      @verbatim (language="comment", text=
        "IP address of the payload for the robot to ping" "\n"
        "If left empty, assume that the payload will send heartbeats")
      string ipv4_address;

      @verbatim (language="comment", text=
        "In mbps (10, 100, 1000, etc)")
      int32 link_speed;

      @verbatim (language="comment", text=
        "The mass and volume properties of the payload.")
      bosdyn_msgs::msg::PayloadMassVolumeProperties mass_volume_properties;

      boolean mass_volume_properties_is_set;

      @verbatim (language="comment", text=
        "A list of possible physical configurations for the payload.")
      sequence<bosdyn_msgs::msg::PayloadPreset> preset_configurations;
    };
  };
};
