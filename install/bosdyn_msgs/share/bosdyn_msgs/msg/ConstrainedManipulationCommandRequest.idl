// generated from rosidl_adapter/resource/msg.idl.em
// with input from bosdyn_msgs/msg/ConstrainedManipulationCommandRequest.msg
// generated code does not contain a copyright notice

#include "bosdyn_msgs/msg/ConstrainedManipulationCommandRequestControlMode.idl"
#include "bosdyn_msgs/msg/ConstrainedManipulationCommandRequestOneOfTaskSpeed.idl"
#include "bosdyn_msgs/msg/ConstrainedManipulationCommandRequestOneOfTaskTargetPosition.idl"
#include "bosdyn_msgs/msg/ConstrainedManipulationCommandRequestTaskType.idl"
#include "builtin_interfaces/msg/Time.idl"
#include "geometry_msgs/msg/Wrench.idl"

module bosdyn_msgs {
  module msg {
    @verbatim (language="comment", text=
      "AUTOMATICALLY GENERATED BY PROTO CONVERSION")
    struct ConstrainedManipulationCommandRequest {
      @verbatim (language="comment", text=
        "Frame that the initial wrench will be expressed in")
      string frame_name;

      @verbatim (language="comment", text=
        "Direction of the initial wrench to be applied" "\n"
        "Depending on the task, either the force vector or the" "\n"
        "torque vector are required to be specified. The required" "\n"
        "vector should not have a magnitude of zero and will be" "\n"
        "normalized to 1. For tasks that require the force vector," "\n"
        "the torque vector can still be specified as a non-zero vector" "\n"
        "if it is a good guess of the axis of rotation of the task." "\n"
        "(for e.g. TASK_TYPE_SE3_ROTATIONAL_TORQUE task types.)" "\n"
        "Note that if both vectors are non-zero, they have to be perpendicular." "\n"
        "Once the constrained manipulation system estimates the" "\n"
        "constraint, the init_wrench_direction and frame_name" "\n"
        "will no longer be used.")
      geometry_msgs::msg::Wrench init_wrench_direction_in_frame_name;

      boolean init_wrench_direction_in_frame_name_is_set;

      @verbatim (language="comment", text=
        "The desired velocity to move the object" "\n"
        "For all tasks besides SE3_ROTATIONAL_TORQUE, set" "\n"
        "tangential_speed in units of m/s. For SE3_ROTATIONAL_TORQUE," "\n"
        "set rotational_speed with units of rad/s.")
      bosdyn_msgs::msg::ConstrainedManipulationCommandRequestOneOfTaskSpeed task_speed;

      @verbatim (language="comment", text=
        "The limit on the force that is applied on any translation direction" "\n"
        "Value must be positive" "\n"
        "If unspecified, a default value of 40 N will be used.")
      double force_limit;

      boolean force_limit_is_set;

      @verbatim (language="comment", text=
        "The limit on the torque that is applied on any rotational direction" "\n"
        "Value must be positive" "\n"
        "If unspecified, a default value of 4 Nm will be used.")
      double torque_limit;

      boolean torque_limit_is_set;

      @verbatim (language="comment", text=
        "Geometrical category of a task. See the constrained_manipulation_helper function" "\n"
        "for examples of each of these categories. For e.g. SE3_CIRCLE_FORCE_TORQUE corresponds" "\n"
        "to lever type objects.")
      bosdyn_msgs::msg::ConstrainedManipulationCommandRequestTaskType task_type;

      @verbatim (language="comment", text=
        "The timestamp (in robot time) by which a command must finish executing." "\n"
        "This is a required field and used to prevent runaway commands.")
      builtin_interfaces::msg::Time end_time;

      boolean end_time_is_set;

      @verbatim (language="comment", text=
        "Whether to enable the robot to take steps during constrained manip to keep the hand in" "\n"
        "the workspace.")
      boolean enable_robot_locomotion;

      boolean enable_robot_locomotion_is_set;

      bosdyn_msgs::msg::ConstrainedManipulationCommandRequestControlMode control_mode;

      @verbatim (language="comment", text=
        "Desired final task position to achieve" "\n"
        "The position is computed relative to the starting position.")
      bosdyn_msgs::msg::ConstrainedManipulationCommandRequestOneOfTaskTargetPosition task_target_position;

      @verbatim (language="comment", text=
        "Acceleration limit for the planned trajectory in the free task DOF." "\n"
        "Note that the units of this variable will be m/(s^2) or rad/(s^2) depending" "\n"
        "on the choice of target_linear_position vs. target_angle above.")
      double accel_limit;

      boolean accel_limit_is_set;

      @verbatim (language="comment", text=
        "Constrained manipulation estimates the task frame given the observed initial motion." "\n"
        "Setting this to false saves and uses the estimation state from the previous" "\n"
        "constrained manipulation move. This is true by default.")
      boolean reset_estimator;

      boolean reset_estimator_is_set;
    };
  };
};
