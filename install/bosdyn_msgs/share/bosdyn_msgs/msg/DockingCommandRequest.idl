// generated from rosidl_adapter/resource/msg.idl.em
// with input from bosdyn_msgs/msg/DockingCommandRequest.msg
// generated code does not contain a copyright notice

#include "bosdyn_msgs/msg/Lease.idl"
#include "bosdyn_msgs/msg/PrepPoseBehavior.idl"
#include "bosdyn_msgs/msg/RequestHeader.idl"
#include "builtin_interfaces/msg/Time.idl"

module bosdyn_msgs {
  module msg {
    @verbatim (language="comment", text=
      "AUTOMATICALLY GENERATED BY PROTO CONVERSION")
    struct DockingCommandRequest {
      @verbatim (language="comment", text=
        "Message to command the robot to dock." "\n"
        "Note: If the robot is docked, you can undock the robot by issuing a command with" "\n"
        "`prep_pose_behavior=PREP_POSE_UNDOCK`. If undocking, `docking_station_id` is not required." "\n"
        "Common request header.")
      bosdyn_msgs::msg::RequestHeader header;

      boolean header_is_set;

      @verbatim (language="comment", text=
        "The Lease to show ownership of the robot.")
      bosdyn_msgs::msg::Lease lease;

      boolean lease_is_set;

      @verbatim (language="comment", text=
        "ID of docking station to dock at." "\n"
        "This is ignored if undocking the robot, the current dock is used.")
      uint32 docking_station_id;

      @verbatim (language="comment", text=
        "Identifier provided by the time sync service to verify time sync between robot and client.")
      string clock_identifier;

      @verbatim (language="comment", text=
        "The timestamp (in robot time) at which a command will stop executing." "\n"
        "This can be updated by other RPCs" "\n"
        "This is a required field and used to prevent runaway commands.")
      builtin_interfaces::msg::Time end_time;

      boolean end_time_is_set;

      @verbatim (language="comment", text=
        "Specify the prep pose behavior")
      @unit (value="Optional")
      bosdyn_msgs::msg::PrepPoseBehavior prep_pose_behavior;

      @verbatim (language="comment", text=
        "Require the detection of the dock's fiducial")
      boolean require_fiducial;
    };
  };
};
