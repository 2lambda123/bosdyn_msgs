// generated from rosidl_adapter/resource/msg.idl.em
// with input from bosdyn_msgs/msg/DataAcquisition.msg
// generated code does not contain a copyright notice

#include "bosdyn_msgs/msg/AcquireDataRequest.idl"
#include "bosdyn_msgs/msg/DataAcquisitionCompletionBehavior.idl"

module bosdyn_msgs {
  module msg {
    @verbatim (language="comment", text=
      "AUTOMATICALLY GENERATED BY PROTO CONVERSION")
    struct DataAcquisition {
      @verbatim (language="comment", text=
        "Trigger the acquisition and storage of data." "\n"
        "Name of the service to use.")
      string service_name;

      @verbatim (language="comment", text=
        "Host machine of the directory server that the data acquisition service is registered with.")
      string host;

      @verbatim (language="comment", text=
        "Specification of the data and metadata to store.")
      bosdyn_msgs::msg::AcquireDataRequest request;

      boolean request_is_set;

      bosdyn_msgs::msg::DataAcquisitionCompletionBehavior completion_behavior;

      @verbatim (language="comment", text=
        "Define a format string that will be used together with the blackboard to generate" "\n"
        "a group_name.  If a value is specified in this field, it will override the group_name value" "\n"
        "specified in the CaptureActionId of the AcquireDataRequest.  Values from the blackboard will" "\n"
        "replace the keys in braces {}." "\n"
        "Example: \"telop-{date}\", where \"date\" is a blackboard variable." "\n"
        "Example: \"{date}_loop_{loop_counter}\", where \"loop_counter\" is a blackboard variable from a" "\n"
        "Repeat node.")
      string group_name_format;

      @verbatim (language="comment", text=
        "If populated, name of the variable in the blackboard in which to store the AcquireDataRequest" "\n"
        "after it's created, and sent to the Data Acquisition service.")
      string request_name_in_blackboard;

      @verbatim (language="comment", text=
        "The name of the metadata object in the blackboard to be stored." "\n"
        "The metadata object can be any protobuf message." "\n"
        "The metadata will be merged with the AcquireDataRequest's metadata field.")
      string metadata_name_in_blackboard;

      @verbatim (language="comment", text=
        "Define a format string that will be used together with the blackboard to generate" "\n"
        "an action_name.  If a value is specified in this field, it will override the action_name" "\n"
        "value specified in the CaptureActionId of the AcquireDataRequest.  Values from the blackboard" "\n"
        "will replace the keys in braces {}." "\n"
        "Example: \"element 0 attempt {loop_counter}\", where \"loop_counter\" is a blackboard variable" "\n"
        "from a Retry.")
      string action_name_format;

      @verbatim (language="comment", text=
        "If set to false (default), this node will cancel an outgoing AcquireDataRequest when the node" "\n"
        "is paused / stopped.  When the node is resumed, it will restart the AcquireDataRequest." "\n"
        "" "\n"
        "If set to true, this node will NOT cancel outgoing AcquireDataRequest's when the node is" "\n"
        "paused / stopped.  When the node is resumed, it will check feedback on the original outgoing" "\n"
        "AcquireDataReqeust.")
      boolean disable_cancel_on_pause_or_stop;
    };
  };
};
