// generated from rosidl_adapter/resource/msg.idl.em
// with input from bosdyn_msgs/msg/DownloadWaypointSnapshotRequest.msg
// generated code does not contain a copyright notice

#include "bosdyn_msgs/msg/RequestHeader.idl"

module bosdyn_msgs {
  module msg {
    @verbatim (language="comment", text=
      "AUTOMATICALLY GENERATED BY PROTO CONVERSION")
    struct DownloadWaypointSnapshotRequest {
      @verbatim (language="comment", text=
        "The DownloadWaypointSnapshot request asks for a specific waypoint snapshot id to" "\n"
        "be downloaded and has parameters to decrease the amount of data downloaded. After" "\n"
        "recording a map, first call the DownloadGraph RPC. Then, for each waypoint snapshot id," "\n"
        "request the waypoint snapshot from the server using the DownloadWaypointSnapshot RPC." "\n"
        "Common request header.")
      bosdyn_msgs::msg::RequestHeader header;

      boolean header_is_set;

      @verbatim (language="comment", text=
        "ID of the snapshot associated with a waypoint.")
      string waypoint_snapshot_id;

      @verbatim (language="comment", text=
        "If true, download the full images and point clouds from" "\n"
        "each camera.")
      boolean download_images;

      @verbatim (language="comment", text=
        "If true, the point cloud will be compressed using the smallest" "\n"
        "available point cloud encoding. If false, three 32-bit floats will" "\n"
        "be used per point.")
      boolean compress_point_cloud;

      @verbatim (language="comment", text=
        "Skip downloading the point cloud, and only download other data such as images or world" "\n"
        "objects.")
      boolean do_not_download_point_cloud;
    };
  };
};
