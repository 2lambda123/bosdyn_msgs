// generated from rosidl_adapter/resource/msg.idl.em
// with input from bosdyn_msgs/msg/ArmDragCommandFeedbackStatus.msg
// generated code does not contain a copyright notice


module bosdyn_msgs {
  module msg {
    module ArmDragCommandFeedbackStatus_Constants {
      @verbatim (language="comment", text=
        "STATUS_UNKNOWN should never be used. If used, an internal error has happened.")
      const int8 STATUS_UNKNOWN = 0;
      @verbatim (language="comment", text=
        "Robot is dragging.")
      const int8 STATUS_DRAGGING = 1;
      @verbatim (language="comment", text=
        "Robot is not dragging because grasp failed." "\n"        "This could be due to a lost grasp during a drag, or because the gripper isn't in a" "\n"        "good position at the time of request. You'll have to reposition or regrasp and then" "\n"        "send a new drag request to overcome this type of error. Note: When requesting drag," "\n"        "make sure the gripper is positioned in front of the robot (not to the side of or" "\n"        "above the robot body).")
      const int8 STATUS_GRASP_FAILED = 2;
      @verbatim (language="comment", text=
        "Robot is not dragging for another reason." "\n"        "This might be because the gripper isn't holding an item." "\n"        "You can continue dragging once you resolve this type of error (i.e. by sending an" "\n"        "ApiGraspOverride request). Note: When requesting drag, be sure to that the robot" "\n"        "knows it's holding something (or use APIGraspOverride to OVERRIDE_HOLDING).")
      const int8 STATUS_OTHER_FAILURE = 3;
    };
    @verbatim (language="comment", text=
      "AUTOMATICALLY GENERATED BY PROTO CONVERSION")
    struct ArmDragCommandFeedbackStatus {
      int8 value;
    };
  };
};
