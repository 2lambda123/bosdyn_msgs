// generated from rosidl_adapter/resource/msg.idl.em
// with input from bosdyn_msgs/msg/SetLocalizationResponse.msg
// generated code does not contain a copyright notice

#include "bosdyn_msgs/msg/LeaseUseResult.idl"
#include "bosdyn_msgs/msg/Localization.idl"
#include "bosdyn_msgs/msg/ResponseHeader.idl"
#include "bosdyn_msgs/msg/RobotImpairedState.idl"
#include "bosdyn_msgs/msg/SensorCompatibilityStatus.idl"
#include "bosdyn_msgs/msg/SetLocalizationResponseQualityCheckResult.idl"
#include "bosdyn_msgs/msg/SetLocalizationResponseStatus.idl"
#include "bosdyn_msgs/msg/SetLocalizationResponseSuspectedAmbiguity.idl"

module bosdyn_msgs {
  module msg {
    @verbatim (language="comment", text=
      "AUTOMATICALLY GENERATED BY PROTO CONVERSION")
    struct SetLocalizationResponse {
      @verbatim (language="comment", text=
        "The SetLocalization response message contains the resulting localization to the map." "\n"
        "Common response header.")
      bosdyn_msgs::msg::ResponseHeader header;

      boolean header_is_set;

      @verbatim (language="comment", text=
        "Result of using the lease.")
      bosdyn_msgs::msg::LeaseUseResult lease_use_result;

      boolean lease_use_result_is_set;

      @verbatim (language="comment", text=
        "Return status for the request.")
      bosdyn_msgs::msg::SetLocalizationResponseStatus status;

      @verbatim (language="comment", text=
        "If set, describes the reason the status is not OK.")
      string error_report;

      @verbatim (language="comment", text=
        "Result of localization.")
      bosdyn_msgs::msg::Localization localization;

      boolean localization_is_set;

      @verbatim (language="comment", text=
        "Alternative information if the localization is ambiguous.")
      bosdyn_msgs::msg::SetLocalizationResponseSuspectedAmbiguity suspected_ambiguity;

      boolean suspected_ambiguity_is_set;

      @verbatim (language="comment", text=
        "If the status is ROBOT_IMPAIRED, this is why the robot is impaired.")
      bosdyn_msgs::msg::RobotImpairedState impaired_state;

      boolean impaired_state_is_set;

      @verbatim (language="comment", text=
        "This status determines whether the robot has compatible sensors for the" "\n"
        "map that was recorded. Note that if sensors aren't working, STATUS_IMPARIED" "\n"
        "will be returned, rather than STATUS_INCOMPATIBLE_SENSORS.")
      bosdyn_msgs::msg::SensorCompatibilityStatus sensor_status;

      boolean sensor_status_is_set;

      @verbatim (language="comment", text=
        "Graph Nav will check the quality of the resulting localization and report the status" "\n"
        "here. Note that to preserve backwards compatability with 3.2 and earlier, a poor quality check" "\n"
        "does not result in this RPC failing.")
      bosdyn_msgs::msg::SetLocalizationResponseQualityCheckResult quality_check_result;
    };
  };
};
