# AUTOMATICALLY GENERATED BY PROTO CONVERSION

# Current status of the pose trajectory.
bosdyn_msgs/ArmImpedanceCommandFeedbackStatus status

# A tree-based collection of transformations relevant to the current impedance operation.
# In addition to the common frames ("vision", "body", "odom"), this snapshot contains the
# following:
# "task": The task frame that the impedance action is specified in.
# "desired_tool": The pose of the desired_tool frame at the current time.
# "tool": The current measured pose of the tool.
# "desired_tool_at_end": The desired tool pose at the end of the requested trajectory.
# "measured_tool_at_start": The measured pose of the tool when this command was first sent.
#
# While these poses can be used in any way the user sees fit, here are some useful ideas:
# desired_tool_tform_tool: The current measured tool pose relative to the `desired_tool`
#                          frame [meters, quaternion]. This is our "tracking error".
#                          Multiplying this error by `diagonal_stiffness_matrix` should
#                          yield `commanded_wrench_from_stiffness_at_tool_in_desired_tool`.
# desired_tool_at_end_tform_tool: The current measured tool pose relative to the
#                                 `desired_tool` frame at the end of the user trajectory
#                                 [meters, quaternion]. This is our "distance to goal",
#                                 and can be used for checking when an impedance move is
#                                 "complete".
# measured_tool_at_start_tform_tool_in_task: The current measured tool pose relative to
#                                            the measured tool frame at the start,
#                                            expressed in the task frame
#                                            [meters, quaternion]. This can be used to
#                                            see how far the tool has moved since the
#                                            beginning of the command.
bosdyn_msgs/FrameTreeSnapshot transforms_snapshot
bool transforms_snapshot_is_set

# The component of our commanded wrench at the tool expressed with respect to the
# `desired_tool` frame from our stiffness matrix [Newtons / Nm]
geometry_msgs/Wrench commanded_wrench_from_stiffness_at_tool_in_desired_tool
bool commanded_wrench_from_stiffness_at_tool_in_desired_tool_is_set
# The component of our commanded wrench at the tool expressed with respect to the
# `desired_tool` frame from our damping matrix [Newtons / Nm]
geometry_msgs/Wrench commanded_wrench_from_damping_at_tool_in_desired_tool
bool commanded_wrench_from_damping_at_tool_in_desired_tool_is_set
# The component of our commanded wrench at the tool expressed with respect to the
# `desired_tool` frame from our feed forward wrench [Newtons / Nm]
geometry_msgs/Wrench commanded_wrench_from_feed_forward_at_tool_in_desired_tool
bool commanded_wrench_from_feed_forward_at_tool_in_desired_tool_is_set

# The commanded total wrench at the tool expressed with respect to the `desired_tool`
# frame. This wrench has been saturated to obey `max_force_mag` and `max_torque_mag`
# [Newtons / Nm]
geometry_msgs/Wrench total_commanded_wrench_at_tool_in_desired_tool
bool total_commanded_wrench_at_tool_in_desired_tool_is_set

# Sometimes the arm cannot achieve the commanded wrench exactly because of the
# underlying controller or arm pose. This looks at the joint torque sensors to
# determine the actual force and torque being applied at the tool. [Newtons / Nm]
geometry_msgs/Wrench total_measured_wrench_at_tool_in_desired_tool
bool total_measured_wrench_at_tool_in_desired_tool_is_set
