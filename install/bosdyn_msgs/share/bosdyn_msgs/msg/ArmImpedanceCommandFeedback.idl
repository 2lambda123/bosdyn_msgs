// generated from rosidl_adapter/resource/msg.idl.em
// with input from bosdyn_msgs/msg/ArmImpedanceCommandFeedback.msg
// generated code does not contain a copyright notice

#include "bosdyn_msgs/msg/ArmImpedanceCommandFeedbackStatus.idl"
#include "bosdyn_msgs/msg/FrameTreeSnapshot.idl"
#include "geometry_msgs/msg/Wrench.idl"

module bosdyn_msgs {
  module msg {
    @verbatim (language="comment", text=
      "AUTOMATICALLY GENERATED BY PROTO CONVERSION")
    struct ArmImpedanceCommandFeedback {
      @verbatim (language="comment", text=
        "Current status of the pose trajectory.")
      bosdyn_msgs::msg::ArmImpedanceCommandFeedbackStatus status;

      @verbatim (language="comment", text=
        "A tree-based collection of transformations relevant to the current impedance operation." "\n"
        "In addition to the common frames (\"vision\", \"body\", \"odom\"), this snapshot contains the" "\n"
        "following:" "\n"
        "\"task\": The task frame that the impedance action is specified in." "\n"
        "\"desired_tool\": The pose of the desired_tool frame at the current time." "\n"
        "\"tool\": The current measured pose of the tool." "\n"
        "\"desired_tool_at_end\": The desired tool pose at the end of the requested trajectory." "\n"
        "\"measured_tool_at_start\": The measured pose of the tool when this command was first sent." "\n"
        "" "\n"
        "While these poses can be used in any way the user sees fit, here are some useful ideas:" "\n"
        "desired_tool_tform_tool: The current measured tool pose relative to the `desired_tool`" "\n"
        "                         frame [meters, quaternion]. This is our \"tracking error\"." "\n"
        "                         Multiplying this error by `diagonal_stiffness_matrix` should" "\n"
        "                         yield `commanded_wrench_from_stiffness_at_tool_in_desired_tool`." "\n"
        "desired_tool_at_end_tform_tool: The current measured tool pose relative to the" "\n"
        "                                `desired_tool` frame at the end of the user trajectory" "\n"
        "                                [meters, quaternion]. This is our \"distance to goal\"," "\n"
        "                                and can be used for checking when an impedance move is" "\n"
        "                                \"complete\"." "\n"
        "measured_tool_at_start_tform_tool_in_task: The current measured tool pose relative to" "\n"
        "                                           the measured tool frame at the start," "\n"
        "                                           expressed in the task frame" "\n"
        "                                           [meters, quaternion]. This can be used to" "\n"
        "                                           see how far the tool has moved since the" "\n"
        "                                           beginning of the command.")
      bosdyn_msgs::msg::FrameTreeSnapshot transforms_snapshot;

      boolean transforms_snapshot_is_set;

      @verbatim (language="comment", text=
        "The component of our commanded wrench at the tool expressed with respect to the" "\n"
        "`desired_tool` frame from our stiffness matrix")
      @unit (value="Newtons / Nm")
      geometry_msgs::msg::Wrench commanded_wrench_from_stiffness_at_tool_in_desired_tool;

      boolean commanded_wrench_from_stiffness_at_tool_in_desired_tool_is_set;

      @verbatim (language="comment", text=
        "The component of our commanded wrench at the tool expressed with respect to the" "\n"
        "`desired_tool` frame from our damping matrix")
      @unit (value="Newtons / Nm")
      geometry_msgs::msg::Wrench commanded_wrench_from_damping_at_tool_in_desired_tool;

      boolean commanded_wrench_from_damping_at_tool_in_desired_tool_is_set;

      @verbatim (language="comment", text=
        "The component of our commanded wrench at the tool expressed with respect to the" "\n"
        "`desired_tool` frame from our feed forward wrench")
      @unit (value="Newtons / Nm")
      geometry_msgs::msg::Wrench commanded_wrench_from_feed_forward_at_tool_in_desired_tool;

      boolean commanded_wrench_from_feed_forward_at_tool_in_desired_tool_is_set;

      @verbatim (language="comment", text=
        "The commanded total wrench at the tool expressed with respect to the `desired_tool`" "\n"
        "frame. This wrench has been saturated to obey `max_force_mag` and `max_torque_mag`" "\n"
        "[Newtons / Nm]")
      @unit (value="Newtons / Nm")
      geometry_msgs::msg::Wrench total_commanded_wrench_at_tool_in_desired_tool;

      boolean total_commanded_wrench_at_tool_in_desired_tool_is_set;

      @verbatim (language="comment", text=
        "Sometimes the arm cannot achieve the commanded wrench exactly because of the" "\n"
        "underlying controller or arm pose. This looks at the joint torque sensors to" "\n"
        "determine the actual force and torque being applied at the tool.")
      @unit (value="Newtons / Nm")
      geometry_msgs::msg::Wrench total_measured_wrench_at_tool_in_desired_tool;

      boolean total_measured_wrench_at_tool_in_desired_tool_is_set;
    };
  };
};
