// generated from rosidl_adapter/resource/msg.idl.em
// with input from bosdyn_msgs/msg/ProcessTopologyRequestParams.msg
// generated code does not contain a copyright notice

#include "bosdyn_msgs/msg/ProcessTopologyRequestCollisionCheckingParams.idl"
#include "bosdyn_msgs/msg/ProcessTopologyRequestFiducialLoopClosureParams.idl"
#include "bosdyn_msgs/msg/ProcessTopologyRequestICPParams.idl"
#include "bosdyn_msgs/msg/ProcessTopologyRequestOdometryLoopClosureParams.idl"

module bosdyn_msgs {
  module msg {
    @verbatim (language="comment", text=
      "AUTOMATICALLY GENERATED BY PROTO CONVERSION")
    struct ProcessTopologyRequestParams {
      @verbatim (language="comment", text=
        "True by default -- generate loop closure candidates using odometry.")
      boolean do_odometry_loop_closure;

      boolean do_odometry_loop_closure_is_set;

      @verbatim (language="comment", text=
        "Parameters for generating loop closure candidates using odometry.")
      bosdyn_msgs::msg::ProcessTopologyRequestOdometryLoopClosureParams odometry_loop_closure_params;

      boolean odometry_loop_closure_params_is_set;

      @verbatim (language="comment", text=
        "Parameters for refining loop closure candidates using iterative closest point" "\n"
        "cloud matching.")
      bosdyn_msgs::msg::ProcessTopologyRequestICPParams icp_params;

      boolean icp_params_is_set;

      @verbatim (language="comment", text=
        "True by default -- generate loop closure candidates using fiducials.")
      boolean do_fiducial_loop_closure;

      boolean do_fiducial_loop_closure_is_set;

      @verbatim (language="comment", text=
        "Parameters for generating loop closure candidates using fiducials.")
      bosdyn_msgs::msg::ProcessTopologyRequestFiducialLoopClosureParams fiducial_loop_closure_params;

      boolean fiducial_loop_closure_params_is_set;

      @verbatim (language="comment", text=
        "Parameters which control rejecting loop closure candidates which" "\n"
        "collide with obstacles.")
      bosdyn_msgs::msg::ProcessTopologyRequestCollisionCheckingParams collision_check_params;

      boolean collision_check_params_is_set;

      @verbatim (language="comment", text=
        "Causes the processing to time out after this many seconds. If not set, a default of 45 seconds" "\n"
        "will be used. If this timeout occurs before the overall RPC timeout, a partial result will be" "\n"
        "returned with ProcessTopologyResponse.timed_out set to true. Processing can be continued by" "\n"
        "calling ProcessTopology again.")
      double timeout_seconds;
    };
  };
};
