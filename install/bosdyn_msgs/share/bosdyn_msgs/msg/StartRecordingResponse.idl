// generated from rosidl_adapter/resource/msg.idl.em
// with input from bosdyn_msgs/msg/StartRecordingResponse.msg
// generated code does not contain a copyright notice

#include "bosdyn_msgs/msg/LeaseUseResult.idl"
#include "bosdyn_msgs/msg/LicenseInfoStatus.idl"
#include "bosdyn_msgs/msg/MapStats.idl"
#include "bosdyn_msgs/msg/ResponseHeader.idl"
#include "bosdyn_msgs/msg/RobotImpairedState.idl"
#include "bosdyn_msgs/msg/StartRecordingResponseStatus.idl"
#include "bosdyn_msgs/msg/Waypoint.idl"
#include "builtin_interfaces/msg/Time.idl"

module bosdyn_msgs {
  module msg {
    @verbatim (language="comment", text=
      "AUTOMATICALLY GENERATED BY PROTO CONVERSION")
    struct StartRecordingResponse {
      @verbatim (language="comment", text=
        "The StartRecording response messge returns the first created waypoint, which is made at the" "\n"
        "location the robot was standing when the request was made, in addition to any status information." "\n"
        "Common response header.")
      bosdyn_msgs::msg::ResponseHeader header;

      boolean header_is_set;

      @verbatim (language="comment", text=
        "The waypoint that was just created.")
      bosdyn_msgs::msg::Waypoint created_waypoint;

      boolean created_waypoint_is_set;

      @verbatim (language="comment", text=
        "The results/status of the lease provided.")
      bosdyn_msgs::msg::LeaseUseResult lease_use_result;

      boolean lease_use_result_is_set;

      @verbatim (language="comment", text=
        "Return status for the request.")
      bosdyn_msgs::msg::StartRecordingResponseStatus status;

      @verbatim (language="comment", text=
        "If the status is STATUS_MISSING_FIDUCIALS, these are the fiducials that are not currently" "\n"
        "visible.")
      sequence<int32> missing_fiducials;

      @verbatim (language="comment", text=
        "If the status is STATUS_FIDUCIAL_POSE_NOT_OK, these are the fiducials that could not be" "\n"
        "localized confidently.")
      sequence<int32> bad_pose_fiducials;

      @verbatim (language="comment", text=
        "Large graphs can only be uploaded if the license permits them. Recording" "\n"
        "will stop automatically when the graph gets too large. If StartRecording" "\n"
        "is requested again after the graph gets too large, it will fail, and license" "\n"
        "status will be filled out.")
      bosdyn_msgs::msg::LicenseInfoStatus license_status;

      @verbatim (language="comment", text=
        "If the status is ROBOT_IMPAIRED, this is why the robot is impaired.")
      bosdyn_msgs::msg::RobotImpairedState impaired_state;

      boolean impaired_state_is_set;

      @verbatim (language="comment", text=
        "This is the robot local timestamp that graph_nav began recording on. If the Start Recording" "\n"
        "Request's session start time is provided, this should be the same as the request's session" "\n"
        "start time.")
      builtin_interfaces::msg::Time session_start_time;

      boolean session_start_time_is_set;

      @verbatim (language="comment", text=
        "General statistics of the map loaded in GraphNav.")
      bosdyn_msgs::msg::MapStats map_stats;

      boolean map_stats_is_set;
    };
  };
};
