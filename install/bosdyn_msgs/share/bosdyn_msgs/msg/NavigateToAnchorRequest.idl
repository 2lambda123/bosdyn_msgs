// generated from rosidl_adapter/resource/msg.idl.em
// with input from bosdyn_msgs/msg/NavigateToAnchorRequest.msg
// generated code does not contain a copyright notice

#include "bosdyn_msgs/msg/Lease.idl"
#include "bosdyn_msgs/msg/RequestHeader.idl"
#include "bosdyn_msgs/msg/RouteGenParams.idl"
#include "bosdyn_msgs/msg/TravelParams.idl"
#include "builtin_interfaces/msg/Time.idl"
#include "geometry_msgs/msg/Pose.idl"
#include "geometry_msgs/msg/Vector3.idl"

module bosdyn_msgs {
  module msg {
    @verbatim (language="comment", text=
      "AUTOMATICALLY GENERATED BY PROTO CONVERSION")
    struct NavigateToAnchorRequest {
      @verbatim (language="comment", text=
        "The NavigateToAnchorRequest can be used to command GraphNav to drive the robot to a specific" "\n"
        "place in an anchoring. GraphNav will find the waypoint that has the shortest path length from" "\n"
        "robot's current position but is still close to the goal. GraphNav will plan a path through the" "\n"
        "map which most efficiently gets the robot to the goal waypoint, and will then travel" "\n"
        "in a straight line from the destination waypoint to the offset goal, attempting to avoid" "\n"
        "obstacles along the way." "\n"
        "Parameters are provided which influence how GraphNav will generate and follow the path." "\n"
        "This RPC returns immediately after the request is processed. It does not block until GraphNav" "\n"
        "completes the path to the goal waypoint. The user is expected to periodically check the status" "\n"
        "of the NavigateToAnchor command using the NavigationFeedbackRequest RPC." "\n"
        "Common request header.")
      bosdyn_msgs::msg::RequestHeader header;

      boolean header_is_set;

      @verbatim (language="comment", text=
        "The Leases to show ownership of the robot and the graph.")
      sequence<bosdyn_msgs::msg::Lease> leases;

      @verbatim (language="comment", text=
        "The goal, expressed with respect to the seed frame of the current anchoring." "\n"
        "The robot will use the z value to find the goal waypoint, but the final z height the robot" "\n"
        "achieves will depend on the terrain height at the offset from the goal.")
      geometry_msgs::msg::Pose seed_tform_goal;

      boolean seed_tform_goal_is_set;

      @verbatim (language="comment", text=
        "These parameters control selection of the goal waypoint. In seed frame, they are the x, y," "\n"
        "and z tolerances with respect to the goal pose within which waypoints will be considered." "\n"
        "If these values are negative, or too small, reasonable defaults will be used.")
      geometry_msgs::msg::Vector3 goal_waypoint_rt_seed_ewrt_seed_tolerance;

      boolean goal_waypoint_rt_seed_ewrt_seed_tolerance_is_set;

      @verbatim (language="comment", text=
        "Preferences on how to pick the route.")
      bosdyn_msgs::msg::RouteGenParams route_params;

      boolean route_params_is_set;

      @verbatim (language="comment", text=
        "Parameters that define how to traverse and end the route.")
      bosdyn_msgs::msg::TravelParams travel_params;

      boolean travel_params_is_set;

      @verbatim (language="comment", text=
        "The timestamp (in robot time) that the navigation command is valid until.")
      builtin_interfaces::msg::Time end_time;

      boolean end_time_is_set;

      @verbatim (language="comment", text=
        "Identifier provided by the time sync service to verify time sync between robot and client.")
      string clock_identifier;

      @verbatim (language="comment", text=
        "Unique identifier for the command. If 0, this is a new command, otherwise it is a continuation" "\n"
        "of an existing command. If this is a continuation of an existing command, all parameters will be" "\n"
        "ignored, and the old parameters will be preserved.")
      uint32 command_id;
    };
  };
};
