// generated from rosidl_adapter/resource/msg.idl.em
// with input from bosdyn_msgs/msg/NavigationFeedbackResponse.msg
// generated code does not contain a copyright notice

#include "bosdyn_msgs/msg/EdgeAnnotationsPathFollowingMode.idl"
#include "bosdyn_msgs/msg/KeyStringValueBosdynMsgsAreaCallbackError.idl"
#include "bosdyn_msgs/msg/KeyStringValueBosdynMsgsNavigationFeedbackResponseActiveRegionInformation.idl"
#include "bosdyn_msgs/msg/NavigationFeedbackResponseBlockageStatus.idl"
#include "bosdyn_msgs/msg/NavigationFeedbackResponseRouteFollowingStatus.idl"
#include "bosdyn_msgs/msg/NavigationFeedbackResponseStatus.idl"
#include "bosdyn_msgs/msg/NavigationFeedbackResponseStuckReason.idl"
#include "bosdyn_msgs/msg/ResponseHeader.idl"
#include "bosdyn_msgs/msg/RobotImpairedState.idl"
#include "bosdyn_msgs/msg/Route.idl"
#include "bosdyn_msgs/msg/SE2TrajectoryCommandFeedbackBodyMovementStatus.idl"
#include "geometry_msgs/msg/Pose.idl"

module bosdyn_msgs {
  module msg {
    @verbatim (language="comment", text=
      "AUTOMATICALLY GENERATED BY PROTO CONVERSION")
    struct NavigationFeedbackResponse {
      @verbatim (language="comment", text=
        "The NavigationFeedback response message returns the robot's" "\n"
        "progress and current status for the command." "\n"
        "Common response header.")
      bosdyn_msgs::msg::ResponseHeader header;

      boolean header_is_set;

      @verbatim (language="comment", text=
        "Return status for the request.")
      bosdyn_msgs::msg::NavigationFeedbackResponseStatus status;

      @verbatim (language="comment", text=
        "If the status is ROBOT_IMPAIRED, this is why the robot is impaired.")
      bosdyn_msgs::msg::RobotImpairedState impaired_state;

      boolean impaired_state_is_set;

      @verbatim (language="comment", text=
        "If the status is AREA_CALLBACK_ERROR, this map will be filled out with the error." "\n"
        "The key of the map is the region id.")
      sequence<bosdyn_msgs::msg::KeyStringValueBosdynMsgsAreaCallbackError> area_callback_errors;

      @verbatim (language="comment", text=
        "Remaining part of current route.")
      bosdyn_msgs::msg::Route remaining_route;

      boolean remaining_route_is_set;

      @verbatim (language="comment", text=
        "ID of the command this feedback corresponds to.")
      uint32 command_id;

      @verbatim (language="comment", text=
        "The most recent transform describing the robot's pose relative to the navigation goal.")
      geometry_msgs::msg::Pose last_ko_tform_goal;

      boolean last_ko_tform_goal_is_set;

      @verbatim (language="comment", text=
        "Indicates whether the robot's body is currently in motion.")
      bosdyn_msgs::msg::SE2TrajectoryCommandFeedbackBodyMovementStatus body_movement_status;

      @verbatim (language="comment", text=
        "Path following mode")
      bosdyn_msgs::msg::EdgeAnnotationsPathFollowingMode path_following_mode;

      @verbatim (language="comment", text=
        "Map of Region IDs with relevant information")
      sequence<bosdyn_msgs::msg::KeyStringValueBosdynMsgsNavigationFeedbackResponseActiveRegionInformation> active_region_information;

      @verbatim (language="comment", text=
        "Data for a Area Callback region" "\n"
        "When the robot is following a route (and Status is STATUS_FOLLOWING_ROUTE), this gives additional" "\n"
        "detail about what the robot is doing to follow that route. When Status is not STATUS_FOLLOWING_ROUTE," "\n"
        "this will be set to ROUTE_FOLLOWING_STATUS_UNKNOWN." "\n"
        "Additional information about what kind of route the robot is following and why.")
      bosdyn_msgs::msg::NavigationFeedbackResponseRouteFollowingStatus route_following_status;

      @verbatim (language="comment", text=
        "Indicates whether the robot thinks its current path is blocked by an obstacle. This will be set when" "\n"
        "Status is STATUS_FOLLOWING_ROUTE, or STATUS_STUCK, and will be BLOCKAGE_STATUS_UNKNOWN in all other cases." "\n"
        "Additional information about whether or not the robot believes the current route to be blocked.")
      bosdyn_msgs::msg::NavigationFeedbackResponseBlockageStatus blockage_status;

      @verbatim (language="comment", text=
        "If status is STATUS_STUCK, this enum provides reasons differentiating various cases that" "\n"
        "can cause the robot to re" "\n"
        "Only filled out if status is STATUS_STUCK to provide additional context.")
      bosdyn_msgs::msg::NavigationFeedbackResponseStuckReason stuck_reason;
    };
  };
};
