// generated from rosidl_adapter/resource/msg.idl.em
// with input from bosdyn_msgs/msg/Dock.msg
// generated code does not contain a copyright notice

#include "bosdyn_msgs/msg/Target.idl"
#include "builtin_interfaces/msg/Duration.idl"

module bosdyn_msgs {
  module msg {
    @verbatim (language="comment", text=
      "AUTOMATICALLY GENERATED BY PROTO CONVERSION")
    struct Dock {
      @verbatim (language="comment", text=
        "The dock itself and the target associated with it" "\n"
        "The docking station ID of the dock corresponds to the number printed on the" "\n"
        "fiducial, below the part of the fiducial that looks like a QR code." "\n"
        "Only fiducial IDs greater than or equal to 500 should be" "\n"
        "used here because they are reserved for docks.")
      uint32 dock_id;

      @verbatim (language="comment", text=
        "To maximize reliability, at record time, the client should dock the robot" "\n"
        "while graph_nav is still recording.  When the robot is finished docking," "\n"
        "the client should create a waypoint on top of the dock, while the robot is" "\n"
        "docked, and then stop recording. The waypoint created while the" "\n"
        "robot is sitting on the dock should be specified here.")
      string docked_waypoint_id;

      @verbatim (language="comment", text=
        "When it is time for the robot to dock, it will approach this target" "\n"
        "before issuing docking commands. If the user is using graph_nav, the" "\n"
        "final waypoint in the NavigateRoute OR the waypoint ID in the" "\n"
        "NavigateTo MUST be at the docking prep pose. To do this, send a docking" "\n"
        "command to move the robot to the docking prep pose. Then, create a" "\n"
        "waypoint at the docking prep pose location. Graph_nav is responsible for" "\n"
        "navigating the robot to the docking prep pose. Once the robot is in the" "\n"
        "docking prep pose, the docking service does the rest.")
      bosdyn_msgs::msg::Target target_prep_pose;

      boolean target_prep_pose_is_set;

      @verbatim (language="comment", text=
        "At mission playback, if the robot is unable to reach the dock OR successfully" "\n"
        "dock, the mission will let the operator know with a user question.  If the operator" "\n"
        "does not answer, the robot will safely power off.  This parameter controls" "\n"
        "how long the operator has to answer." "\n"
        "This parameter also controls how long robot will wait to retry to undock on" "\n"
        "a failed undock.")
      builtin_interfaces::msg::Duration prompt_duration;

      boolean prompt_duration_is_set;
    };
  };
};
