// generated from rosidl_adapter/resource/msg.idl.em
// with input from bosdyn_msgs/msg/Event.msg
// generated code does not contain a copyright notice

#include "bosdyn_msgs/msg/EventLevel.idl"
#include "bosdyn_msgs/msg/EventLogPreserveHint.idl"
#include "bosdyn_msgs/msg/Parameter.idl"
#include "builtin_interfaces/msg/Time.idl"

module bosdyn_msgs {
  module msg {
    @verbatim (language="comment", text=
      "AUTOMATICALLY GENERATED BY PROTO CONVERSION")
    struct Event {
      @verbatim (language="comment", text=
        "This message contains event data for logging to the public timeline." "\n"
        "Type of event, typically prefixed with a project or organization, e.g. \"bosdyn:startup\"")
      string type;

      @verbatim (language="comment", text=
        "Event description." "\n"
        "This is optional.")
      string description;

      @verbatim (language="comment", text=
        "A description of the source of this event. May be the client name." "\n"
        "- Not required to be unique." "\n"
        "- Disambiguates the source of similar event types.")
      string source;

      @verbatim (language="comment", text=
        "Unique identifier. Used to link start and end messages for events with a duration." "\n"
        "- Long running events may have separate messages at the start and end, in case the message" "\n"
        "   for the end of the event is lost." "\n"
        "- For events without a separate start and end message (in which case both start_time and" "\n"
        "   end time should be specified), the 'id' field will be set by the service during upload," "\n"
        "   unless the user has already set it." "\n"
        "- This id is not tracked internally by the service. It is only used to consume the event" "\n"
        "   timeline." "\n"
        "- To be effective, the id value should be generated randomly by the client.")
      string id;

      @verbatim (language="comment", text=
        "Start and end times for the event:" "\n"
        "- Some events are instantaneous. For these, set start_timestamp and end_timestamp to the" "\n"
        "   same value and send a single message (without an id)." "\n"
        "- Some events take time. At the onset, send a message with a unique id, the start time, and" "\n"
        "   type. The end message should include all data from the start message, any" "\n"
        "   additional data, and an end time.  If you have the end message, you should not need" "\n"
        "   the start message since it is a strict subset.")
      builtin_interfaces::msg::Time start_time;

      boolean start_time_is_set;

      builtin_interfaces::msg::Time end_time;

      boolean end_time_is_set;

      @verbatim (language="comment", text=
        "Level, or similarly \"visibility,\" \"importance,\" or \"weight\" of event." "\n"
        " - Higher level events will increase the visibility on the event timeline, relative to other" "\n"
        "   events." "\n"
        " - In general, higher level events should be more consequential with respect to the robot" "\n"
        "   operation on a per-occurence basis." "\n"
        " - Lower level events should be less consequential on a per occurence basis." "\n"
        " - Non-critical events may be one of LOW, MEDIUM, or HIGH.  UNSET is logically equivalent to" "\n"
        "   LOW level." "\n"
        " - Critical events may be either mission or system critical." "\n"
        " - System-critical is quasi-reserved for internal robot use, and is used to identify events" "\n"
        "   that directly affect robot status or capability, such as the onset of a critical fault or" "\n"
        "   start of an enabling capability." "\n"
        " - Mission-critical is quasi-reserved client use, and is intended for events that directly" "\n"
        "   affect the ability of the robot to \"do what the user wants,\" such as the onset of a" "\n"
        "   service fault or start of an enabling capability." "\n"
        "The relative importance of the event.")
      bosdyn_msgs::msg::EventLevel level;

      @verbatim (language="comment", text=
        "Optional set of event parameters.")
      sequence<bosdyn_msgs::msg::Parameter> parameters;

      @verbatim (language="comment", text=
        "LogPreserveHint may encode a hint to the robot's logging system for whether to preserve" "\n"
        "internal log data near the time of this event.  This could be useful in saving data" "\n"
        "to be used in a service log to send to Boston Dynamics." "\n"
        "Optionally request that the robot try to preserve data near this time for a service log.")
      bosdyn_msgs::msg::EventLogPreserveHint log_preserve_hint;
    };
  };
};
