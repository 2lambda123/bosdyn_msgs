// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/DescriptorBlock.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__DESCRIPTOR_BLOCK__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__DESCRIPTOR_BLOCK__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'descriptor_type'
#include "bosdyn_msgs/msg/detail/descriptor_block_one_of_descriptor_type__struct.h"

/// Struct defined in msg/DescriptorBlock in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__DescriptorBlock
{
  /// The file format consists of 3 kinds of blocks with simple framing:
  ///  - Serialized DescriptorBlock protos, describing either the main file,
  ///     a defining a series of data blocks, or a file index,
  ///  - Serialized DataDescriptorBlock protos, describing a single data block, and
  ///  - Binary data.
  /// A Descriptor block typically describes a series of messages, but the descriptor at the
  ///  start of the file describes the contents of the file as a whole, and the descriptor
  ///  at the end of the file is an index structure to allow efficient access to the contents
  ///  of the file.
  bosdyn_msgs__msg__DescriptorBlockOneOfDescriptorType descriptor_type;
} bosdyn_msgs__msg__DescriptorBlock;

// Struct for a sequence of bosdyn_msgs__msg__DescriptorBlock.
typedef struct bosdyn_msgs__msg__DescriptorBlock__Sequence
{
  bosdyn_msgs__msg__DescriptorBlock * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__DescriptorBlock__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__DESCRIPTOR_BLOCK__STRUCT_H_
