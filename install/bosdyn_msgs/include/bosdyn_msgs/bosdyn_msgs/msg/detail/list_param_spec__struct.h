// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/ListParamSpec.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__LIST_PARAM_SPEC__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__LIST_PARAM_SPEC__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'element_spec'
#include "bosdyn_msgs/msg/detail/serialized_message__struct.h"

/// Struct defined in msg/ListParamSpec in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__ListParamSpec
{
  /// Each element in the list must follow the specification of the matching type.
  /// For example, if element_specs.int_spec is filled out, all values should follow
  /// that specification. If element_specs.string_spec is filled out, all values
  /// should follow that specification.
  /// Serialized bosdyn_msgs/CustomParamSpec to break recursion
  bosdyn_msgs__msg__SerializedMessage element_spec;
  bool element_spec_is_set;
  /// Minimum and maximum number of values the client may send (inclusive).
  /// If min_number_of_values is 0, the parameter is optional.
  ///
  /// 0 <= min_number_of_values <= max_number_of_values
  int64_t min_number_of_values;
  bool min_number_of_values_is_set;
  int64_t max_number_of_values;
  bool max_number_of_values_is_set;
} bosdyn_msgs__msg__ListParamSpec;

// Struct for a sequence of bosdyn_msgs__msg__ListParamSpec.
typedef struct bosdyn_msgs__msg__ListParamSpec__Sequence
{
  bosdyn_msgs__msg__ListParamSpec * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__ListParamSpec__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__LIST_PARAM_SPEC__STRUCT_H_
