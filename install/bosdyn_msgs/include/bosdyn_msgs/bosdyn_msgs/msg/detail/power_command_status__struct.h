// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/PowerCommandStatus.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__POWER_COMMAND_STATUS__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__POWER_COMMAND_STATUS__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

/// Constant 'STATUS_UNKNOWN'.
/**
  * Feedback on the current state of a power command on the robot.
  * Status is not specified.
 */
enum
{
  bosdyn_msgs__msg__PowerCommandStatus__STATUS_UNKNOWN = 0
};

/// Constant 'STATUS_IN_PROGRESS'.
/**
  * Power command is executing.
 */
enum
{
  bosdyn_msgs__msg__PowerCommandStatus__STATUS_IN_PROGRESS = 1
};

/// Constant 'STATUS_SUCCESS'.
/**
  * Power command succeeded.
 */
enum
{
  bosdyn_msgs__msg__PowerCommandStatus__STATUS_SUCCESS = 2
};

/// Constant 'STATUS_SHORE_POWER_CONNECTED'.
/**
  * ERROR: Robot cannot be powered on while on wall power.
 */
enum
{
  bosdyn_msgs__msg__PowerCommandStatus__STATUS_SHORE_POWER_CONNECTED = 3
};

/// Constant 'STATUS_BATTERY_MISSING'.
/**
  * ERROR: Battery not inserted into robot.
 */
enum
{
  bosdyn_msgs__msg__PowerCommandStatus__STATUS_BATTERY_MISSING = 4
};

/// Constant 'STATUS_COMMAND_IN_PROGRESS'.
/**
  * ERROR: Power command cant be overwritten.
 */
enum
{
  bosdyn_msgs__msg__PowerCommandStatus__STATUS_COMMAND_IN_PROGRESS = 5
};

/// Constant 'STATUS_ESTOPPED'.
/**
  * ERROR: Cannot power on while estopped. A robot may have multiple estops.
  * Inspect EStopState for additional info.
 */
enum
{
  bosdyn_msgs__msg__PowerCommandStatus__STATUS_ESTOPPED = 6
};

/// Constant 'STATUS_FAULTED'.
/**
  * ERROR: Cannot power due to a fault. Inspect FaultState for more info.
 */
enum
{
  bosdyn_msgs__msg__PowerCommandStatus__STATUS_FAULTED = 7
};

/// Constant 'STATUS_INTERNAL_ERROR'.
/**
  * ERROR: Internal error occurred, may be clear-able by issuing a power off command.
 */
enum
{
  bosdyn_msgs__msg__PowerCommandStatus__STATUS_INTERNAL_ERROR = 8
};

/// Constant 'STATUS_LICENSE_ERROR'.
/**
  * ERROR: License check failed. Check license_status field for details.
 */
enum
{
  bosdyn_msgs__msg__PowerCommandStatus__STATUS_LICENSE_ERROR = 9
};

/// Constant 'INCOMPATIBLE_HARDWARE_ERROR'.
/**
  * ERROR: The Spot hardware is not compatible with the request request.
 */
enum
{
  bosdyn_msgs__msg__PowerCommandStatus__INCOMPATIBLE_HARDWARE_ERROR = 10
};

/// Constant 'STATUS_OVERRIDDEN'.
/**
  * ERROR: Robot has overridden the power command and disabled motor power. In the case
  * of a commanded power OFF, robot will report SUCCESS if power is disabled.
 */
enum
{
  bosdyn_msgs__msg__PowerCommandStatus__STATUS_OVERRIDDEN = 11
};

/// Constant 'STATUS_KEEPALIVE_MOTORS_OFF'.
/**
  * ERROR: Cannot power on while a Keepalive policy with a motors-off action is active.
  * See the Keepalive API service for more details.
 */
enum
{
  bosdyn_msgs__msg__PowerCommandStatus__STATUS_KEEPALIVE_MOTORS_OFF = 12
};

/// Struct defined in msg/PowerCommandStatus in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__PowerCommandStatus
{
  int8_t value;
} bosdyn_msgs__msg__PowerCommandStatus;

// Struct for a sequence of bosdyn_msgs__msg__PowerCommandStatus.
typedef struct bosdyn_msgs__msg__PowerCommandStatus__Sequence
{
  bosdyn_msgs__msg__PowerCommandStatus * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__PowerCommandStatus__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__POWER_COMMAND_STATUS__STRUCT_H_
