// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/ArmJointMoveCommandFeedbackPlannerStatus.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__ARM_JOINT_MOVE_COMMAND_FEEDBACK_PLANNER_STATUS__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__ARM_JOINT_MOVE_COMMAND_FEEDBACK_PLANNER_STATUS__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

/// Constant 'PLANNER_STATUS_UNKNOWN'.
/**
  * PLANNER_STATUS_UNKNOWN should never be used. If used, an internal error has happened.
 */
enum
{
  bosdyn_msgs__msg__ArmJointMoveCommandFeedbackPlannerStatus__PLANNER_STATUS_UNKNOWN = 0
};

/// Constant 'PLANNER_STATUS_SUCCESS'.
/**
  * A solution passing through the desired points and obeying the constraints was found.
 */
enum
{
  bosdyn_msgs__msg__ArmJointMoveCommandFeedbackPlannerStatus__PLANNER_STATUS_SUCCESS = 1
};

/// Constant 'PLANNER_STATUS_MODIFIED'.
/**
  * The planner had to modify the desired points in order to obey the constraints.  For
  * example, if you specify a 1 point trajectory, and tell it to get there in a really short
  * amount of time, but haven't set a high allowable max velocity / acceleration, the planner
  * will do its best to get as close as possible to the final point, but won't reach it. In
  * situations where we've modified you last point, we append a minimum time trajectory (that
  * obeys the velocity and acceleration limits) from the planner's final point to the requested
  * final point.
 */
enum
{
  bosdyn_msgs__msg__ArmJointMoveCommandFeedbackPlannerStatus__PLANNER_STATUS_MODIFIED = 2
};

/// Constant 'PLANNER_STATUS_FAILED'.
/**
  * Failed to compute a valid trajectory, will go to first point instead. It is possible
  * that our optimizer till fail to solve the problem instead of returning a sub-optimal
  * solution.  This is un-likely to occur.
 */
enum
{
  bosdyn_msgs__msg__ArmJointMoveCommandFeedbackPlannerStatus__PLANNER_STATUS_FAILED = 3
};

/// Struct defined in msg/ArmJointMoveCommandFeedbackPlannerStatus in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__ArmJointMoveCommandFeedbackPlannerStatus
{
  int8_t value;
} bosdyn_msgs__msg__ArmJointMoveCommandFeedbackPlannerStatus;

// Struct for a sequence of bosdyn_msgs__msg__ArmJointMoveCommandFeedbackPlannerStatus.
typedef struct bosdyn_msgs__msg__ArmJointMoveCommandFeedbackPlannerStatus__Sequence
{
  bosdyn_msgs__msg__ArmJointMoveCommandFeedbackPlannerStatus * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__ArmJointMoveCommandFeedbackPlannerStatus__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__ARM_JOINT_MOVE_COMMAND_FEEDBACK_PLANNER_STATUS__STRUCT_H_
