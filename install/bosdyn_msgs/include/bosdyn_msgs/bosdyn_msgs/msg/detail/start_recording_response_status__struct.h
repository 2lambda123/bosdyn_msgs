// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/StartRecordingResponseStatus.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__START_RECORDING_RESPONSE_STATUS__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__START_RECORDING_RESPONSE_STATUS__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

/// Constant 'STATUS_UNKNOWN'.
/**
  * Status is unknown/unset.
 */
enum
{
  bosdyn_msgs__msg__StartRecordingResponseStatus__STATUS_UNKNOWN = 0
};

/// Constant 'STATUS_OK'.
/**
  * Recording has been started.
 */
enum
{
  bosdyn_msgs__msg__StartRecordingResponseStatus__STATUS_OK = 1
};

/// Constant 'STATUS_COULD_NOT_CREATE_WAYPOINT'.
/**
  * In this case we tried to start recording, but GraphNav was internally still waiting for
  * some data from the robot.
 */
enum
{
  bosdyn_msgs__msg__StartRecordingResponseStatus__STATUS_COULD_NOT_CREATE_WAYPOINT = 2
};

/// Constant 'STATUS_FOLLOWING_ROUTE'.
/**
  * Can't start recording because the robot is following a route.
 */
enum
{
  bosdyn_msgs__msg__StartRecordingResponseStatus__STATUS_FOLLOWING_ROUTE = 3
};

/// Constant 'STATUS_NOT_LOCALIZED_TO_EXISTING_MAP'.
/**
  * When recording branches, the robot is not localized to the existing map before starting
  * to record a new branch.
 */
enum
{
  bosdyn_msgs__msg__StartRecordingResponseStatus__STATUS_NOT_LOCALIZED_TO_EXISTING_MAP = 4
};

/// Constant 'STATUS_MISSING_FIDUCIALS'.
/**
  * Can't start recording because the robot doesn't see the required fiducials.
 */
enum
{
  bosdyn_msgs__msg__StartRecordingResponseStatus__STATUS_MISSING_FIDUCIALS = 5
};

/// Constant 'STATUS_MAP_TOO_LARGE_LICENSE'.
/**
  * Can't start recording because the map was too large for the license.
 */
enum
{
  bosdyn_msgs__msg__StartRecordingResponseStatus__STATUS_MAP_TOO_LARGE_LICENSE = 6
};

/// Constant 'STATUS_REMOTE_CLOUD_FAILURE_NOT_IN_DIRECTORY'.
/**
  * A required remote cloud did not exist in the service directory.
 */
enum
{
  bosdyn_msgs__msg__StartRecordingResponseStatus__STATUS_REMOTE_CLOUD_FAILURE_NOT_IN_DIRECTORY = 7
};

/// Constant 'STATUS_REMOTE_CLOUD_FAILURE_NO_DATA'.
/**
  * A required remote cloud did not have data.
 */
enum
{
  bosdyn_msgs__msg__StartRecordingResponseStatus__STATUS_REMOTE_CLOUD_FAILURE_NO_DATA = 8
};

/// Constant 'STATUS_FIDUCIAL_POSE_NOT_OK'.
/**
  * All fiducials are visible but at least one pose could not be determined accurately.
 */
enum
{
  bosdyn_msgs__msg__StartRecordingResponseStatus__STATUS_FIDUCIAL_POSE_NOT_OK = 9
};

/// Constant 'STATUS_TOO_FAR_FROM_EXISTING_MAP'.
/**
  * When recording branches, the robot is too far from the existing map when starting
  * to record a new branch.
 */
enum
{
  bosdyn_msgs__msg__StartRecordingResponseStatus__STATUS_TOO_FAR_FROM_EXISTING_MAP = 10
};

/// Constant 'STATUS_ROBOT_IMPAIRED'.
/**
  * Unable to start recording because the robot is impaired.
  * See impaired_state for more details.
 */
enum
{
  bosdyn_msgs__msg__StartRecordingResponseStatus__STATUS_ROBOT_IMPAIRED = 11
};

/// Struct defined in msg/StartRecordingResponseStatus in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__StartRecordingResponseStatus
{
  int8_t value;
} bosdyn_msgs__msg__StartRecordingResponseStatus;

// Struct for a sequence of bosdyn_msgs__msg__StartRecordingResponseStatus.
typedef struct bosdyn_msgs__msg__StartRecordingResponseStatus__Sequence
{
  bosdyn_msgs__msg__StartRecordingResponseStatus * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__StartRecordingResponseStatus__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__START_RECORDING_RESPONSE_STATUS__STRUCT_H_
