// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/PodTypeDescriptor.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__POD_TYPE_DESCRIPTOR__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__POD_TYPE_DESCRIPTOR__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'pod_type'
#include "bosdyn_msgs/msg/detail/pod_type_enum__struct.h"
// Member 'dimension'
#include "rosidl_runtime_c/primitives_sequence.h"

/// Struct defined in msg/PodTypeDescriptor in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__PodTypeDescriptor
{
  /// If a data series contains signals-style data of time-sampled "plain old datatypes", this
  ///  describes the content of the series.
  /// All POD data stored in data blocks is stored in little-endian byte order.
  /// Any number of samples may be stored within a given data block.
  /// The type of machine-readable values stored.
  bosdyn_msgs__msg__PodTypeEnum pod_type;
  /// If empty, indicates a single POD per sample.
  /// If one-element, indicates a vector of the given size per sample.
  /// If two-elements, indicates a matrix of the given size, and so on.
  /// An M x N x .. x P array of data is traversed from innermost (P) to outermost (M) dimension.
  rosidl_runtime_c__uint32__Sequence dimension;
} bosdyn_msgs__msg__PodTypeDescriptor;

// Struct for a sequence of bosdyn_msgs__msg__PodTypeDescriptor.
typedef struct bosdyn_msgs__msg__PodTypeDescriptor__Sequence
{
  bosdyn_msgs__msg__PodTypeDescriptor * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__PodTypeDescriptor__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__POD_TYPE_DESCRIPTOR__STRUCT_H_
