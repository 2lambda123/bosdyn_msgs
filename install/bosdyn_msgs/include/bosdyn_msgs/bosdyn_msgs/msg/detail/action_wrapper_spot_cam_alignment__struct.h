// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/ActionWrapperSpotCamAlignment.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__ACTION_WRAPPER_SPOT_CAM_ALIGNMENT__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__ACTION_WRAPPER_SPOT_CAM_ALIGNMENT__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'alignments'
#include "bosdyn_msgs/msg/detail/action_wrapper_spot_cam_alignment_alignment__struct.h"
// Member 'target_tform_sensor'
#include "geometry_msgs/msg/detail/pose__struct.h"
// Member 'target_sensor_ids'
#include "rosidl_runtime_c/string.h"

/// Struct defined in msg/ActionWrapperSpotCamAlignment in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__ActionWrapperSpotCamAlignment
{
  /// List of alignments to perform
  bosdyn_msgs__msg__ActionWrapperSpotCamAlignmentAlignment__Sequence alignments;
  /// Desired transform from the sensor to the target
  geometry_msgs__msg__Pose target_tform_sensor;
  bool target_tform_sensor_is_set;
  /// Final zoom the camera should be after all alignments have finished
  float final_zoom;
  /// Optional list of sensor names which should be unobstructed after alignment
  rosidl_runtime_c__String__Sequence target_sensor_ids;
} bosdyn_msgs__msg__ActionWrapperSpotCamAlignment;

// Struct for a sequence of bosdyn_msgs__msg__ActionWrapperSpotCamAlignment.
typedef struct bosdyn_msgs__msg__ActionWrapperSpotCamAlignment__Sequence
{
  bosdyn_msgs__msg__ActionWrapperSpotCamAlignment * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__ActionWrapperSpotCamAlignment__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__ACTION_WRAPPER_SPOT_CAM_ALIGNMENT__STRUCT_H_
