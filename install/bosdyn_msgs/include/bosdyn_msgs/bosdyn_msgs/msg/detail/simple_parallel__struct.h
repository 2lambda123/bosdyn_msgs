// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/SimpleParallel.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__SIMPLE_PARALLEL__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__SIMPLE_PARALLEL__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'primary'
// Member 'secondary'
#include "bosdyn_msgs/msg/detail/node__struct.h"

/// Struct defined in msg/SimpleParallel in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__SimpleParallel
{
  /// Run two child nodes together, returning the primary child's result when it completes.
  /// Primary node, whose completion will end the execution of SimpleParallel.
  /// The secondary node will be ticked at least once.
  bosdyn_msgs__msg__Node primary;
  bool primary_is_set;
  /// Secondary node, which will be ticked as long as the primary is still running.
  bosdyn_msgs__msg__Node secondary;
  bool secondary_is_set;
  /// By default, if the secondary node finishes before the primary node, the secondary node
  /// will be restarted.  If this flag is set to true, and the secondary node completes before
  /// the primary node, it will never be restarted.
  bool run_secondary_node_once;
} bosdyn_msgs__msg__SimpleParallel;

// Struct for a sequence of bosdyn_msgs__msg__SimpleParallel.
typedef struct bosdyn_msgs__msg__SimpleParallel__Sequence
{
  bosdyn_msgs__msg__SimpleParallel * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__SimpleParallel__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__SIMPLE_PARALLEL__STRUCT_H_
