// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/Vec3TrajectoryPoint.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__VEC3_TRAJECTORY_POINT__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__VEC3_TRAJECTORY_POINT__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'point'
#include "geometry_msgs/msg/detail/vector3__struct.h"
// Member 'time_since_reference'
#include "builtin_interfaces/msg/detail/duration__struct.h"

/// Struct defined in msg/Vec3TrajectoryPoint in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__Vec3TrajectoryPoint
{
  /// A 3D point (and linear velocity) that can be used as a point within a trajectory.
  /// The point 3D position.
  geometry_msgs__msg__Vector3 point;
  bool point_is_set;
  /// These are all optional.  If nothing is specified, good defaults will be chosen
  /// server-side.
  double linear_speed;
  /// The duration to reach the point relative to the trajectory reference time.
  builtin_interfaces__msg__Duration time_since_reference;
  bool time_since_reference_is_set;
} bosdyn_msgs__msg__Vec3TrajectoryPoint;

// Struct for a sequence of bosdyn_msgs__msg__Vec3TrajectoryPoint.
typedef struct bosdyn_msgs__msg__Vec3TrajectoryPoint__Sequence
{
  bosdyn_msgs__msg__Vec3TrajectoryPoint * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__Vec3TrajectoryPoint__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__VEC3_TRAJECTORY_POINT__STRUCT_H_
