// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/FootStateTerrainState.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__FOOT_STATE_TERRAIN_STATE__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__FOOT_STATE_TERRAIN_STATE__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'frame_name'
#include "rosidl_runtime_c/string.h"
// Member 'foot_slip_distance_rt_frame'
// Member 'foot_slip_velocity_rt_frame'
// Member 'ground_contact_normal_rt_frame'
#include "geometry_msgs/msg/detail/vector3__struct.h"

/// Struct defined in msg/FootStateTerrainState in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__FootStateTerrainState
{
  /// Estimated ground coefficient of friction for this foot.
  double ground_mu_est;
  /// Reference frame name for vector data.
  rosidl_runtime_c__String frame_name;
  /// Foot slip distance rt named frame
  geometry_msgs__msg__Vector3 foot_slip_distance_rt_frame;
  bool foot_slip_distance_rt_frame_is_set;
  /// Foot slip velocity rt named frame
  geometry_msgs__msg__Vector3 foot_slip_velocity_rt_frame;
  bool foot_slip_velocity_rt_frame_is_set;
  /// Ground contact normal rt named frame
  geometry_msgs__msg__Vector3 ground_contact_normal_rt_frame;
  bool ground_contact_normal_rt_frame_is_set;
  /// Mean penetration (meters) of the foot below the ground visual
  /// surface. For penetrable terrains (gravel/sand/grass etc.) these values are
  /// positive. Negative values would indicate potential odometry issues.
  double visual_surface_ground_penetration_mean;
  /// Standard deviation of the visual surface ground penetration.
  double visual_surface_ground_penetration_std;
} bosdyn_msgs__msg__FootStateTerrainState;

// Struct for a sequence of bosdyn_msgs__msg__FootStateTerrainState.
typedef struct bosdyn_msgs__msg__FootStateTerrainState__Sequence
{
  bosdyn_msgs__msg__FootStateTerrainState * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__FootStateTerrainState__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__FOOT_STATE_TERRAIN_STATE__STRUCT_H_
