// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/GazeCommandFeedback.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__GAZE_COMMAND_FEEDBACK__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__GAZE_COMMAND_FEEDBACK__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'status'
#include "bosdyn_msgs/msg/detail/gaze_command_feedback_status__struct.h"

/// Struct defined in msg/GazeCommandFeedback in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__GazeCommandFeedback
{
  /// Current status of the command.
  bosdyn_msgs__msg__GazeCommandFeedbackStatus status;
  /// If we are gazing at the target
  /// Rotation from the current gaze point to the trajectory's end
  bool gazing_at_target;
  float gaze_to_target_rotation_measured;
  /// If the hand's position is at the goal.
  /// Distance from the hand's current position to the trajectory's end
  bool hand_position_at_goal;
  float hand_distance_to_goal_measured;
  /// If the hand's roll is at the goal.
  /// Rotation from the current hand position to the desired roll at the trajectory's end
  /// [radians]
  bool hand_roll_at_goal;
  float hand_roll_to_target_roll_measured;
} bosdyn_msgs__msg__GazeCommandFeedback;

// Struct for a sequence of bosdyn_msgs__msg__GazeCommandFeedback.
typedef struct bosdyn_msgs__msg__GazeCommandFeedback__Sequence
{
  bosdyn_msgs__msg__GazeCommandFeedback * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__GazeCommandFeedback__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__GAZE_COMMAND_FEEDBACK__STRUCT_H_
