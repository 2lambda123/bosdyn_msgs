// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/PayloadMassVolumeProperties.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__PAYLOAD_MASS_VOLUME_PROPERTIES__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__PAYLOAD_MASS_VOLUME_PROPERTIES__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'com_pos_rt_payload'
#include "geometry_msgs/msg/detail/vector3__struct.h"
// Member 'moi_tensor'
#include "bosdyn_msgs/msg/detail/moment_of_intertia__struct.h"
// Member 'bounding_box'
#include "bosdyn_msgs/msg/detail/box3_with_frame__struct.h"
// Member 'joint_limits'
#include "bosdyn_msgs/msg/detail/joint_limits__struct.h"

/// Struct defined in msg/PayloadMassVolumeProperties in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__PayloadMassVolumeProperties
{
  /// PayloadMassVolumeProperties contain mass and volume information for the payload
  /// in the format that the user interacts with it. It is transmitted to the control
  /// and perception systems and processed there to inform those systems.
  /// Total mass of payload in kg.
  float total_mass;
  /// Position of the center of mass of the payload in the payload frame. Meters.
  geometry_msgs__msg__Vector3 com_pos_rt_payload;
  bool com_pos_rt_payload_is_set;
  /// The moment of inertia of the payload, represented about the payload
  /// center of mass, in the payload frame. Units in.
  bosdyn_msgs__msg__MomentOfIntertia moi_tensor;
  bool moi_tensor_is_set;
  /// Zero or more bounding boxes indicating the occupied volume of the payload.
  /// These boxes must be represented in the payload frame by specifying
  /// Must have Box3WithFrame.frame_name == "payload".
  bosdyn_msgs__msg__Box3WithFrame__Sequence bounding_box;
  /// Joint limits defining limits to range of motion of the hips of the robot,
  /// in order to prevent collisions with the payload.
  /// This field is optional and is only recommended for advanced development
  /// purposes.
  bosdyn_msgs__msg__JointLimits__Sequence joint_limits;
} bosdyn_msgs__msg__PayloadMassVolumeProperties;

// Struct for a sequence of bosdyn_msgs__msg__PayloadMassVolumeProperties.
typedef struct bosdyn_msgs__msg__PayloadMassVolumeProperties__Sequence
{
  bosdyn_msgs__msg__PayloadMassVolumeProperties * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__PayloadMassVolumeProperties__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__PAYLOAD_MASS_VOLUME_PROPERTIES__STRUCT_H_
