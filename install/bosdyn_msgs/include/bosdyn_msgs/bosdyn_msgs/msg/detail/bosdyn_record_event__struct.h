// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/BosdynRecordEvent.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__BOSDYN_RECORD_EVENT__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__BOSDYN_RECORD_EVENT__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'service_name'
// Member 'host'
#include "rosidl_runtime_c/string.h"
// Member 'event'
#include "bosdyn_msgs/msg/detail/event__struct.h"
// Member 'additional_parameters'
#include "bosdyn_msgs/msg/detail/key_string_value_bosdyn_msgs_value__struct.h"

/// Struct defined in msg/BosdynRecordEvent in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__BosdynRecordEvent
{
  /// Record an APIEvent
  /// Name of the service to use.
  rosidl_runtime_c__String service_name;
  /// Host machine the service is running on.
  rosidl_runtime_c__String host;
  /// The event to be logged. Note that everything should be populated except the id, start_time
  /// and end_time. The start and end time will be populated by the mission, using the node's start
  /// time. The id field shouldn't be set when the start and end times are the same.
  bosdyn_msgs__msg__Event event;
  bool event_is_set;
  /// If set to false, this node will wait for the RecordEvents rpc to complete.  If set to true,
  /// this node will send the RecordEventsRequest, and then return SUCCESS without waiting for
  /// the RecordEventsResponse.
  bool succeed_early;
  /// In addition to the parameters specified in the event field, this field can be used
  /// to specify events only known at runtime.  Map key will be parameter label, map value will be
  /// evaluated then packed into parameter value.
  bosdyn_msgs__msg__KeyStringValueBosdynMsgsValue__Sequence additional_parameters;
} bosdyn_msgs__msg__BosdynRecordEvent;

// Struct for a sequence of bosdyn_msgs__msg__BosdynRecordEvent.
typedef struct bosdyn_msgs__msg__BosdynRecordEvent__Sequence
{
  bosdyn_msgs__msg__BosdynRecordEvent * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__BosdynRecordEvent__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__BOSDYN_RECORD_EVENT__STRUCT_H_
