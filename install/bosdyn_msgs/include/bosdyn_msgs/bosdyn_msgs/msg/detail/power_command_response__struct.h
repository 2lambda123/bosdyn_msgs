// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/PowerCommandResponse.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__POWER_COMMAND_RESPONSE__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__POWER_COMMAND_RESPONSE__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'header'
#include "bosdyn_msgs/msg/detail/response_header__struct.h"
// Member 'lease_use_result'
#include "bosdyn_msgs/msg/detail/lease_use_result__struct.h"
// Member 'status'
#include "bosdyn_msgs/msg/detail/power_command_status__struct.h"
// Member 'license_status'
#include "bosdyn_msgs/msg/detail/license_info_status__struct.h"
// Member 'blocking_faults'
#include "bosdyn_msgs/msg/detail/system_fault__struct.h"

/// Struct defined in msg/PowerCommandResponse in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__PowerCommandResponse
{
  /// The PowerCommand response message which contains a unique identifier that can be used to
  /// get feedback on the progress of a power command from the power service.
  /// Common response header.
  bosdyn_msgs__msg__ResponseHeader header;
  bool header_is_set;
  /// Details about how the lease was used.
  bosdyn_msgs__msg__LeaseUseResult lease_use_result;
  bool lease_use_result_is_set;
  /// Current feedback of specified command.
  bosdyn_msgs__msg__PowerCommandStatus status;
  /// Unique identifier for the command, If empty, was not accepted.
  uint32_t power_command_id;
  /// License check status
  bosdyn_msgs__msg__LicenseInfoStatus license_status;
  /// Optional list of active faults blocking success of the PowerCommandRequest
  bosdyn_msgs__msg__SystemFault__Sequence blocking_faults;
} bosdyn_msgs__msg__PowerCommandResponse;

// Struct for a sequence of bosdyn_msgs__msg__PowerCommandResponse.
typedef struct bosdyn_msgs__msg__PowerCommandResponse__Sequence
{
  bosdyn_msgs__msg__PowerCommandResponse * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__PowerCommandResponse__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__POWER_COMMAND_RESPONSE__STRUCT_H_
