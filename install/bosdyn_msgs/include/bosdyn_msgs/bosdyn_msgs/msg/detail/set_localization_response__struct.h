// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/SetLocalizationResponse.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__SET_LOCALIZATION_RESPONSE__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__SET_LOCALIZATION_RESPONSE__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'header'
#include "bosdyn_msgs/msg/detail/response_header__struct.h"
// Member 'lease_use_result'
#include "bosdyn_msgs/msg/detail/lease_use_result__struct.h"
// Member 'status'
#include "bosdyn_msgs/msg/detail/set_localization_response_status__struct.h"
// Member 'error_report'
#include "rosidl_runtime_c/string.h"
// Member 'localization'
#include "bosdyn_msgs/msg/detail/localization__struct.h"
// Member 'suspected_ambiguity'
#include "bosdyn_msgs/msg/detail/set_localization_response_suspected_ambiguity__struct.h"
// Member 'impaired_state'
#include "bosdyn_msgs/msg/detail/robot_impaired_state__struct.h"
// Member 'sensor_status'
#include "bosdyn_msgs/msg/detail/sensor_compatibility_status__struct.h"
// Member 'quality_check_result'
#include "bosdyn_msgs/msg/detail/set_localization_response_quality_check_result__struct.h"

/// Struct defined in msg/SetLocalizationResponse in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__SetLocalizationResponse
{
  /// The SetLocalization response message contains the resulting localization to the map.
  /// Common response header.
  bosdyn_msgs__msg__ResponseHeader header;
  bool header_is_set;
  /// Result of using the lease.
  bosdyn_msgs__msg__LeaseUseResult lease_use_result;
  bool lease_use_result_is_set;
  /// Return status for the request.
  bosdyn_msgs__msg__SetLocalizationResponseStatus status;
  /// If set, describes the reason the status is not OK.
  rosidl_runtime_c__String error_report;
  /// Result of localization.
  bosdyn_msgs__msg__Localization localization;
  bool localization_is_set;
  /// Alternative information if the localization is ambiguous.
  bosdyn_msgs__msg__SetLocalizationResponseSuspectedAmbiguity suspected_ambiguity;
  bool suspected_ambiguity_is_set;
  /// If the status is ROBOT_IMPAIRED, this is why the robot is impaired.
  bosdyn_msgs__msg__RobotImpairedState impaired_state;
  bool impaired_state_is_set;
  /// This status determines whether the robot has compatible sensors for the
  /// map that was recorded. Note that if sensors aren't working, STATUS_IMPARIED
  /// will be returned, rather than STATUS_INCOMPATIBLE_SENSORS.
  bosdyn_msgs__msg__SensorCompatibilityStatus sensor_status;
  bool sensor_status_is_set;
  /// Graph Nav will check the quality of the resulting localization and report the status
  /// here. Note that to preserve backwards compatability with 3.2 and earlier, a poor quality check
  /// does not result in this RPC failing.
  bosdyn_msgs__msg__SetLocalizationResponseQualityCheckResult quality_check_result;
} bosdyn_msgs__msg__SetLocalizationResponse;

// Struct for a sequence of bosdyn_msgs__msg__SetLocalizationResponse.
typedef struct bosdyn_msgs__msg__SetLocalizationResponse__Sequence
{
  bosdyn_msgs__msg__SetLocalizationResponse * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__SetLocalizationResponse__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__SET_LOCALIZATION_RESPONSE__STRUCT_H_
