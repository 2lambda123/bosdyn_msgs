// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/EdgeAnnotations.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__EDGE_ANNOTATIONS__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__EDGE_ANNOTATIONS__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'stairs'
#include "bosdyn_msgs/msg/detail/edge_annotations_stair_data__struct.h"
// Member 'direction_constraint'
#include "bosdyn_msgs/msg/detail/edge_annotations_direction_constraint__struct.h"
// Member 'mobility_params'
#include "bosdyn_msgs/msg/detail/mobility_params__struct.h"
// Member 'edge_source'
#include "bosdyn_msgs/msg/detail/edge_edge_source__struct.h"
// Member 'path_following_mode'
#include "bosdyn_msgs/msg/detail/edge_annotations_path_following_mode__struct.h"
// Member 'area_callbacks'
#include "bosdyn_msgs/msg/detail/key_string_value_bosdyn_msgs_area_callback_region__struct.h"
// Member 'ground_clutter_mode'
#include "bosdyn_msgs/msg/detail/edge_annotations_ground_clutter_avoidance_mode__struct.h"

/// Struct defined in msg/EdgeAnnotations in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__EdgeAnnotations
{
  /// Velocity limits to use while traversing the edge.
  /// These are maxima and minima, NOT target speeds.
  /// DEPRECATED as of 2.4 and will be removed in 4.0. Please use mobility_params.vel_limit.
  /// Defines any parameters of the stairs
  /// Stairs information/parameters specific to the edge.
  bosdyn_msgs__msg__EdgeAnnotationsStairData stairs;
  bool stairs_is_set;
  /// Direction constraints for how the robot must move and the directions it can face
  /// when traversing the edge.
  bosdyn_msgs__msg__EdgeAnnotationsDirectionConstraint direction_constraint;
  /// If true, the robot must be aligned with the edge in yaw before traversing it.
  bool require_alignment;
  bool require_alignment_is_set;
  /// If true, the edge crosses flat ground and the robot shouldn't try to climb over
  /// obstacles.
  /// DEPRECATED as of 3.3.  Replaced by ground_clutter_mode.
  /// Terrain coefficient of friction user hint. This value must be postive and will clamped if
  /// necessary on the robot side. Best suggested values lie in the range between 0.4 and 0.8
  /// (which is the robot's default.)
  /// DEPRECATED as of 2.1 and will be removed in 4.0. Use mobility_params instead, which
  /// includes ground_mu_hint as part of the terrain_params.
  /// If true, the edge crosses over grated metal. This changes some parameters of the robot's
  /// perception system to allow it to see grated floors bettter.
  /// DEPRECATED as of 2.1 and will be removed in 4.0. Use mobility_params instead, which
  /// includes grated_floor as part of the terrain_params.
  /// Overrides the following fields of the mobility parameters to whatever is
  /// stored in the map. For example, if this FieldMask contains "stairs_mode" and
  /// "terrain_params.enable_grated_floor", then the map will be
  /// annotated with "stairs_mode" and "enable_grated_floor" settings. An empty FieldMask means
  /// all fields are active annotations. Note that the more conservative of the velocity limit
  /// stored in the mobility parameters and the TravelParams of the entire route will be used
  /// for this edge (regardless of what override_mobility_params says).
  ///         google.protobuf.FieldMask override_mobility_params = 9;
  /// Contains terrain parameters, swing height, obstacle avoidance parameters, etc.
  /// When the robot crosses this edge, it will use the mobility parameters here.
  bosdyn_msgs__msg__MobilityParams mobility_params;
  bool mobility_params_is_set;
  /// Assign edges a cost; used when finding the "shortest" (lowest cost) path.
  double cost;
  bool cost_is_set;
  /// How this edge was made.
  bosdyn_msgs__msg__EdgeEdgeSource edge_source;
  /// If true, disables alternate-route-finding for this edge.
  bool disable_alternate_route_finding;
  /// Path following mode
  /// Path following mode for this edge.
  bosdyn_msgs__msg__EdgeAnnotationsPathFollowingMode path_following_mode;
  /// Disable directed exploration for this edge.
  bool disable_directed_exploration;
  /// Reference to area callback regions needed to cross this edge.
  /// The string is a unique id for this region, which may be shared
  /// across multiple edges.
  bosdyn_msgs__msg__KeyStringValueBosdynMsgsAreaCallbackRegion__Sequence area_callbacks;
  /// Ground clutter avoidance mode.
  /// This enables detection and avoidance of low obstacles.
  bosdyn_msgs__msg__EdgeAnnotationsGroundClutterAvoidanceMode ground_clutter_mode;
} bosdyn_msgs__msg__EdgeAnnotations;

// Struct for a sequence of bosdyn_msgs__msg__EdgeAnnotations.
typedef struct bosdyn_msgs__msg__EdgeAnnotations__Sequence
{
  bosdyn_msgs__msg__EdgeAnnotations * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__EdgeAnnotations__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__EDGE_ANNOTATIONS__STRUCT_H_
