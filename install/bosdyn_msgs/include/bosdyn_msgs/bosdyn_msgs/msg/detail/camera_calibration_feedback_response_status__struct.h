// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/CameraCalibrationFeedbackResponseStatus.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__CAMERA_CALIBRATION_FEEDBACK_RESPONSE_STATUS__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__CAMERA_CALIBRATION_FEEDBACK_RESPONSE_STATUS__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

/// Constant 'STATUS_UNKNOWN'.
/**
  * Unused enum.
 */
enum
{
  bosdyn_msgs__msg__CameraCalibrationFeedbackResponseStatus__STATUS_UNKNOWN = 0
};

/// Constant 'STATUS_PROCESSING'.
/**
  * The robot is actively running calibration routine.
 */
enum
{
  bosdyn_msgs__msg__CameraCalibrationFeedbackResponseStatus__STATUS_PROCESSING = 1
};

/// Constant 'STATUS_SUCCESS'.
/**
  * The robot successfully ran calibration routine and
  * is ready to use again.
 */
enum
{
  bosdyn_msgs__msg__CameraCalibrationFeedbackResponseStatus__STATUS_SUCCESS = 2
};

/// Constant 'STATUS_USER_CANCELED'.
/**
  * API client canceled calibration.
 */
enum
{
  bosdyn_msgs__msg__CameraCalibrationFeedbackResponseStatus__STATUS_USER_CANCELED = 3
};

/// Constant 'STATUS_POWER_ERROR'.
/**
  * The robot is not powered on.
 */
enum
{
  bosdyn_msgs__msg__CameraCalibrationFeedbackResponseStatus__STATUS_POWER_ERROR = 4
};

/// Constant 'STATUS_LEASE_ERROR'.
/**
  * Ownership error during calibration.
 */
enum
{
  bosdyn_msgs__msg__CameraCalibrationFeedbackResponseStatus__STATUS_LEASE_ERROR = 5
};

/// Constant 'STATUS_ROBOT_COMMAND_ERROR'.
/**
  * Robot encountered an error while trying to move
  * around the calibration target. Robot possibly
  * encountered a fault. Check robot state for more
  * details
 */
enum
{
  bosdyn_msgs__msg__CameraCalibrationFeedbackResponseStatus__STATUS_ROBOT_COMMAND_ERROR = 6
};

/// Constant 'STATUS_CALIBRATION_ERROR'.
/**
  * Calibration procedure produced an invalid result.
  * This may occur in poor lighting conditions or if
  * calibration target moved during calibration
  * procedure.
 */
enum
{
  bosdyn_msgs__msg__CameraCalibrationFeedbackResponseStatus__STATUS_CALIBRATION_ERROR = 7
};

/// Constant 'STATUS_INTERNAL_ERROR'.
/**
  * Something extraordinary happened. Try power cycling robot or contact BD.
 */
enum
{
  bosdyn_msgs__msg__CameraCalibrationFeedbackResponseStatus__STATUS_INTERNAL_ERROR = 8
};

/// Constant 'STATUS_CAMERA_FOCUS_ERROR'.
/**
  * Camera focus issue detected. This is a hardware issue.
 */
enum
{
  bosdyn_msgs__msg__CameraCalibrationFeedbackResponseStatus__STATUS_CAMERA_FOCUS_ERROR = 9
};

/// Constant 'STATUS_TARGET_NOT_CENTERED'.
/**
  * Target partially, but not fully, in view when starting calibration.
 */
enum
{
  bosdyn_msgs__msg__CameraCalibrationFeedbackResponseStatus__STATUS_TARGET_NOT_CENTERED = 10
};

/// Constant 'STATUS_TARGET_NOT_IN_VIEW'.
/**
  * Target not visible when starting calibration.
 */
enum
{
  bosdyn_msgs__msg__CameraCalibrationFeedbackResponseStatus__STATUS_TARGET_NOT_IN_VIEW = 11
};

/// Constant 'STATUS_TARGET_NOT_GRAVITY_ALIGNED'.
/**
  * Target not aligned with gravity when starting calibration.
 */
enum
{
  bosdyn_msgs__msg__CameraCalibrationFeedbackResponseStatus__STATUS_TARGET_NOT_GRAVITY_ALIGNED = 12
};

/// Constant 'STATUS_TARGET_UPSIDE_DOWN'.
/**
  * Target upside down when starting calibration.
 */
enum
{
  bosdyn_msgs__msg__CameraCalibrationFeedbackResponseStatus__STATUS_TARGET_UPSIDE_DOWN = 13
};

/// Constant 'STATUS_NEVER_RUN'.
/**
  * Calibration routine has never been run. No feedback to give.
 */
enum
{
  bosdyn_msgs__msg__CameraCalibrationFeedbackResponseStatus__STATUS_NEVER_RUN = 14
};

/// Constant 'STATUS_CAMERA_NOT_DETECTED'.
/**
  * One of the cameras is not detected on the USB bus.
 */
enum
{
  bosdyn_msgs__msg__CameraCalibrationFeedbackResponseStatus__STATUS_CAMERA_NOT_DETECTED = 15
};

/// Constant 'STATUS_INTRINSIC_WRITE_FAILED'.
/**
  * Failed to write intrinsic calibration.
 */
enum
{
  bosdyn_msgs__msg__CameraCalibrationFeedbackResponseStatus__STATUS_INTRINSIC_WRITE_FAILED = 16
};

/// Constant 'STATUS_EXTRINSIC_WRITE_FAILED'.
/**
  * Failed to write extrinsic calibration.
 */
enum
{
  bosdyn_msgs__msg__CameraCalibrationFeedbackResponseStatus__STATUS_EXTRINSIC_WRITE_FAILED = 17
};

/// Constant 'STATUS_CALIBRATION_VERIFICATION_FAILED'.
/**
  * Spotcheck failed after the camera calibration.
 */
enum
{
  bosdyn_msgs__msg__CameraCalibrationFeedbackResponseStatus__STATUS_CALIBRATION_VERIFICATION_FAILED = 18
};

/// Struct defined in msg/CameraCalibrationFeedbackResponseStatus in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__CameraCalibrationFeedbackResponseStatus
{
  int8_t value;
} bosdyn_msgs__msg__CameraCalibrationFeedbackResponseStatus;

// Struct for a sequence of bosdyn_msgs__msg__CameraCalibrationFeedbackResponseStatus.
typedef struct bosdyn_msgs__msg__CameraCalibrationFeedbackResponseStatus__Sequence
{
  bosdyn_msgs__msg__CameraCalibrationFeedbackResponseStatus * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__CameraCalibrationFeedbackResponseStatus__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__CAMERA_CALIBRATION_FEEDBACK_RESPONSE_STATUS__STRUCT_H_
