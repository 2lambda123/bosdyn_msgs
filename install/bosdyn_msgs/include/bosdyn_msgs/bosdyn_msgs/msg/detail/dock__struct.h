// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/Dock.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__DOCK__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__DOCK__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'docked_waypoint_id'
#include "rosidl_runtime_c/string.h"
// Member 'target_prep_pose'
#include "bosdyn_msgs/msg/detail/target__struct.h"
// Member 'prompt_duration'
#include "builtin_interfaces/msg/detail/duration__struct.h"

/// Struct defined in msg/Dock in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__Dock
{
  /// The dock itself and the target associated with it
  /// The docking station ID of the dock corresponds to the number printed on the
  /// fiducial, below the part of the fiducial that looks like a QR code.
  /// Only fiducial IDs greater than or equal to 500 should be
  /// used here because they are reserved for docks.
  uint32_t dock_id;
  /// To maximize reliability, at record time, the client should dock the robot
  /// while graph_nav is still recording.  When the robot is finished docking,
  /// the client should create a waypoint on top of the dock, while the robot is
  /// docked, and then stop recording. The waypoint created while the
  /// robot is sitting on the dock should be specified here.
  rosidl_runtime_c__String docked_waypoint_id;
  /// When it is time for the robot to dock, it will approach this target
  /// before issuing docking commands. If the user is using graph_nav, the
  /// final waypoint in the NavigateRoute OR the waypoint ID in the
  /// NavigateTo MUST be at the docking prep pose. To do this, send a docking
  /// command to move the robot to the docking prep pose. Then, create a
  /// waypoint at the docking prep pose location. Graph_nav is responsible for
  /// navigating the robot to the docking prep pose. Once the robot is in the
  /// docking prep pose, the docking service does the rest.
  bosdyn_msgs__msg__Target target_prep_pose;
  bool target_prep_pose_is_set;
  /// At mission playback, if the robot is unable to reach the dock OR successfully
  /// dock, the mission will let the operator know with a user question.  If the operator
  /// does not answer, the robot will safely power off.  This parameter controls
  /// how long the operator has to answer.
  /// This parameter also controls how long robot will wait to retry to undock on
  /// a failed undock.
  builtin_interfaces__msg__Duration prompt_duration;
  bool prompt_duration_is_set;
} bosdyn_msgs__msg__Dock;

// Struct for a sequence of bosdyn_msgs__msg__Dock.
typedef struct bosdyn_msgs__msg__Dock__Sequence
{
  bosdyn_msgs__msg__Dock * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__Dock__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__DOCK__STRUCT_H_
