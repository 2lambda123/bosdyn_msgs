// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/RobotState.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__ROBOT_STATE__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__ROBOT_STATE__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'power_state'
#include "bosdyn_msgs/msg/detail/power_state__struct.h"
// Member 'battery_states'
#include "bosdyn_msgs/msg/detail/battery_state__struct.h"
// Member 'comms_states'
#include "bosdyn_msgs/msg/detail/comms_state__struct.h"
// Member 'system_fault_state'
#include "bosdyn_msgs/msg/detail/system_fault_state__struct.h"
// Member 'estop_states'
#include "bosdyn_msgs/msg/detail/e_stop_state__struct.h"
// Member 'kinematic_state'
#include "bosdyn_msgs/msg/detail/kinematic_state__struct.h"
// Member 'behavior_fault_state'
#include "bosdyn_msgs/msg/detail/behavior_fault_state__struct.h"
// Member 'foot_state'
#include "bosdyn_msgs/msg/detail/foot_state__struct.h"
// Member 'manipulator_state'
#include "bosdyn_msgs/msg/detail/manipulator_state__struct.h"
// Member 'service_fault_state'
#include "bosdyn_msgs/msg/detail/service_fault_state__struct.h"
// Member 'terrain_state'
#include "bosdyn_msgs/msg/detail/terrain_state__struct.h"

/// Struct defined in msg/RobotState in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__RobotState
{
  /// The current state of the robot.
  /// Power state (e.g. motor power).
  bosdyn_msgs__msg__PowerState power_state;
  bool power_state_is_set;
  /// Battery state (e.g. charge, temperature, current).
  bosdyn_msgs__msg__BatteryState__Sequence battery_states;
  /// Communication state (e.g. type of comms network).
  bosdyn_msgs__msg__CommsState__Sequence comms_states;
  /// Different system faults for the robot.
  bosdyn_msgs__msg__SystemFaultState system_fault_state;
  bool system_fault_state_is_set;
  /// Because there may be multiple E-Stops, and because E-Stops may be supplied with payloads,
  /// this is a repeated field instead of a hardcoded list.
  bosdyn_msgs__msg__EStopState__Sequence estop_states;
  /// Kinematic state of the robot (e.g. positions, velocities, other frame information).
  bosdyn_msgs__msg__KinematicState kinematic_state;
  bool kinematic_state_is_set;
  /// Robot behavior fault state.
  bosdyn_msgs__msg__BehaviorFaultState behavior_fault_state;
  bool behavior_fault_state_is_set;
  /// The foot states (and contact information).
  bosdyn_msgs__msg__FootState__Sequence foot_state;
  /// / State of the manipulator, only populated if an arm is attached to the robot.
  bosdyn_msgs__msg__ManipulatorState manipulator_state;
  bool manipulator_state_is_set;
  /// Service faults for services registered with the robot.
  bosdyn_msgs__msg__ServiceFaultState service_fault_state;
  bool service_fault_state_is_set;
  /// Relevant terrain data beneath and around the robot
  bosdyn_msgs__msg__TerrainState terrain_state;
  bool terrain_state_is_set;
} bosdyn_msgs__msg__RobotState;

// Struct for a sequence of bosdyn_msgs__msg__RobotState.
typedef struct bosdyn_msgs__msg__RobotState__Sequence
{
  bosdyn_msgs__msg__RobotState * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__RobotState__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__ROBOT_STATE__STRUCT_H_
