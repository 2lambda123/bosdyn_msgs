// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/ArmDragCommandFeedbackStatus.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__ARM_DRAG_COMMAND_FEEDBACK_STATUS__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__ARM_DRAG_COMMAND_FEEDBACK_STATUS__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

/// Constant 'STATUS_UNKNOWN'.
/**
  * STATUS_UNKNOWN should never be used. If used, an internal error has happened.
 */
enum
{
  bosdyn_msgs__msg__ArmDragCommandFeedbackStatus__STATUS_UNKNOWN = 0
};

/// Constant 'STATUS_DRAGGING'.
/**
  * Robot is dragging.
 */
enum
{
  bosdyn_msgs__msg__ArmDragCommandFeedbackStatus__STATUS_DRAGGING = 1
};

/// Constant 'STATUS_GRASP_FAILED'.
/**
  * Robot is not dragging because grasp failed.
  * This could be due to a lost grasp during a drag, or because the gripper isn't in a
  * good position at the time of request. You'll have to reposition or regrasp and then
  * send a new drag request to overcome this type of error. Note: When requesting drag,
  * make sure the gripper is positioned in front of the robot (not to the side of or
  * above the robot body).
 */
enum
{
  bosdyn_msgs__msg__ArmDragCommandFeedbackStatus__STATUS_GRASP_FAILED = 2
};

/// Constant 'STATUS_OTHER_FAILURE'.
/**
  * Robot is not dragging for another reason.
  * This might be because the gripper isn't holding an item.
  * You can continue dragging once you resolve this type of error (i.e. by sending an
  * ApiGraspOverride request). Note: When requesting drag, be sure to that the robot
  * knows it's holding something (or use APIGraspOverride to OVERRIDE_HOLDING).
 */
enum
{
  bosdyn_msgs__msg__ArmDragCommandFeedbackStatus__STATUS_OTHER_FAILURE = 3
};

/// Struct defined in msg/ArmDragCommandFeedbackStatus in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__ArmDragCommandFeedbackStatus
{
  int8_t value;
} bosdyn_msgs__msg__ArmDragCommandFeedbackStatus;

// Struct for a sequence of bosdyn_msgs__msg__ArmDragCommandFeedbackStatus.
typedef struct bosdyn_msgs__msg__ArmDragCommandFeedbackStatus__Sequence
{
  bosdyn_msgs__msg__ArmDragCommandFeedbackStatus * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__ArmDragCommandFeedbackStatus__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__ARM_DRAG_COMMAND_FEEDBACK_STATUS__STRUCT_H_
