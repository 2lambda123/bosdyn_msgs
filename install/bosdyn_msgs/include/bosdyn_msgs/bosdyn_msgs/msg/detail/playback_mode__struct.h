// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/PlaybackMode.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__PLAYBACK_MODE__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__PLAYBACK_MODE__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'mode'
#include "bosdyn_msgs/msg/detail/playback_mode_one_of_mode__struct.h"

/// Struct defined in msg/PlaybackMode in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__PlaybackMode
{
  /// The playback mode governs how many times the mission is played back (once or
  /// more), at what interval the playbacks should occur (e.g., every 2 hours),
  /// and if docking is involved, the battery level thresholds at which the robot
  /// should either (1) stop and charge or (2) start the playback process again.
  /// The mission should be played back once.
  /// The mission should be played back periodically.
  /// The mission should be played continuously only stopping if a battery
  /// monitor stop threshold is crossed.
  bosdyn_msgs__msg__PlaybackModeOneOfMode mode;
} bosdyn_msgs__msg__PlaybackMode;

// Struct for a sequence of bosdyn_msgs__msg__PlaybackMode.
typedef struct bosdyn_msgs__msg__PlaybackMode__Sequence
{
  bosdyn_msgs__msg__PlaybackMode * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__PlaybackMode__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__PLAYBACK_MODE__STRUCT_H_
