// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/DockingCommandFeedbackResponseStatus.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__DOCKING_COMMAND_FEEDBACK_RESPONSE_STATUS__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__DOCKING_COMMAND_FEEDBACK_RESPONSE_STATUS__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

/// Constant 'STATUS_UNKNOWN'.
/**
  * Status is not specified.
 */
enum
{
  bosdyn_msgs__msg__DockingCommandFeedbackResponseStatus__STATUS_UNKNOWN = 0
};

/// Constant 'STATUS_IN_PROGRESS'.
/**
  * Docking command is executing.
 */
enum
{
  bosdyn_msgs__msg__DockingCommandFeedbackResponseStatus__STATUS_IN_PROGRESS = 1
};

/// Constant 'STATUS_DOCKED'.
/**
  * Docking command succeeded, the robot is docked.
 */
enum
{
  bosdyn_msgs__msg__DockingCommandFeedbackResponseStatus__STATUS_DOCKED = 2
};

/// Constant 'STATUS_AT_PREP_POSE'.
/**
  * Final success state for `PREP_POSE_ONLY_POSE` or `PREP_POSE_UNDOCK`.
 */
enum
{
  bosdyn_msgs__msg__DockingCommandFeedbackResponseStatus__STATUS_AT_PREP_POSE = 3
};

/// Constant 'STATUS_MISALIGNED'.
/**
  * Misaligned was detected between the robot and the dock.
  * The docking command was aborted to save an ending up in an unrecoverable state, please try again.
 */
enum
{
  bosdyn_msgs__msg__DockingCommandFeedbackResponseStatus__STATUS_MISALIGNED = 4
};

/// Constant 'STATUS_OLD_DOCKING_COMMAND'.
/**
  * This DockingCommand overridden by new docking command.
 */
enum
{
  bosdyn_msgs__msg__DockingCommandFeedbackResponseStatus__STATUS_OLD_DOCKING_COMMAND = 5
};

/// Constant 'STATUS_ERROR_DOCK_LOST'.
/**
  * ERROR: The sensed dock has been lost and is no longer found.
 */
enum
{
  bosdyn_msgs__msg__DockingCommandFeedbackResponseStatus__STATUS_ERROR_DOCK_LOST = 6
};

/// Constant 'STATUS_ERROR_LEASE'.
/**
  * ERROR: Lease rejected.
 */
enum
{
  bosdyn_msgs__msg__DockingCommandFeedbackResponseStatus__STATUS_ERROR_LEASE = 7
};

/// Constant 'STATUS_ERROR_COMMAND_TIMED_OUT'.
/**
  * ERROR: End time has been reached.
 */
enum
{
  bosdyn_msgs__msg__DockingCommandFeedbackResponseStatus__STATUS_ERROR_COMMAND_TIMED_OUT = 8
};

/// Constant 'STATUS_ERROR_NO_TIMESYNC'.
/**
  * ERROR: No Timesync with system.
 */
enum
{
  bosdyn_msgs__msg__DockingCommandFeedbackResponseStatus__STATUS_ERROR_NO_TIMESYNC = 9
};

/// Constant 'STATUS_ERROR_TOO_DISTANT'.
/**
  * ERROR: Provided end time too far in the future.
 */
enum
{
  bosdyn_msgs__msg__DockingCommandFeedbackResponseStatus__STATUS_ERROR_TOO_DISTANT = 10
};

/// Constant 'STATUS_ERROR_NOT_AVAILABLE'.
/**
  * ERROR: The dock is not available for docking.
 */
enum
{
  bosdyn_msgs__msg__DockingCommandFeedbackResponseStatus__STATUS_ERROR_NOT_AVAILABLE = 11
};

/// Constant 'STATUS_ERROR_UNREFINED_PRIOR'.
/**
  * ERROR: The prior could not be confirmed as a real dock
 */
enum
{
  bosdyn_msgs__msg__DockingCommandFeedbackResponseStatus__STATUS_ERROR_UNREFINED_PRIOR = 12
};

/// Constant 'STATUS_ERROR_STUCK'.
/**
  * ERROR: The robot could not make progress towards docking.
  * For example, there may be an obstacle in the way.
 */
enum
{
  bosdyn_msgs__msg__DockingCommandFeedbackResponseStatus__STATUS_ERROR_STUCK = 13
};

/// Constant 'STATUS_ERROR_SYSTEM'.
/**
  * ERROR: Internal system error during execution
  * This error cannot be resolved by issuing a new DockingCommand
  * Check the returned message for details
 */
enum
{
  bosdyn_msgs__msg__DockingCommandFeedbackResponseStatus__STATUS_ERROR_SYSTEM = 14
};

/// Struct defined in msg/DockingCommandFeedbackResponseStatus in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__DockingCommandFeedbackResponseStatus
{
  int8_t value;
} bosdyn_msgs__msg__DockingCommandFeedbackResponseStatus;

// Struct for a sequence of bosdyn_msgs__msg__DockingCommandFeedbackResponseStatus.
typedef struct bosdyn_msgs__msg__DockingCommandFeedbackResponseStatus__Sequence
{
  bosdyn_msgs__msg__DockingCommandFeedbackResponseStatus * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__DockingCommandFeedbackResponseStatus__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__DOCKING_COMMAND_FEEDBACK_RESPONSE_STATUS__STRUCT_H_
