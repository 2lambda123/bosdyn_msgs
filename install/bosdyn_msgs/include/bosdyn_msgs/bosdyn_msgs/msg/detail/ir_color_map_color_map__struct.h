// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/IrColorMapColorMap.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__IR_COLOR_MAP_COLOR_MAP__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__IR_COLOR_MAP_COLOR_MAP__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

/// Constant 'COLORMAP_UNKNOWN'.
enum
{
  bosdyn_msgs__msg__IrColorMapColorMap__COLORMAP_UNKNOWN = 0
};

/// Constant 'COLORMAP_GREYSCALE'.
/**
  * the greyscale colormap maps the minimum value (defined below) to black and the maximum
  * value (defined below) to white
 */
enum
{
  bosdyn_msgs__msg__IrColorMapColorMap__COLORMAP_GREYSCALE = 1
};

/// Constant 'COLORMAP_JET'.
/**
  * the jet colormap uses blues for values closer to the minimum, and red values for values
  * closer to the maximum.
 */
enum
{
  bosdyn_msgs__msg__IrColorMapColorMap__COLORMAP_JET = 2
};

/// Constant 'COLORMAP_INFERNO'.
/**
  * the inferno colormap maps the minimum value to black and the maximum value to light
  * yellow RGB(252, 252, 164). It is also easier to view by those with color blindness
 */
enum
{
  bosdyn_msgs__msg__IrColorMapColorMap__COLORMAP_INFERNO = 3
};

/// Constant 'COLORMAP_TURBO'.
/**
  * the turbo colormap uses blues for values closer to the minumum, red values for values
  * closer to the maximum, and addresses some short comings of the jet color map such as
  * false detail, banding and color blindness
 */
enum
{
  bosdyn_msgs__msg__IrColorMapColorMap__COLORMAP_TURBO = 4
};

/// Struct defined in msg/IrColorMapColorMap in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__IrColorMapColorMap
{
  int8_t value;
} bosdyn_msgs__msg__IrColorMapColorMap;

// Struct for a sequence of bosdyn_msgs__msg__IrColorMapColorMap.
typedef struct bosdyn_msgs__msg__IrColorMapColorMap__Sequence
{
  bosdyn_msgs__msg__IrColorMapColorMap * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__IrColorMapColorMap__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__IR_COLOR_MAP_COLOR_MAP__STRUCT_H_
