// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/DockingCommandRequest.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__DOCKING_COMMAND_REQUEST__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__DOCKING_COMMAND_REQUEST__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'header'
#include "bosdyn_msgs/msg/detail/request_header__struct.h"
// Member 'lease'
#include "bosdyn_msgs/msg/detail/lease__struct.h"
// Member 'clock_identifier'
#include "rosidl_runtime_c/string.h"
// Member 'end_time'
#include "builtin_interfaces/msg/detail/time__struct.h"
// Member 'prep_pose_behavior'
#include "bosdyn_msgs/msg/detail/prep_pose_behavior__struct.h"

/// Struct defined in msg/DockingCommandRequest in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__DockingCommandRequest
{
  /// Message to command the robot to dock.
  /// Note: If the robot is docked, you can undock the robot by issuing a command with
  /// `prep_pose_behavior=PREP_POSE_UNDOCK`. If undocking, `docking_station_id` is not required.
  /// Common request header.
  bosdyn_msgs__msg__RequestHeader header;
  bool header_is_set;
  /// The Lease to show ownership of the robot.
  bosdyn_msgs__msg__Lease lease;
  bool lease_is_set;
  /// ID of docking station to dock at.
  /// This is ignored if undocking the robot, the current dock is used.
  uint32_t docking_station_id;
  /// Identifier provided by the time sync service to verify time sync between robot and client.
  rosidl_runtime_c__String clock_identifier;
  /// The timestamp (in robot time) at which a command will stop executing.
  /// This can be updated by other RPCs
  /// This is a required field and used to prevent runaway commands.
  builtin_interfaces__msg__Time end_time;
  bool end_time_is_set;
  /// Specify the prep pose behavior
  bosdyn_msgs__msg__PrepPoseBehavior prep_pose_behavior;
  /// Require the detection of the dock's fiducial
  bool require_fiducial;
} bosdyn_msgs__msg__DockingCommandRequest;

// Struct for a sequence of bosdyn_msgs__msg__DockingCommandRequest.
typedef struct bosdyn_msgs__msg__DockingCommandRequest__Sequence
{
  bosdyn_msgs__msg__DockingCommandRequest * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__DockingCommandRequest__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__DOCKING_COMMAND_REQUEST__STRUCT_H_
