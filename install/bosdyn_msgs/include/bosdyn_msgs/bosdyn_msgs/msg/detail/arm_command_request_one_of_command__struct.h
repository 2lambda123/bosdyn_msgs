// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/ArmCommandRequestOneOfCommand.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__ARM_COMMAND_REQUEST_ONE_OF_COMMAND__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__ARM_COMMAND_REQUEST_ONE_OF_COMMAND__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

/// Constant 'COMMAND_NOT_SET'.
enum
{
  bosdyn_msgs__msg__ArmCommandRequestOneOfCommand__COMMAND_NOT_SET = 0
};

/// Constant 'COMMAND_ARM_CARTESIAN_COMMAND_SET'.
enum
{
  bosdyn_msgs__msg__ArmCommandRequestOneOfCommand__COMMAND_ARM_CARTESIAN_COMMAND_SET = 1
};

/// Constant 'COMMAND_ARM_JOINT_MOVE_COMMAND_SET'.
enum
{
  bosdyn_msgs__msg__ArmCommandRequestOneOfCommand__COMMAND_ARM_JOINT_MOVE_COMMAND_SET = 2
};

/// Constant 'COMMAND_NAMED_ARM_POSITION_COMMAND_SET'.
enum
{
  bosdyn_msgs__msg__ArmCommandRequestOneOfCommand__COMMAND_NAMED_ARM_POSITION_COMMAND_SET = 3
};

/// Constant 'COMMAND_ARM_VELOCITY_COMMAND_SET'.
enum
{
  bosdyn_msgs__msg__ArmCommandRequestOneOfCommand__COMMAND_ARM_VELOCITY_COMMAND_SET = 4
};

/// Constant 'COMMAND_ARM_GAZE_COMMAND_SET'.
enum
{
  bosdyn_msgs__msg__ArmCommandRequestOneOfCommand__COMMAND_ARM_GAZE_COMMAND_SET = 5
};

/// Constant 'COMMAND_ARM_STOP_COMMAND_SET'.
enum
{
  bosdyn_msgs__msg__ArmCommandRequestOneOfCommand__COMMAND_ARM_STOP_COMMAND_SET = 6
};

/// Constant 'COMMAND_ARM_DRAG_COMMAND_SET'.
enum
{
  bosdyn_msgs__msg__ArmCommandRequestOneOfCommand__COMMAND_ARM_DRAG_COMMAND_SET = 7
};

/// Constant 'COMMAND_ARM_IMPEDANCE_COMMAND_SET'.
enum
{
  bosdyn_msgs__msg__ArmCommandRequestOneOfCommand__COMMAND_ARM_IMPEDANCE_COMMAND_SET = 8
};

// Include directives for member types
// Member 'arm_cartesian_command'
#include "bosdyn_msgs/msg/detail/arm_cartesian_command_request__struct.h"
// Member 'arm_joint_move_command'
#include "bosdyn_msgs/msg/detail/arm_joint_move_command_request__struct.h"
// Member 'named_arm_position_command'
#include "bosdyn_msgs/msg/detail/named_arm_positions_command_request__struct.h"
// Member 'arm_velocity_command'
#include "bosdyn_msgs/msg/detail/arm_velocity_command_request__struct.h"
// Member 'arm_gaze_command'
#include "bosdyn_msgs/msg/detail/gaze_command_request__struct.h"
// Member 'arm_stop_command'
#include "bosdyn_msgs/msg/detail/arm_stop_command_request__struct.h"
// Member 'arm_drag_command'
#include "bosdyn_msgs/msg/detail/arm_drag_command_request__struct.h"
// Member 'arm_impedance_command'
#include "bosdyn_msgs/msg/detail/arm_impedance_command_request__struct.h"

/// Struct defined in msg/ArmCommandRequestOneOfCommand in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__ArmCommandRequestOneOfCommand
{
  /// ONEOF MESSAGE  Only one of the following can be set
  /// Control the end-effector in Cartesian space.
  bosdyn_msgs__msg__ArmCartesianCommandRequest arm_cartesian_command;
  /// Control joint angles of the arm.
  bosdyn_msgs__msg__ArmJointMoveCommandRequest arm_joint_move_command;
  /// Move the arm to some predefined configurations.
  bosdyn_msgs__msg__NamedArmPositionsCommandRequest named_arm_position_command;
  /// Velocity control of the end-effector.
  bosdyn_msgs__msg__ArmVelocityCommandRequest arm_velocity_command;
  /// Point the gripper at a point in the world.
  bosdyn_msgs__msg__GazeCommandRequest arm_gaze_command;
  /// Stop the arm in place with minimal motion.
  bosdyn_msgs__msg__ArmStopCommandRequest arm_stop_command;
  /// Use the arm to drag something held in the gripper.
  bosdyn_msgs__msg__ArmDragCommandRequest arm_drag_command;
  /// Impedance control of arm (beta)
  bosdyn_msgs__msg__ArmImpedanceCommandRequest arm_impedance_command;
  /// Only one of the above can be filled in.  Use the enum to choose which.
  int8_t command_choice;
} bosdyn_msgs__msg__ArmCommandRequestOneOfCommand;

// Struct for a sequence of bosdyn_msgs__msg__ArmCommandRequestOneOfCommand.
typedef struct bosdyn_msgs__msg__ArmCommandRequestOneOfCommand__Sequence
{
  bosdyn_msgs__msg__ArmCommandRequestOneOfCommand * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__ArmCommandRequestOneOfCommand__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__ARM_COMMAND_REQUEST_ONE_OF_COMMAND__STRUCT_H_
