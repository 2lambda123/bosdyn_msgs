// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/GazeCommandRequest.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__GAZE_COMMAND_REQUEST__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__GAZE_COMMAND_REQUEST__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'target_trajectory_in_frame1'
#include "bosdyn_msgs/msg/detail/vec3_trajectory__struct.h"
// Member 'frame1_name'
// Member 'frame2_name'
#include "rosidl_runtime_c/string.h"
// Member 'tool_trajectory_in_frame2'
#include "bosdyn_msgs/msg/detail/se3_trajectory__struct.h"
// Member 'wrist_tform_tool'
#include "geometry_msgs/msg/detail/pose__struct.h"

/// Struct defined in msg/GazeCommandRequest in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__GazeCommandRequest
{
  /// Point(s) to look at expressed in frame1.
  bosdyn_msgs__msg__Vec3Trajectory target_trajectory_in_frame1;
  bool target_trajectory_in_frame1_is_set;
  rosidl_runtime_c__String frame1_name;
  /// Optional, desired pose of the tool expressed in frame2.  Will be constrained to 'look at'
  /// the target regardless of the requested orientation.
  bosdyn_msgs__msg__SE3Trajectory tool_trajectory_in_frame2;
  bool tool_trajectory_in_frame2_is_set;
  rosidl_runtime_c__String frame2_name;
  /// The transformation of the tool pose relative to the parent link (wrist).
  /// If the field is left unset, the transform will default to:
  ///      The position is wrist_tform_hand.position() [20 cm translation in wrist x].
  ///      The rotation is wrist_tform_hand_camera.rotation() [-9 degree pitch about wrist y].
  geometry_msgs__msg__Pose wrist_tform_tool;
  bool wrist_tform_tool_is_set;
  /// Optional velocity to move the target along the shortest path from the gaze's starting
  /// position to the first point in the target trajectory.
  double target_trajectory_initial_velocity;
  bool target_trajectory_initial_velocity_is_set;
  /// Optional Maximum acceleration magnitude of the end-effector.
  /// Valid ranges (0, 20]
  double maximum_acceleration;
  bool maximum_acceleration_is_set;
  /// Optional Maximum linear velocity magnitude of the end-effector. (m/s)
  double max_linear_velocity;
  bool max_linear_velocity_is_set;
  /// Optional Maximum angular velocity magnitude of the end-effector. (rad/s)
  double max_angular_velocity;
  bool max_angular_velocity_is_set;
} bosdyn_msgs__msg__GazeCommandRequest;

// Struct for a sequence of bosdyn_msgs__msg__GazeCommandRequest.
typedef struct bosdyn_msgs__msg__GazeCommandRequest__Sequence
{
  bosdyn_msgs__msg__GazeCommandRequest * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__GazeCommandRequest__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__GAZE_COMMAND_REQUEST__STRUCT_H_
