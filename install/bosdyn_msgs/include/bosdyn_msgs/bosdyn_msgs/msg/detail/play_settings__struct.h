// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/PlaySettings.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__PLAY_SETTINGS__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__PLAY_SETTINGS__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'velocity_limit'
#include "bosdyn_msgs/msg/detail/se2_velocity_limit__struct.h"
// Member 'path_following_mode'
#include "bosdyn_msgs/msg/detail/edge_annotations_path_following_mode__struct.h"
// Member 'ground_clutter_mode'
#include "bosdyn_msgs/msg/detail/edge_annotations_ground_clutter_avoidance_mode__struct.h"

/// Struct defined in msg/PlaySettings in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__PlaySettings
{
  /// "Global" settings to use while a mission is running.
  /// Some of these settings are not globally applicable. For example, the velocity_limit
  /// does not change the speed at which the robot poses the body.
  /// Velocity limits on the robot motion. Example use: limit velocity in "navigate to" nodes.
  bosdyn_msgs__msg__SE2VelocityLimit velocity_limit;
  bool velocity_limit_is_set;
  /// Disable directed exploration to bypass blocked path sections
  bool disable_directed_exploration;
  /// Disable alternate-route-finding; overrides the per-edge setting in the map.
  bool disable_alternate_route_finding;
  /// Specifies whether to use default or strict path following mode.
  bosdyn_msgs__msg__EdgeAnnotationsPathFollowingMode path_following_mode;
  /// Specify whether or not to enable ground clutter avoidance, and which type.
  bosdyn_msgs__msg__EdgeAnnotationsGroundClutterAvoidanceMode ground_clutter_mode;
} bosdyn_msgs__msg__PlaySettings;

// Struct for a sequence of bosdyn_msgs__msg__PlaySettings.
typedef struct bosdyn_msgs__msg__PlaySettings__Sequence
{
  bosdyn_msgs__msg__PlaySettings * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__PlaySettings__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__PLAY_SETTINGS__STRUCT_H_
