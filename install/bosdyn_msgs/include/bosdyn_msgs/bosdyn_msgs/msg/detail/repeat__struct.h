// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/Repeat.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__REPEAT__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__REPEAT__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'child'
#include "bosdyn_msgs/msg/detail/node__struct.h"
// Member 'start_counter_state_name'
#include "rosidl_runtime_c/string.h"

/// Struct defined in msg/Repeat in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__Repeat
{
  /// Repeat a child node.
  /// Start the child node exactly this many times.
  /// Note that a value of 1 makes the Repeat node a no-op.
  int32_t max_starts;
  /// Child to repeat max_starts times.
  bosdyn_msgs__msg__Node child;
  bool child_is_set;
  /// If set, the node will write the start index to the blackboard.
  rosidl_runtime_c__String start_counter_state_name;
  /// If set to false, this repeat node will keep running its child regardless of whether
  /// or not the child succeeds or fails.
  /// If set to true, this repeat node will only keep running its child when the child
  /// succeeds.  If the child fails, the repeat node will fail.
  bool respect_child_failure;
} bosdyn_msgs__msg__Repeat;

// Struct for a sequence of bosdyn_msgs__msg__Repeat.
typedef struct bosdyn_msgs__msg__Repeat__Sequence
{
  bosdyn_msgs__msg__Repeat * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__Repeat__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__REPEAT__STRUCT_H_
