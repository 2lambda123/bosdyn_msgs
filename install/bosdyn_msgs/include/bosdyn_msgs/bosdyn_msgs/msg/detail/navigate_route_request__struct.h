// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/NavigateRouteRequest.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__NAVIGATE_ROUTE_REQUEST__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__NAVIGATE_ROUTE_REQUEST__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'header'
#include "bosdyn_msgs/msg/detail/request_header__struct.h"
// Member 'leases'
#include "bosdyn_msgs/msg/detail/lease__struct.h"
// Member 'route'
#include "bosdyn_msgs/msg/detail/route__struct.h"
// Member 'route_follow_params'
#include "bosdyn_msgs/msg/detail/route_following_params__struct.h"
// Member 'travel_params'
#include "bosdyn_msgs/msg/detail/travel_params__struct.h"
// Member 'end_time'
#include "builtin_interfaces/msg/detail/time__struct.h"
// Member 'clock_identifier'
#include "rosidl_runtime_c/string.h"
// Member 'destination_waypoint_tform_body_goal'
#include "bosdyn_msgs/msg/detail/se2_pose__struct.h"

/// Struct defined in msg/NavigateRouteRequest in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__NavigateRouteRequest
{
  /// A NavigateRoute request message specifies a route of waypoints/edges and parameters
  /// about how to get there. Like NavigateTo, this command returns immediately upon
  /// processing and provides a command_id that the user can use along with a NavigationFeedbackRequest RPC to
  /// poll the system for feedback on this command. The RPC does not block until the route is completed.
  /// Common request header.
  bosdyn_msgs__msg__RequestHeader header;
  bool header_is_set;
  /// The Lease to show ownership of the robot.
  bosdyn_msgs__msg__Lease__Sequence leases;
  /// A route for the robot to follow.
  bosdyn_msgs__msg__Route route;
  bool route_is_set;
  /// What should the robot do if it is not at the expected point in the route, or the route is
  /// blocked.
  bosdyn_msgs__msg__RouteFollowingParams route_follow_params;
  bool route_follow_params_is_set;
  /// How to travel the route.
  bosdyn_msgs__msg__TravelParams travel_params;
  bool travel_params_is_set;
  /// The timestamp (in robot time) that the navigation command is valid until.
  builtin_interfaces__msg__Time end_time;
  bool end_time_is_set;
  /// Identifier provided by the time sync service to verify time sync between robot and client.
  rosidl_runtime_c__String clock_identifier;
  /// If provided, graph_nav will move the robot to an SE2 pose relative to the final waypoint
  /// in the route.
  /// Note that the robot will treat this as a simple goto request. It will first arrive at the
  /// destination waypoint, and then travel in a straight line from the destination waypoint to the
  /// offset goal, attempting to avoid obstacles along the way.
  bosdyn_msgs__msg__SE2Pose destination_waypoint_tform_body_goal;
  bool destination_waypoint_tform_body_goal_is_set;
  /// Unique identifier for the command. If 0, this is a new command, otherwise it is a continuation
  /// of an existing command.
  uint32_t command_id;
} bosdyn_msgs__msg__NavigateRouteRequest;

// Struct for a sequence of bosdyn_msgs__msg__NavigateRouteRequest.
typedef struct bosdyn_msgs__msg__NavigateRouteRequest__Sequence
{
  bosdyn_msgs__msg__NavigateRouteRequest * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__NavigateRouteRequest__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__NAVIGATE_ROUTE_REQUEST__STRUCT_H_
