// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/ActionWrapperArmSensorPointing.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__ACTION_WRAPPER_ARM_SENSOR_POINTING__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__ACTION_WRAPPER_ARM_SENSOR_POINTING__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'joint_trajectory'
#include "bosdyn_msgs/msg/detail/arm_joint_trajectory__struct.h"
// Member 'wrist_tform_tool'
#include "geometry_msgs/msg/detail/pose__struct.h"
// Member 'pose_trajectory_rt_target'
#include "bosdyn_msgs/msg/detail/se3_trajectory__struct.h"
// Member 'target_tform_measured_offset'
#include "bosdyn_msgs/msg/detail/se2_pose__struct.h"
// Member 'body_assist_params'
#include "bosdyn_msgs/msg/detail/body_control_params_body_assist_for_manipulation__struct.h"

/// Struct defined in msg/ActionWrapperArmSensorPointing in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__ActionWrapperArmSensorPointing
{
  /// Arm Joint Move Command
  /// The joint trajectory to execute in the initial rough pointing joint move.
  bosdyn_msgs__msg__ArmJointTrajectory joint_trajectory;
  bool joint_trajectory_is_set;
  /// Arm Cartesian Command
  /// The tool pose relative to the parent link (wrist).
  /// Defaults to a frame with it's origin slightly in front of the gripper's palm plate
  /// aligned with the wrist's orientation.
  geometry_msgs__msg__Pose wrist_tform_tool;
  bool wrist_tform_tool_is_set;
  /// A 3D pose trajectory for the tool expressed in target frame,
  bosdyn_msgs__msg__SE3Trajectory pose_trajectory_rt_target;
  bool pose_trajectory_rt_target_is_set;
  /// Robot desired stance relative to waypoint
  /// This is taken by measuring the average of the footprints
  /// in body frame at the time of waypoint creation.
  /// This is used to generate the stance command.
  /// Target == waypoint.
  /// This assumes the waypoint is gravity aligned.
  bosdyn_msgs__msg__SE2Pose target_tform_measured_offset;
  bool target_tform_measured_offset_is_set;
  /// Body mobility params during cartesian move
  bosdyn_msgs__msg__BodyControlParamsBodyAssistForManipulation body_assist_params;
  bool body_assist_params_is_set;
  bool force_stow_override;
} bosdyn_msgs__msg__ActionWrapperArmSensorPointing;

// Struct for a sequence of bosdyn_msgs__msg__ActionWrapperArmSensorPointing.
typedef struct bosdyn_msgs__msg__ActionWrapperArmSensorPointing__Sequence
{
  bosdyn_msgs__msg__ActionWrapperArmSensorPointing * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__ActionWrapperArmSensorPointing__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__ACTION_WRAPPER_ARM_SENSOR_POINTING__STRUCT_H_
