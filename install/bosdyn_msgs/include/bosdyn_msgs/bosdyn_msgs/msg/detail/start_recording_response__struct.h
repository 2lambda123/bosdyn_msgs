// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/StartRecordingResponse.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__START_RECORDING_RESPONSE__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__START_RECORDING_RESPONSE__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'header'
#include "bosdyn_msgs/msg/detail/response_header__struct.h"
// Member 'created_waypoint'
#include "bosdyn_msgs/msg/detail/waypoint__struct.h"
// Member 'lease_use_result'
#include "bosdyn_msgs/msg/detail/lease_use_result__struct.h"
// Member 'status'
#include "bosdyn_msgs/msg/detail/start_recording_response_status__struct.h"
// Member 'missing_fiducials'
// Member 'bad_pose_fiducials'
#include "rosidl_runtime_c/primitives_sequence.h"
// Member 'license_status'
#include "bosdyn_msgs/msg/detail/license_info_status__struct.h"
// Member 'impaired_state'
#include "bosdyn_msgs/msg/detail/robot_impaired_state__struct.h"
// Member 'session_start_time'
#include "builtin_interfaces/msg/detail/time__struct.h"
// Member 'map_stats'
#include "bosdyn_msgs/msg/detail/map_stats__struct.h"

/// Struct defined in msg/StartRecordingResponse in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__StartRecordingResponse
{
  /// The StartRecording response messge returns the first created waypoint, which is made at the
  /// location the robot was standing when the request was made, in addition to any status information.
  /// Common response header.
  bosdyn_msgs__msg__ResponseHeader header;
  bool header_is_set;
  /// The waypoint that was just created.
  bosdyn_msgs__msg__Waypoint created_waypoint;
  bool created_waypoint_is_set;
  /// The results/status of the lease provided.
  bosdyn_msgs__msg__LeaseUseResult lease_use_result;
  bool lease_use_result_is_set;
  /// Return status for the request.
  bosdyn_msgs__msg__StartRecordingResponseStatus status;
  /// If the status is STATUS_MISSING_FIDUCIALS, these are the fiducials that are not currently
  /// visible.
  rosidl_runtime_c__int32__Sequence missing_fiducials;
  /// If the status is STATUS_FIDUCIAL_POSE_NOT_OK, these are the fiducials that could not be
  /// localized confidently.
  rosidl_runtime_c__int32__Sequence bad_pose_fiducials;
  /// Large graphs can only be uploaded if the license permits them. Recording
  /// will stop automatically when the graph gets too large. If StartRecording
  /// is requested again after the graph gets too large, it will fail, and license
  /// status will be filled out.
  bosdyn_msgs__msg__LicenseInfoStatus license_status;
  /// If the status is ROBOT_IMPAIRED, this is why the robot is impaired.
  bosdyn_msgs__msg__RobotImpairedState impaired_state;
  bool impaired_state_is_set;
  /// This is the robot local timestamp that graph_nav began recording on. If the Start Recording
  /// Request's session start time is provided, this should be the same as the request's session
  /// start time.
  builtin_interfaces__msg__Time session_start_time;
  bool session_start_time_is_set;
  /// General statistics of the map loaded in GraphNav.
  bosdyn_msgs__msg__MapStats map_stats;
  bool map_stats_is_set;
} bosdyn_msgs__msg__StartRecordingResponse;

// Struct for a sequence of bosdyn_msgs__msg__StartRecordingResponse.
typedef struct bosdyn_msgs__msg__StartRecordingResponse__Sequence
{
  bosdyn_msgs__msg__StartRecordingResponse * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__StartRecordingResponse__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__START_RECORDING_RESPONSE__STRUCT_H_
