// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/HardwareConfiguration.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__HARDWARE_CONFIGURATION__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__HARDWARE_CONFIGURATION__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'skeleton'
#include "bosdyn_msgs/msg/detail/skeleton__struct.h"

/// Struct defined in msg/HardwareConfiguration in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__HardwareConfiguration
{
  /// Robot Hardware Configuration, described with the robot skeleton.
  /// Robot link and joint description.
  bosdyn_msgs__msg__Skeleton skeleton;
  bool skeleton_is_set;
  /// Set of power features that are compatible with the robot hardware.
  /// See power.proto for the associated requests.
  /// Turn off the robot. Same as physical switch.
  bool can_power_command_request_off_robot;
  /// Power cycle the robot. Same as physical switch.
  bool can_power_command_request_cycle_robot;
  /// Control power to the payload ports.
  bool can_power_command_request_payload_ports;
  /// Control power to the hardware Wi-Fi radio.
  bool can_power_command_request_wifi_radio;
  /// Robot has audio visual system installed.
  bool has_audio_visual_system;
} bosdyn_msgs__msg__HardwareConfiguration;

// Struct for a sequence of bosdyn_msgs__msg__HardwareConfiguration.
typedef struct bosdyn_msgs__msg__HardwareConfiguration__Sequence
{
  bosdyn_msgs__msg__HardwareConfiguration * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__HardwareConfiguration__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__HARDWARE_CONFIGURATION__STRUCT_H_
