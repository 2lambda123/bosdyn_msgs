// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/UploadGraphResponseStatus.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__UPLOAD_GRAPH_RESPONSE_STATUS__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__UPLOAD_GRAPH_RESPONSE_STATUS__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

/// Constant 'STATUS_UNKNOWN'.
enum
{
  bosdyn_msgs__msg__UploadGraphResponseStatus__STATUS_UNKNOWN = 0
};

/// Constant 'STATUS_OK'.
enum
{
  bosdyn_msgs__msg__UploadGraphResponseStatus__STATUS_OK = 1
};

/// Constant 'STATUS_MAP_TOO_LARGE_LICENSE'.
/**
  * Can't upload the graph because it was too large for the license.
 */
enum
{
  bosdyn_msgs__msg__UploadGraphResponseStatus__STATUS_MAP_TOO_LARGE_LICENSE = 2
};

/// Constant 'STATUS_INVALID_GRAPH'.
/**
  * The graph or its anchoring are invalid. See the ValidationStatus for more details.
 */
enum
{
  bosdyn_msgs__msg__UploadGraphResponseStatus__STATUS_INVALID_GRAPH = 3
};

/// Constant 'STATUS_INCOMPATIBLE_SENSORS'.
/**
  * The sensor data associated with this graph is incompatible with the current robot. A common example
  * would be trying to upload a map recorded on a robot that had LIDAR to a robot that did not, or vice
  * versa.
 */
enum
{
  bosdyn_msgs__msg__UploadGraphResponseStatus__STATUS_INCOMPATIBLE_SENSORS = 4
};

/// Constant 'STATUS_AREA_CALLBACK_ERROR'.
/**
  * There is an error associated with one of the area callbacks in this graph.
 */
enum
{
  bosdyn_msgs__msg__UploadGraphResponseStatus__STATUS_AREA_CALLBACK_ERROR = 5
};

/// Struct defined in msg/UploadGraphResponseStatus in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__UploadGraphResponseStatus
{
  int8_t value;
} bosdyn_msgs__msg__UploadGraphResponseStatus;

// Struct for a sequence of bosdyn_msgs__msg__UploadGraphResponseStatus.
typedef struct bosdyn_msgs__msg__UploadGraphResponseStatus__Sequence
{
  bosdyn_msgs__msg__UploadGraphResponseStatus * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__UploadGraphResponseStatus__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__UPLOAD_GRAPH_RESPONSE_STATUS__STRUCT_H_
