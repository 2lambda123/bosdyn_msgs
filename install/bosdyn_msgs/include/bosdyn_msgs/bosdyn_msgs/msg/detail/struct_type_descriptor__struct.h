// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/StructTypeDescriptor.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__STRUCT_TYPE_DESCRIPTOR__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__STRUCT_TYPE_DESCRIPTOR__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'key_to_series_identifier_hash'
#include "bosdyn_msgs/msg/detail/key_string_value_uint64__struct.h"

/// Struct defined in msg/StructTypeDescriptor in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__StructTypeDescriptor
{
  /// A struct series is a composite formed by a set of other series whose messages or signals-ticks
  ///  are sampled at the same time.
  /// For example, all there may be a struct series for a set of signals variables, all from a
  ///  process with an 'update()' function within which all all variables are sampled with the
  ///  same timestamp.
  /// DataBlocks will not directly reference this series, but only child series of this series.
  /// Struct series may reference other struct series, but the series structure must be a directed
  ///  acyclic graph (DAG): no circular reference structures.
  /// A map of a name-reference to a series, identified by its series_identifer_hash.
  bosdyn_msgs__msg__KeyStringValueUint64__Sequence key_to_series_identifier_hash;
} bosdyn_msgs__msg__StructTypeDescriptor;

// Struct for a sequence of bosdyn_msgs__msg__StructTypeDescriptor.
typedef struct bosdyn_msgs__msg__StructTypeDescriptor__Sequence
{
  bosdyn_msgs__msg__StructTypeDescriptor * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__StructTypeDescriptor__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__STRUCT_TYPE_DESCRIPTOR__STRUCT_H_
