// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/PowerState.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__POWER_STATE__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__POWER_STATE__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'timestamp'
#include "builtin_interfaces/msg/detail/time__struct.h"
// Member 'motor_power_state'
#include "bosdyn_msgs/msg/detail/power_state_motor_power_state__struct.h"
// Member 'shore_power_state'
#include "bosdyn_msgs/msg/detail/power_state_shore_power_state__struct.h"
// Member 'robot_power_state'
#include "bosdyn_msgs/msg/detail/power_state_robot_power_state__struct.h"
// Member 'payload_ports_power_state'
#include "bosdyn_msgs/msg/detail/power_state_payload_ports_power_state__struct.h"
// Member 'wifi_radio_power_state'
#include "bosdyn_msgs/msg/detail/power_state_wifi_radio_power_state__struct.h"
// Member 'locomotion_estimated_runtime'
#include "builtin_interfaces/msg/detail/duration__struct.h"

/// Struct defined in msg/PowerState in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__PowerState
{
  /// The power state for the robot.
  /// If a robot is not in the POWER OFF state, if is not safe to approach.
  /// The robot must not be E-Stopped to enter the POWER_ON state.
  /// Robot clock timestamp corresponding to these readings.
  builtin_interfaces__msg__Time timestamp;
  bool timestamp_is_set;
  /// The motor power state of the robot.
  bosdyn_msgs__msg__PowerStateMotorPowerState motor_power_state;
  /// State describing if robot is connected to shore (wall) power. Robot can't be powered on
  /// while on shore power
  /// The shore power state of the robot.
  bosdyn_msgs__msg__PowerStateShorePowerState shore_power_state;
  /// State describing if the robot has power.
  /// The payload ports power state of the robot.
  bosdyn_msgs__msg__PowerStateRobotPowerState robot_power_state;
  /// State describing if the payload port has power.
  /// The payload ports power state of the robot.
  bosdyn_msgs__msg__PowerStatePayloadPortsPowerState payload_ports_power_state;
  /// State describing if the robot Wi-Fi router has power.
  /// The hardware radio power state of the robot.
  bosdyn_msgs__msg__PowerStateWifiRadioPowerState wifi_radio_power_state;
  /// Number from 0 (empty) to 100 (full) indicating the estimated state of charge.
  /// This field provides a summary of the BatteryStates that provide power for motor and/or
  /// base compute power, both of which are required for locomotion.
  double locomotion_charge_percentage;
  bool locomotion_charge_percentage_is_set;
  /// An estimate of remaining runtime. Note that this field might not be populated.
  /// This field provides a summary of the BatteryStates that provide power for motor and/or
  /// base compute power, both of which are required for locomotion.
  builtin_interfaces__msg__Duration locomotion_estimated_runtime;
  bool locomotion_estimated_runtime_is_set;
} bosdyn_msgs__msg__PowerState;

// Struct for a sequence of bosdyn_msgs__msg__PowerState.
typedef struct bosdyn_msgs__msg__PowerState__Sequence
{
  bosdyn_msgs__msg__PowerState * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__PowerState__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__POWER_STATE__STRUCT_H_
