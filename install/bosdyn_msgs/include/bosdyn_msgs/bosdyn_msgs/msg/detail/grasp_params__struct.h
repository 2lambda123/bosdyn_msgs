// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/GraspParams.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__GRASP_PARAMS__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__GRASP_PARAMS__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'grasp_params_frame_name'
#include "rosidl_runtime_c/string.h"
// Member 'allowable_orientation'
#include "bosdyn_msgs/msg/detail/allowable_orientation__struct.h"
// Member 'position_constraint'
#include "bosdyn_msgs/msg/detail/grasp_position_constraint__struct.h"
// Member 'manipulation_camera_source'
#include "bosdyn_msgs/msg/detail/manipulation_camera_source__struct.h"

/// Struct defined in msg/GraspParams in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__GraspParams
{
  /// Where the grasp is on the hand.  Set to 0 to be a (default) palm grasp, where the object will
  /// be pressed against the gripper's palm plate.  Set to 1.0 to be a fingertip grasp, where the
  /// robot will try to pick up the target with just the tip of its fingers.
  /// Intermediate values move the grasp location between the two extremes.
  float grasp_palm_to_fingertip;
  /// Frame name for the frame that the constraints in allowable_orientation are expressed in.
  rosidl_runtime_c__String grasp_params_frame_name;
  /// Optional constraints about the orientation of the grasp.  This field lets you specify things
  /// like "only do a top down grasp," "grasp only from this direction," or "grasp with the gripper
  /// upside-down."  If you don't pass anything, the robot will automatically search for a good
  /// grasp orientation.
  bosdyn_msgs__msg__AllowableOrientation__Sequence allowable_orientation;
  /// Optional parameter on how much the robot is allowed to move the grasp from where the user
  /// requested.  Set this to be GRASP_POSITION_CONSTRAINT_FIXED_AT_USER_POSITION to get a grasp
  /// that is at the exact position you requested, but has less or no automatic grasp selection
  /// help in position.
  bosdyn_msgs__msg__GraspPositionConstraint position_constraint;
  /// Optional hint about which camera was used to generate the target points.  The robot will
  /// attempt to correct for calibration error between the arm and the body cameras.
  bosdyn_msgs__msg__ManipulationCameraSource manipulation_camera_source;
} bosdyn_msgs__msg__GraspParams;

// Struct for a sequence of bosdyn_msgs__msg__GraspParams.
typedef struct bosdyn_msgs__msg__GraspParams__Sequence
{
  bosdyn_msgs__msg__GraspParams * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__GraspParams__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__GRASP_PARAMS__STRUCT_H_
