// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/DataDescriptor.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__DATA_DESCRIPTOR__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__DATA_DESCRIPTOR__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'timestamp'
#include "builtin_interfaces/msg/detail/time__struct.h"
// Member 'additional_indexes'
#include "rosidl_runtime_c/primitives_sequence.h"

/// Struct defined in msg/DataDescriptor in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__DataDescriptor
{
  /// A DataDescriptor describes a data block which immediately follows it in the file.
  /// A corresponding SeriesDescriptor with a matching series_index must precede this in the file.
  /// The series_index references the SeriesDescriptor to which the data following is associated.
  uint32_t series_index;
  /// The time at which the data is considered to be captured/sampled.
  /// E.g., the shutter-close time of a captured image.
  builtin_interfaces__msg__Time timestamp;
  bool timestamp_is_set;
  /// Sometimes a visualizer will want to organize message by data timestamp, sometimes by
  ///  the time messages were published or logged.
  /// The additional_indexes field allows extra indexes or timestamps to be associated with
  ///  each data block for this purpose.
  /// Other identifying information may also be used here, such as the PID of the process which
  ///  originated the data (e.g., for detecting if and when that process restarted).
  /// The values in this field should correspond to the labels defined in "additional_index_names"
  ///  in the corresponding SeriesDescriptor.
  rosidl_runtime_c__int64__Sequence additional_indexes;
} bosdyn_msgs__msg__DataDescriptor;

// Struct for a sequence of bosdyn_msgs__msg__DataDescriptor.
typedef struct bosdyn_msgs__msg__DataDescriptor__Sequence
{
  bosdyn_msgs__msg__DataDescriptor * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__DataDescriptor__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__DATA_DESCRIPTOR__STRUCT_H_
