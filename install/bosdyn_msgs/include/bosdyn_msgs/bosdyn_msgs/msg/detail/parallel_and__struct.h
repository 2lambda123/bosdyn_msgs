// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/ParallelAnd.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__PARALLEL_AND__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__PARALLEL_AND__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'children'
#include "bosdyn_msgs/msg/detail/node__struct.h"

/// Struct defined in msg/ParallelAnd in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__ParallelAnd
{
  /// Run many child nodes together, returning only after they have all completed or an
  /// early exit is triggered.
  bosdyn_msgs__msg__Node__Sequence children;
  /// Boolean to finish every child node. If this is false, if one of the nodes fails, the whole
  /// ParallelAnd will stop & return the failure immediately.
  /// If this is true, if one of the nodes fails, the ParallelAnd will continue to run until all
  /// the children have exited, then report the failure.
  /// If a node raises an error, the error will always be reported immediately.
  /// Default false.
  bool finish_every_node;
} bosdyn_msgs__msg__ParallelAnd;

// Struct for a sequence of bosdyn_msgs__msg__ParallelAnd.
typedef struct bosdyn_msgs__msg__ParallelAnd__Sequence
{
  bosdyn_msgs__msg__ParallelAnd * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__ParallelAnd__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__PARALLEL_AND__STRUCT_H_
