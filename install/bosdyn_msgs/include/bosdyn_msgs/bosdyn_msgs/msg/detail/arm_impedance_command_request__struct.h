// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/ArmImpedanceCommandRequest.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__ARM_IMPEDANCE_COMMAND_REQUEST__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__ARM_IMPEDANCE_COMMAND_REQUEST__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'root_frame_name'
#include "rosidl_runtime_c/string.h"
// Member 'root_tform_task'
// Member 'wrist_tform_tool'
#include "geometry_msgs/msg/detail/pose__struct.h"
// Member 'task_tform_desired_tool'
#include "bosdyn_msgs/msg/detail/se3_trajectory__struct.h"
// Member 'feed_forward_wrench_at_tool_in_desired_tool'
#include "geometry_msgs/msg/detail/wrench__struct.h"
// Member 'diagonal_stiffness_matrix'
// Member 'diagonal_damping_matrix'
#include "bosdyn_msgs/msg/detail/vector__struct.h"

/// Struct defined in msg/ArmImpedanceCommandRequest in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__ArmImpedanceCommandRequest
{
  /// Name of the frame relative to which the task frame is defined for this command.
  /// Common frames for this include "odom", "vision", "body", and "flat_body".
  rosidl_runtime_c__String root_frame_name;
  /// This transform specifies the pose of the task frame relative to the root frame.
  /// If unset, it defaults to identity, and the task frame coincides with the root frame.
  /// The `desired_tool` frame will be specified relative to the task frame. For peg in
  /// hole tasks for example, the task frame could be a frame attached to the top of the
  /// hole with z-axis aligned with the hole axis, and the `desired_tool` frame could
  /// move in z to direct the peg deeper into the hole.
  geometry_msgs__msg__Pose root_tform_task;
  bool root_tform_task_is_set;
  /// The tool pose relative to the parent link (link_wr1). This can also be thought of as the
  /// "remote center" frame. For peg in hole tasks for example, one might put the tool frame
  /// at the tip of the peg, or slightly below the tip floating in space, at the point on which
  /// we want our virtual springs to pull.
  /// Defaults to
  ///    [0.19557 0 0]
  ///    [1 0 0 0]
  /// which is a frame aligned with the wrist frame, with its origin slightly in front of
  /// the gripper's palm plate.
  geometry_msgs__msg__Pose wrist_tform_tool;
  bool wrist_tform_tool_is_set;
  /// Trajectory of where we want the tool to be relative to the task frame. Note that this `desired_tool`
  /// frame is not the same as the tool frame attached to the wrist link. If our tool deviates from this
  /// `desired_tool` pose, it will be subject to a wrench determined by our stiffness and damping matrices.
  bosdyn_msgs__msg__SE3Trajectory task_tform_desired_tool;
  bool task_tform_desired_tool_is_set;
  /// Feed forward wrench to apply at the tool, expressed with respect to the `desired_tool` frame
  geometry_msgs__msg__Wrench feed_forward_wrench_at_tool_in_desired_tool;
  bool feed_forward_wrench_at_tool_in_desired_tool_is_set;
  /// Stiffness matrix in the `desired_tool` frame. The matrix is parameterized by a vector of 6 doubles,
  /// representing the diagonal of this 6x6 matrix: [x,y,z,tx,ty,tz] (N/m, N/m, N/m, Nm/rad, Nm/rad, Nm/rad).
  /// All other entries will be set to 0. All stiffness values along the diagonal should be non-negative.
  bosdyn_msgs__msg__Vector diagonal_stiffness_matrix;
  bool diagonal_stiffness_matrix_is_set;
  /// Damping matrix in the `desired_tool` frame. The matrix is parameterized by a vector of 6 doubles,
  /// representing the diagonal of this 6x6 matrix: [x,y,z,tx,ty,tz] (Ns/m, Ns/m, Ns/m, Nms/rad, Nms/rad, Nms/rad)
  /// All other entries will be set to 0. All damping values along the diagonal should be non-negative.
  bosdyn_msgs__msg__Vector diagonal_damping_matrix;
  bool diagonal_damping_matrix_is_set;
  /// Maximum force magnitude in Newtons we're allowed to exert. If the tool deviates such that the
  /// magnitude of the requested force would exceed this threshold, saturate the requested force.
  /// If this value is not set, a default of 60N will be used.
  double max_force_mag;
  bool max_force_mag_is_set;
  /// Maximum torque magnitude in Newton meters we're allowed to exert. If the tool deviates such
  /// that the magnitude of the requested torque would exceed this threshold, saturate the
  /// requested torque. If this value is not set, a default of 15Nm will be used.
  double max_torque_mag;
  bool max_torque_mag_is_set;
} bosdyn_msgs__msg__ArmImpedanceCommandRequest;

// Struct for a sequence of bosdyn_msgs__msg__ArmImpedanceCommandRequest.
typedef struct bosdyn_msgs__msg__ArmImpedanceCommandRequest__Sequence
{
  bosdyn_msgs__msg__ArmImpedanceCommandRequest * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__ArmImpedanceCommandRequest__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__ARM_IMPEDANCE_COMMAND_REQUEST__STRUCT_H_
