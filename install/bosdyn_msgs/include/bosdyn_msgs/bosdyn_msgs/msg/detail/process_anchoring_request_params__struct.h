// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/ProcessAnchoringRequestParams.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__PROCESS_ANCHORING_REQUEST_PARAMS__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__PROCESS_ANCHORING_REQUEST_PARAMS__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'optimizer_params'
#include "bosdyn_msgs/msg/detail/process_anchoring_request_params_optimizer_params__struct.h"
// Member 'measurement_params'
#include "bosdyn_msgs/msg/detail/process_anchoring_request_params_measurement_params__struct.h"
// Member 'weights'
#include "bosdyn_msgs/msg/detail/process_anchoring_request_params_weights__struct.h"
// Member 'gravity_ewrt_seed'
#include "geometry_msgs/msg/detail/vector3__struct.h"

/// Struct defined in msg/ProcessAnchoringRequestParams in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__ProcessAnchoringRequestParams
{
  /// Parameters affecting the underlying optimizer.
  /// Parameters which affect the measurements the optimzier uses to process the anchoring.
  /// Relative weights to use for each of the optimizer's terms. These can be any positive value.
  /// If set to zero, a reasonable default will be used. In general, the higher the weight, the more
  /// the optimizer will care about that particular measurement.
  bosdyn_msgs__msg__ProcessAnchoringRequestParamsOptimizerParams optimizer_params;
  bool optimizer_params_is_set;
  bosdyn_msgs__msg__ProcessAnchoringRequestParamsMeasurementParams measurement_params;
  bool measurement_params_is_set;
  bosdyn_msgs__msg__ProcessAnchoringRequestParamsWeights weights;
  bool weights_is_set;
  /// If true, the anchoring which already exists on the server will be used as the initial
  /// guess for the optimizer. Otherwise, a new anchoring will be generated for every waypoint
  /// which doesn't have a value passed in through initial_hint. If no hint is provided,
  /// and this value is false, every waypoint will be given a starting anchoring based on
  /// the oldest waypoint in the map.
  bool optimize_existing_anchoring;
  bool optimize_existing_anchoring_is_set;
  /// The optimizer will try to keep the orientation of waypoints consistent with gravity.
  /// If provided, this is the gravity direction expressed with respect to the seed. This
  /// will be interpreted as a unit vector. If not filled out, a default of (0, 0, -1) will be
  /// used.
  geometry_msgs__msg__Vector3 gravity_ewrt_seed;
  bool gravity_ewrt_seed_is_set;
} bosdyn_msgs__msg__ProcessAnchoringRequestParams;

// Struct for a sequence of bosdyn_msgs__msg__ProcessAnchoringRequestParams.
typedef struct bosdyn_msgs__msg__ProcessAnchoringRequestParams__Sequence
{
  bosdyn_msgs__msg__ProcessAnchoringRequestParams * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__ProcessAnchoringRequestParams__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__PROCESS_ANCHORING_REQUEST_PARAMS__STRUCT_H_
