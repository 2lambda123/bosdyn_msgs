// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/DataIdentifier.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__DATA_IDENTIFIER__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__DATA_IDENTIFIER__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'action_id'
#include "bosdyn_msgs/msg/detail/capture_action_id__struct.h"
// Member 'channel'
// Member 'data_name'
#include "rosidl_runtime_c/string.h"

/// Struct defined in msg/DataIdentifier in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__DataIdentifier
{
  /// A way to identify an individual piece of data stored in the data buffer.
  /// The action where the data was acquired.
  bosdyn_msgs__msg__CaptureActionId action_id;
  bool action_id_is_set;
  /// Data buffer channel associated with the DataBlob. The channel is used to group data across
  /// actions by a specific source, and it can be used in queries to retrieve some subset of data.
  /// For example, the channel could be "ptz" and queries can be made for all PTZ images.
  rosidl_runtime_c__String channel;
  /// Data-specific identifier that can optionally be used to disambiguate cases where the
  /// action_id and channel are insufficient. For example, you save cropped SpotCAM pano image that
  /// are detected as gauges to a "detected_gauges" channel, but want a way to further individually
  /// identify them as each specific gauge, so you give each detection a unique data_name.
  rosidl_runtime_c__String data_name;
  /// Unique identifier specified by the Data Acquisition Store service for this individual piece
  /// of data. It is a monotonically-increasing value that is incremented for each stored capture.
  /// This value is intended to be unique to a robot and not globally unique. We do not guarantee
  /// uniqueness pre and post software upgrades or factory resets. This id does not necessarily
  /// start at 0.
  uint64_t id;
} bosdyn_msgs__msg__DataIdentifier;

// Struct for a sequence of bosdyn_msgs__msg__DataIdentifier.
typedef struct bosdyn_msgs__msg__DataIdentifier__Sequence
{
  bosdyn_msgs__msg__DataIdentifier * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__DataIdentifier__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__DATA_IDENTIFIER__STRUCT_H_
