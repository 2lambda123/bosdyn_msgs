// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/VectorAlignmentWithTolerance.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__VECTOR_ALIGNMENT_WITH_TOLERANCE__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__VECTOR_ALIGNMENT_WITH_TOLERANCE__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'axis_on_gripper_ewrt_gripper'
// Member 'axis_to_align_with_ewrt_frame'
#include "geometry_msgs/msg/detail/vector3__struct.h"

/// Struct defined in msg/VectorAlignmentWithTolerance in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__VectorAlignmentWithTolerance
{
  /// Axis on the gripper that you want to align.  For example, to align the front of the gripper
  /// to be straight down, you'd use:
  ///      axis_on_gripper_ewrt_gripper = Vec3(1, 0, 0)
  ///      axis_to_align_with_ewrt_frame = Vec3(0, 0, -1)   (in the "vision" frame)
  geometry_msgs__msg__Vector3 axis_on_gripper_ewrt_gripper;
  bool axis_on_gripper_ewrt_gripper_is_set;
  geometry_msgs__msg__Vector3 axis_to_align_with_ewrt_frame;
  bool axis_to_align_with_ewrt_frame_is_set;
  float threshold_radians;
} bosdyn_msgs__msg__VectorAlignmentWithTolerance;

// Struct for a sequence of bosdyn_msgs__msg__VectorAlignmentWithTolerance.
typedef struct bosdyn_msgs__msg__VectorAlignmentWithTolerance__Sequence
{
  bosdyn_msgs__msg__VectorAlignmentWithTolerance * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__VectorAlignmentWithTolerance__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__VECTOR_ALIGNMENT_WITH_TOLERANCE__STRUCT_H_
