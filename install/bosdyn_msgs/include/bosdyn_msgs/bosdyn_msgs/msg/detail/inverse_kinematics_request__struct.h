// NOLINT: This file starts with a BOM since it contain non-ASCII characters
// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/InverseKinematicsRequest.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__INVERSE_KINEMATICS_REQUEST__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__INVERSE_KINEMATICS_REQUEST__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'header'
#include "bosdyn_msgs/msg/detail/request_header__struct.h"
// Member 'root_frame_name'
#include "rosidl_runtime_c/string.h"
// Member 'root_tform_scene'
// Member 'scene_tform_task'
// Member 'scene_tform_body_nominal'
#include "geometry_msgs/msg/detail/pose__struct.h"
// Member 'nominal_arm_configuration'
#include "bosdyn_msgs/msg/detail/inverse_kinematics_request_named_arm_configuration__struct.h"
// Member 'nominal_arm_configuration_overrides'
#include "bosdyn_msgs/msg/detail/arm_joint_position__struct.h"
// Member 'stance_specification'
#include "bosdyn_msgs/msg/detail/inverse_kinematics_request_one_of_stance_specification__struct.h"
// Member 'tool_specification'
#include "bosdyn_msgs/msg/detail/inverse_kinematics_request_one_of_tool_specification__struct.h"
// Member 'task_specification'
#include "bosdyn_msgs/msg/detail/inverse_kinematics_request_one_of_task_specification__struct.h"

/// Struct defined in msg/InverseKinematicsRequest in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__InverseKinematicsRequest
{
  /// Public spot.InverseKinematics API messages.
  /// Request a solution to an inverse kinematics problem for Spot (or an indication that a solution
  /// could not be found). This message can be used to make both reachability and stance-selection
  /// queries. When filling out the request, the caller specifies one option from each of the following
  /// categories:
  ///  - stance specifications (fixed foot positions or feet on a ground plane),
  ///  - tool specifications (wrist-mounted), and
  ///  - task specifications (tool pose or gaze)
  /// When evaluating potential robot configurations, the service considers joint limits, and static
  /// stability in addition to the requirements specified in the request.
  bosdyn_msgs__msg__RequestHeader header;
  bool header_is_set;
  /// The root frame is the parent for the optional scene frame. The root frame must be
  /// either “vision" or “odom”.
  rosidl_runtime_c__String root_frame_name;
  /// The task frame as well as body and foot related fields below are specified in this optional
  /// scene frame. If unset, it defaults to the identity transform and all scene quantities are
  /// therefore expressed in the root frame. This frame is useful in cases where the inverse
  /// kinematics problem is most easily defined relative to some other frame (e.g. the frame
  /// defined by a fiducial detection next to a piece of equipment).
  geometry_msgs__msg__Pose root_tform_scene;
  bool root_tform_scene_is_set;
  /// Tool related fields below are specified in this optional task frame.  If unset it defaults
  /// to the identity transform and all task frame quantities are therefore expressed in the scene
  /// frame.
  geometry_msgs__msg__Pose scene_tform_task;
  bool scene_tform_task_is_set;
  /// The solver will prefer arm configurations close to the specified named configuration.
  /// Defaults to ARM_CONFIG_CURRENT.
  bosdyn_msgs__msg__InverseKinematicsRequestNamedArmConfiguration nominal_arm_configuration;
  /// Entries override the nominal joint positions for the specified arm joints. Unspecified joints
  /// will use the values specified by nominal_arm_configuration.
  bosdyn_msgs__msg__ArmJointPosition nominal_arm_configuration_overrides;
  bool nominal_arm_configuration_overrides_is_set;
  /// The solver will prefer configurations that put the body close to this pose. Default to the
  /// current body pose.
  geometry_msgs__msg__Pose scene_tform_body_nominal;
  bool scene_tform_body_nominal_is_set;
  /// Defines the stance condition for this query. Defaults to fixed_stance.
  bosdyn_msgs__msg__InverseKinematicsRequestOneOfStanceSpecification stance_specification;
  /// Defines the tool for this query. Defaults to wrist_mounted_tool.
  bosdyn_msgs__msg__InverseKinematicsRequestOneOfToolSpecification tool_specification;
  /// Defines the task for this query.
  bosdyn_msgs__msg__InverseKinematicsRequestOneOfTaskSpecification task_specification;
} bosdyn_msgs__msg__InverseKinematicsRequest;

// Struct for a sequence of bosdyn_msgs__msg__InverseKinematicsRequest.
typedef struct bosdyn_msgs__msg__InverseKinematicsRequest__Sequence
{
  bosdyn_msgs__msg__InverseKinematicsRequest * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__InverseKinematicsRequest__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__INVERSE_KINEMATICS_REQUEST__STRUCT_H_
