// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/ImageSource.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__IMAGE_SOURCE__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__IMAGE_SOURCE__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'name'
#include "rosidl_runtime_c/string.h"
// Member 'camera_models'
#include "bosdyn_msgs/msg/detail/image_source_one_of_camera_models__struct.h"
// Member 'image_type'
#include "bosdyn_msgs/msg/detail/image_source_image_type__struct.h"
// Member 'pixel_formats'
#include "bosdyn_msgs/msg/detail/image_pixel_format__struct.h"
// Member 'image_formats'
#include "bosdyn_msgs/msg/detail/image_format__struct.h"
// Member 'custom_params'
#include "bosdyn_msgs/msg/detail/dict_param_spec__struct.h"

/// Struct defined in msg/ImageSource in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__ImageSource
{
  /// Proto for a description of an image source on the robot.
  /// The camera can be modeled as a pinhole camera described with a matrix.
  /// Camera Matrix can be constructed by the camera intrinsics:
  /// [[focal_length.x,         skew.x, principal_point.x],
  /// [[        skew.y, focal_length.y, principal_point.y],
  /// [[             0,              0,                 1]]
  /// The name of this image source used to get images.
  rosidl_runtime_c__String name;
  /// Number of columns in the image (in pixels).
  int32_t cols;
  /// Number of rows in the image (in pixels).
  int32_t rows;
  /// For depth images, the pixel value that represents a depth of one meter.
  /// Depth in meters can be computed by dividing the raw pixel value by this scale factor.
  double depth_scale;
  /// Fields reserved for deprecated messages.
  bosdyn_msgs__msg__ImageSourceOneOfCameraModels camera_models;
  /// The kind of images returned by this image source.
  bosdyn_msgs__msg__ImageSourceImageType image_type;
  /// The pixel formats a specific image source supports.
  bosdyn_msgs__msg__ImagePixelFormat__Sequence pixel_formats;
  /// The image formats a specific image source supports.
  bosdyn_msgs__msg__ImageFormat__Sequence image_formats;
  /// ImageRequest parameters unique to this source that do not match any of the above fields.
  bosdyn_msgs__msg__DictParamSpec custom_params;
  bool custom_params_is_set;
} bosdyn_msgs__msg__ImageSource;

// Struct for a sequence of bosdyn_msgs__msg__ImageSource.
typedef struct bosdyn_msgs__msg__ImageSource__Sequence
{
  bosdyn_msgs__msg__ImageSource * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__ImageSource__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__IMAGE_SOURCE__STRUCT_H_
