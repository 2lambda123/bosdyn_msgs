// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/StreamParams.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__STREAM_PARAMS__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__STREAM_PARAMS__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'awb'
#include "bosdyn_msgs/msg/detail/stream_params_awb_mode__struct.h"
// Member 'exposure'
#include "bosdyn_msgs/msg/detail/stream_params_one_of_exposure__struct.h"

/// Struct defined in msg/StreamParams in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__StreamParams
{
  /// Parameters for how the video stream should be processed and compressed.
  /// The compression level in target BPS
  int64_t targetbitrate;
  bool targetbitrate_is_set;
  /// How often should the entire feed be refreshed? (in frames)
  /// Note: the feed is refreshed on a macroblock level; there are no full I-frames
  int64_t refreshinterval;
  bool refreshinterval_is_set;
  /// How often should an IDR message get sent? (in frames)
  int64_t idrinterval;
  bool idrinterval_is_set;
  /// Options for automatic white balancing mode.
  /// Wrapper for AwbModeEnum to allow it to be optionally set.
  /// Optional setting of automatic white balancing mode.
  bosdyn_msgs__msg__StreamParamsAwbMode awb;
  bool awb_is_set;
  bosdyn_msgs__msg__StreamParamsOneOfExposure exposure;
} bosdyn_msgs__msg__StreamParams;

// Struct for a sequence of bosdyn_msgs__msg__StreamParams.
typedef struct bosdyn_msgs__msg__StreamParams__Sequence
{
  bosdyn_msgs__msg__StreamParams * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__StreamParams__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__STREAM_PARAMS__STRUCT_H_
