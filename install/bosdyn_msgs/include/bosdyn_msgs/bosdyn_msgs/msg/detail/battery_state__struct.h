// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/BatteryState.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__BATTERY_STATE__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__BATTERY_STATE__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'timestamp'
#include "builtin_interfaces/msg/detail/time__struct.h"
// Member 'identifier'
#include "rosidl_runtime_c/string.h"
// Member 'estimated_runtime'
#include "builtin_interfaces/msg/detail/duration__struct.h"
// Member 'temperatures'
#include "rosidl_runtime_c/primitives_sequence.h"
// Member 'status'
#include "bosdyn_msgs/msg/detail/battery_state_status__struct.h"

/// Struct defined in msg/BatteryState in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__BatteryState
{
  /// The battery state for the robot. This includes information about the charge or the
  /// battery temperature.
  /// Robot clock timestamp corresponding to these readings.
  builtin_interfaces__msg__Time timestamp;
  bool timestamp_is_set;
  /// An identifier for this battery (could be a serial number or a name. subject to change).
  rosidl_runtime_c__String identifier;
  /// Number from 0 (empty) to 100 (full) indicating the estimated state of charge of the battery.
  double charge_percentage;
  bool charge_percentage_is_set;
  /// An estimate of remaining runtime. Note that this field might not be populated.
  builtin_interfaces__msg__Duration estimated_runtime;
  bool estimated_runtime_is_set;
  /// Measured current into (charging, positive) or out of (discharging, negative) the battery in
  /// Amps.
  double current;
  bool current_is_set;
  /// Measured voltage of the entire battery in Volts.
  double voltage;
  bool voltage_is_set;
  /// Measured temperature measurements of battery, in Celsius.
  /// Temperatures may be measured in many locations across the battery.
  rosidl_runtime_c__double__Sequence temperatures;
  /// Current state of the battery.
  bosdyn_msgs__msg__BatteryStateStatus status;
} bosdyn_msgs__msg__BatteryState;

// Struct for a sequence of bosdyn_msgs__msg__BatteryState.
typedef struct bosdyn_msgs__msg__BatteryState__Sequence
{
  bosdyn_msgs__msg__BatteryState * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__BatteryState__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__BATTERY_STATE__STRUCT_H_
