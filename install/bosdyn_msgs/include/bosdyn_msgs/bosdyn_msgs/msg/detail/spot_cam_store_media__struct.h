// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/SpotCamStoreMedia.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__SPOT_CAM_STORE_MEDIA__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__SPOT_CAM_STORE_MEDIA__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'service_name'
// Member 'host'
// Member 'tag'
#include "rosidl_runtime_c/string.h"
// Member 'camera'
#include "bosdyn_msgs/msg/detail/camera__struct.h"
// Member 'type'
#include "bosdyn_msgs/msg/detail/logpoint_record_type__struct.h"

/// Struct defined in msg/SpotCamStoreMedia in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__SpotCamStoreMedia
{
  /// Store media using the Spot CAM.
  /// Name of the service to use.
  rosidl_runtime_c__String service_name;
  /// Host machine of the directory server that the Spot CAM registered with.
  rosidl_runtime_c__String host;
  /// The rest of the fields are from bosdyn.api.spot_cam.logging.StoreRequest, see that message
  /// for details.
  bosdyn_msgs__msg__Camera camera;
  bool camera_is_set;
  /// What type of media should be stored from this action.
  bosdyn_msgs__msg__LogpointRecordType type;
  /// Extra metadata to store alongside the captured media.
  rosidl_runtime_c__String tag;
} bosdyn_msgs__msg__SpotCamStoreMedia;

// Struct for a sequence of bosdyn_msgs__msg__SpotCamStoreMedia.
typedef struct bosdyn_msgs__msg__SpotCamStoreMedia__Sequence
{
  bosdyn_msgs__msg__SpotCamStoreMedia * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__SpotCamStoreMedia__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__SPOT_CAM_STORE_MEDIA__STRUCT_H_
