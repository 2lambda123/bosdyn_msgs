// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/ArmCartesianCommandRequest.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__ARM_CARTESIAN_COMMAND_REQUEST__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__ARM_CARTESIAN_COMMAND_REQUEST__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'root_frame_name'
#include "rosidl_runtime_c/string.h"
// Member 'wrist_tform_tool'
// Member 'root_tform_task'
#include "geometry_msgs/msg/detail/pose__struct.h"
// Member 'pose_trajectory_in_task'
#include "bosdyn_msgs/msg/detail/se3_trajectory__struct.h"
// Member 'joint_configuration'
#include "bosdyn_msgs/msg/detail/arm_cartesian_command_request_one_of_joint_configuration__struct.h"
// Member 'x_axis'
// Member 'y_axis'
// Member 'z_axis'
// Member 'rx_axis'
// Member 'ry_axis'
// Member 'rz_axis'
#include "bosdyn_msgs/msg/detail/arm_cartesian_command_request_axis_mode__struct.h"
// Member 'wrench_trajectory_in_task'
#include "bosdyn_msgs/msg/detail/wrench_trajectory__struct.h"

/// Struct defined in msg/ArmCartesianCommandRequest in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__ArmCartesianCommandRequest
{
  /// The root frame is used to set the optional task frame that all trajectories are
  /// specified with respect to.  If the optional task frame is left un-specified it defaults
  /// to the identity transform and the root frame becomes the task frame.
  rosidl_runtime_c__String root_frame_name;
  /// The tool pose relative to the parent link (wrist).
  /// Defaults to
  ///    [0.19557 0 0]
  ///    [1 0 0 0]
  /// a frame with it's origin slightly in front of the gripper's palm plate aligned with
  /// wrist's orientation.
  geometry_msgs__msg__Pose wrist_tform_tool;
  bool wrist_tform_tool_is_set;
  /// The fields below are specified in this optional task frame.  If unset it defaults
  /// to the identity transform and all quantities are therefore expressed in the
  /// root_frame_name.
  geometry_msgs__msg__Pose root_tform_task;
  bool root_tform_task_is_set;
  /// A 3D pose trajectory for the tool expressed in the task frame, e.g. task_T_tool.
  /// This pose trajectory is optional if requesting a pure wrench at the end-effector,
  /// otherwise required for position or mixed force/position end-effector requests.
  bosdyn_msgs__msg__SE3Trajectory pose_trajectory_in_task;
  bool pose_trajectory_in_task_is_set;
  /// Optional Maximum acceleration magnitude of the end-effector.
  /// Valid ranges (0, 20]
  double maximum_acceleration;
  bool maximum_acceleration_is_set;
  /// Optional Maximum linear velocity magnitude of the end-effector. (m/s)
  double max_linear_velocity;
  bool max_linear_velocity_is_set;
  /// Optional Maximum angular velocity magnitude of the end-effector. (rad/s)
  double max_angular_velocity;
  bool max_angular_velocity_is_set;
  /// Maximum allowable tracking error of the tool frame from the desired trajectory
  /// before the arm will stop moving and cancel the rest of the trajectory. When this limit is
  /// exceeded, the hand will stay at the pose it was at when it exceeded the tracking error,
  /// and any other part of the trajectory specified in the rest of this message will be
  /// ignored. max position tracking error in meters
  double max_pos_tracking_error;
  bool max_pos_tracking_error_is_set;
  /// max orientation tracking error in radians
  double max_rot_tracking_error;
  bool max_rot_tracking_error_is_set;
  /// Set a "preferred joint configuration" for this trajectory. When near a singularity, the
  /// robot will move towards the specified pose. If no pose is provided (i.e. no value is set
  /// for this oneof), a default one will be chosen. If the user wishes to explicitly tell the
  /// robot to not prefer any pose, (useful if doing a local move, and the user wants to avoid
  /// large joint motions) they should set ignore_joint_configuration to be true. The robot's
  /// behavior around singularities will then be to simply minimize joint velocity, resulting
  /// in the robot coming in and out of the singularity with similar joint angles
  bosdyn_msgs__msg__ArmCartesianCommandRequestOneOfJointConfiguration joint_configuration;
  /// If an axis is set to position mode (default), read desired from SE3Trajectory trajectory
  /// command.  If mode is set to Force, read desired from WrenchTrajectory wrench_trajectory
  /// command.  This supports hybrid control of the arm where users can specify, for example, Z
  /// to be in force control with X and Y in position control.  The elements are expressed in
  /// the same task_frame as the trajectories.
  bosdyn_msgs__msg__ArmCartesianCommandRequestAxisMode x_axis;
  bosdyn_msgs__msg__ArmCartesianCommandRequestAxisMode y_axis;
  bosdyn_msgs__msg__ArmCartesianCommandRequestAxisMode z_axis;
  bosdyn_msgs__msg__ArmCartesianCommandRequestAxisMode rx_axis;
  bosdyn_msgs__msg__ArmCartesianCommandRequestAxisMode ry_axis;
  bosdyn_msgs__msg__ArmCartesianCommandRequestAxisMode rz_axis;
  /// A force/torque trajectory for the tool expressed in the task frame.
  /// This trajectory is optional if requesting a pure pose at the end-effector,
  /// otherwise required for force or mixed force/position end-effector requests.
  bosdyn_msgs__msg__WrenchTrajectory wrench_trajectory_in_task;
  bool wrench_trajectory_in_task_is_set;
} bosdyn_msgs__msg__ArmCartesianCommandRequest;

// Struct for a sequence of bosdyn_msgs__msg__ArmCartesianCommandRequest.
typedef struct bosdyn_msgs__msg__ArmCartesianCommandRequest__Sequence
{
  bosdyn_msgs__msg__ArmCartesianCommandRequest * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__ArmCartesianCommandRequest__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__ARM_CARTESIAN_COMMAND_REQUEST__STRUCT_H_
