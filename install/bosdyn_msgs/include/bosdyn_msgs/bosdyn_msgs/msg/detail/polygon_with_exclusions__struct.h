// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/PolygonWithExclusions.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__POLYGON_WITH_EXCLUSIONS__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__POLYGON_WITH_EXCLUSIONS__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'inclusion'
// Member 'exclusions'
#include "bosdyn_msgs/msg/detail/polygon__struct.h"

/// Struct defined in msg/PolygonWithExclusions in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__PolygonWithExclusions
{
  /// Represents a region in the XY plane that consists of a single polygon
  /// from which polygons representing exclusion areas may be subtracted.
  ///
  /// A point is considered to be inside the region if it is inside the inclusion
  /// polygon and not inside any of the exclusion polygons.
  ///
  /// Note that while this can be used to represent a polygon with holes, that
  /// exclusions are not necessarily holes:  An exclusion polygon may not be
  /// completely inside the inclusion polygon.
  bosdyn_msgs__msg__Polygon inclusion;
  bool inclusion_is_set;
  bosdyn_msgs__msg__Polygon__Sequence exclusions;
} bosdyn_msgs__msg__PolygonWithExclusions;

// Struct for a sequence of bosdyn_msgs__msg__PolygonWithExclusions.
typedef struct bosdyn_msgs__msg__PolygonWithExclusions__Sequence
{
  bosdyn_msgs__msg__PolygonWithExclusions * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__PolygonWithExclusions__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__POLYGON_WITH_EXCLUSIONS__STRUCT_H_
