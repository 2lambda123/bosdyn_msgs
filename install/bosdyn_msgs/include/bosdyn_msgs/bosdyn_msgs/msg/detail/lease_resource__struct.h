// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/LeaseResource.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__LEASE_RESOURCE__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__LEASE_RESOURCE__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'resource'
#include "rosidl_runtime_c/string.h"
// Member 'lease'
#include "bosdyn_msgs/msg/detail/lease__struct.h"
// Member 'lease_owner'
#include "bosdyn_msgs/msg/detail/lease_owner__struct.h"

/// Struct defined in msg/LeaseResource in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__LeaseResource
{
  /// Describes all information about a sepcific lease: including the resource it covers, the
  /// active lease, and which application is the owner of a lease.
  /// The resource name.
  rosidl_runtime_c__String resource;
  /// The active lease, if any.
  bosdyn_msgs__msg__Lease lease;
  bool lease_is_set;
  /// The Lease Owner, if there is a Lease.
  bosdyn_msgs__msg__LeaseOwner lease_owner;
  bool lease_owner_is_set;
  /// The robot time when this lease will become stale.  A stale lease can be
  /// acquired with an AcquireLeaseRequest OR a TakeLeaseRequest, while a lease
  /// that is not stale can only be acquired with a TakeLeaseRequest.
  ///
  /// Leases get marked stale when they haven't been used in a while.  If you want
  /// to prevent your lease from being marked stale, you need to either:
  ///     - Periodically send RetainLeaseRequests.
  ///     - Periodically send valid commands to the robot using the lease.  Note
  ///       that only some types of commands will actually cause explicit lease
  ///       retention.
  ///
  /// Commands & RetainLeaseRequests issued with a stale lease will still be accepted.
  /// Stale leases, when used, will cause the used lease to no longer be stale.
  ///
  /// DEPRECATED as of 3.3. Lease staleness is now set by the Keepalive service.
  /// This value is only an estimate, and may not be correct if a Keepalive client has changed it.
  /// Please use the is_stale flag for an instantaneous report on staleness, or check the
  /// GetStatusResponse in the Keepalive service to get a time.
  /// This lease has been marked stale, and may be acquired by another client.
  bool is_stale;
} bosdyn_msgs__msg__LeaseResource;

// Struct for a sequence of bosdyn_msgs__msg__LeaseResource.
typedef struct bosdyn_msgs__msg__LeaseResource__Sequence
{
  bosdyn_msgs__msg__LeaseResource * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__LeaseResource__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__LEASE_RESOURCE__STRUCT_H_
