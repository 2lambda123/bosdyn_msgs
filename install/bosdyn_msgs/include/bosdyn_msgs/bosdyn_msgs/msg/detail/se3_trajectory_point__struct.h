// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/SE3TrajectoryPoint.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__SE3_TRAJECTORY_POINT__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__SE3_TRAJECTORY_POINT__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'pose'
#include "geometry_msgs/msg/detail/pose__struct.h"
// Member 'velocity'
#include "geometry_msgs/msg/detail/twist__struct.h"
// Member 'time_since_reference'
#include "builtin_interfaces/msg/detail/duration__struct.h"

/// Struct defined in msg/SE3TrajectoryPoint in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__SE3TrajectoryPoint
{
  /// A SE3 pose and velocity that can be used as a point within a trajectory.
  /// Required pose the robot will try and achieve.
  geometry_msgs__msg__Pose pose;
  bool pose_is_set;
  /// Optional velocity (linear and angular) the robot will try and achieve.
  geometry_msgs__msg__Twist velocity;
  bool velocity_is_set;
  /// The duration to reach the point relative to the trajectory reference time.
  builtin_interfaces__msg__Duration time_since_reference;
  bool time_since_reference_is_set;
} bosdyn_msgs__msg__SE3TrajectoryPoint;

// Struct for a sequence of bosdyn_msgs__msg__SE3TrajectoryPoint.
typedef struct bosdyn_msgs__msg__SE3TrajectoryPoint__Sequence
{
  bosdyn_msgs__msg__SE3TrajectoryPoint * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__SE3TrajectoryPoint__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__SE3_TRAJECTORY_POINT__STRUCT_H_
