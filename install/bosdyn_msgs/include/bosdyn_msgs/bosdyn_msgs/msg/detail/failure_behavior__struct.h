// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/FailureBehavior.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__FAILURE_BEHAVIOR__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__FAILURE_BEHAVIOR__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'prompt_duration'
#include "builtin_interfaces/msg/detail/duration__struct.h"
// Member 'default_behavior'
#include "bosdyn_msgs/msg/detail/failure_behavior_one_of_default_behavior__struct.h"

/// Struct defined in msg/FailureBehavior in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__FailureBehavior
{
  /// The mission can automatically retry navigating to a waypoint or
  /// performing an action. Automatic retries can increase the probability of
  /// successfully navigating to a waypoint, but may cause the robot to take
  /// an unexpected path. Similarly, they can increase the probability of
  /// successfully collecting data for an action, but also increase the amount
  /// of time a mission takes. If the client does not want the robot to
  /// automatically retry navigating to a waypoint or performing an action,
  /// set this to 0. If the client wants the robot to automatically retry
  /// navigating to a waypoint or performing an action, set this to the
  /// desired number of retries. For example, if the client would like the
  /// action to be retried once, set this equal to 1. If this is unset or set
  /// to 0, no retry will occur.
  int32_t retry_count;
  /// At mission playback, if something fails (e.g., the robot gets stuck,
  /// an action fails), the user will get all possible actions as options
  /// in a question to choose from. If the user does not answer, the mission
  /// will fall back to the default behavior after this timeout. The default
  /// behaviors are defined by the default_behavior one_of. A minimum
  /// duration of 10 seconds is enforced.
  builtin_interfaces__msg__Duration prompt_duration;
  bool prompt_duration_is_set;
  /// If a failure occurs and the prompt has not been answered, the robot
  /// will sit down and power off. This is the safest option.
  /// If a failure occurs and the prompt has not been answered, the robot
  /// will proceed to the next action if able to do so. This may lead to
  /// different behavior at mission playback than at mission recording
  /// (e.g., the robot may take a different route, the robot may fail to
  /// collect the data for an action).
  /// Only available in missions with a dock!
  /// If a failure occurs and the prompt has not been answered, the robot
  /// will return to the start of the mission. Once at the start of the
  /// mission, the robot will attempt to dock.  If successfully, robot will
  /// try again later after the specified delay.
  /// Only available in missions with a dock!
  /// If robot can get back to the dock, it will, and if it does, the mission will end.
  /// Sometimes, the robot may not be able to get to an action (for example,
  /// its path may be blocked). Similarly, while at a waypoint where an action
  /// is performed, that action may fail (for example, the sensor is not
  /// powered on). In case of such failures, the user should choose the desired
  /// behavior using this enum.
  bosdyn_msgs__msg__FailureBehaviorOneOfDefaultBehavior default_behavior;
} bosdyn_msgs__msg__FailureBehavior;

// Struct for a sequence of bosdyn_msgs__msg__FailureBehavior.
typedef struct bosdyn_msgs__msg__FailureBehavior__Sequence
{
  bosdyn_msgs__msg__FailureBehavior * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__FailureBehavior__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__FAILURE_BEHAVIOR__STRUCT_H_
