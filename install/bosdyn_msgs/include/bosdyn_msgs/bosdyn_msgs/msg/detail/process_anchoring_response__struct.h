// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/ProcessAnchoringResponse.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__PROCESS_ANCHORING_RESPONSE__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__PROCESS_ANCHORING_RESPONSE__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'header'
#include "bosdyn_msgs/msg/detail/response_header__struct.h"
// Member 'status'
#include "bosdyn_msgs/msg/detail/process_anchoring_response_status__struct.h"
// Member 'waypoint_results'
#include "bosdyn_msgs/msg/detail/anchor__struct.h"
// Member 'world_object_results'
#include "bosdyn_msgs/msg/detail/anchored_world_object__struct.h"
// Member 'violated_waypoint_constraints'
#include "bosdyn_msgs/msg/detail/waypoint_anchor_hint__struct.h"
// Member 'violated_object_constraints'
#include "bosdyn_msgs/msg/detail/world_object_anchor_hint__struct.h"
// Member 'missing_snapshot_ids'
// Member 'missing_waypoint_ids'
// Member 'invalid_hints'
#include "rosidl_runtime_c/string.h"
// Member 'inconsistent_edges'
#include "bosdyn_msgs/msg/detail/edge_id__struct.h"

/// Struct defined in msg/ProcessAnchoringResponse in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__ProcessAnchoringResponse
{
  /// Streamed response from the ProcessAnchoringRequest. These will be streamed until optimization is complete.
  /// New anchorings will be streamed as they become available.
  bosdyn_msgs__msg__ResponseHeader header;
  bool header_is_set;
  bosdyn_msgs__msg__ProcessAnchoringResponseStatus status;
  /// Contains new anchorings for waypoint(s) processed by the server.
  /// These will be streamed back to the user as they become available.
  bosdyn_msgs__msg__Anchor__Sequence waypoint_results;
  /// Contains new anchorings for object(s) (e.g april tags) processed by the server.
  /// These will be streamed back to the user as they become available
  bosdyn_msgs__msg__AnchoredWorldObject__Sequence world_object_results;
  /// If modify_anchoring_on_server was set to true in the request, then the anchoring currently on the server
  /// was modified using map processing. If this is set to false, then either an error occurred during
  /// processing, or modify_anchoring_on_server was set to false in the request.
  /// When anchoring_on_server_was_modified is set to false, the client is expected to upload the results
  /// back to the server to commit the changes.
  bool anchoring_on_server_was_modified;
  /// The current optimizer iteration that produced these data.
  int32_t iteration;
  /// The current nonlinear optimization cost.
  double cost;
  /// If true, this is the result of the final iteration of optimization.
  /// This will always be true when stream_intermediate_results in the request is false.
  bool final_iteration;
  /// On failure due to constraint violation, these hints were violated by the optimization.
  /// Try increasing the pose bounds on the constraints of these hints.
  bosdyn_msgs__msg__WaypointAnchorHint__Sequence violated_waypoint_constraints;
  /// On failure due to constraint violation, these hints were violated by the optimization.
  /// Try increasing the pose bounds on the constraints of these hints.
  bosdyn_msgs__msg__WorldObjectAnchorHint__Sequence violated_object_constraints;
  /// When there are missing waypoint snapshots, these are the IDs of the missing snapshots.
  /// Upload them to continue.
  rosidl_runtime_c__String__Sequence missing_snapshot_ids;
  /// When there are missing waypoints, these are the IDs of the missing waypoints. Upload them
  /// to continue.
  rosidl_runtime_c__String__Sequence missing_waypoint_ids;
  /// Unorganized list of waypoints and object IDs which were invalid (missing from the map).
  rosidl_runtime_c__String__Sequence invalid_hints;
  /// List of edges that are inconsistent with the optimized result. This can happen when incorrect
  /// loop closures have been made before optimization, when inconsistent anchoring hints were passed in,
  /// or because the optmizer ended up in a local minimum.
  bosdyn_msgs__msg__EdgeId__Sequence inconsistent_edges;
} bosdyn_msgs__msg__ProcessAnchoringResponse;

// Struct for a sequence of bosdyn_msgs__msg__ProcessAnchoringResponse.
typedef struct bosdyn_msgs__msg__ProcessAnchoringResponse__Sequence
{
  bosdyn_msgs__msg__ProcessAnchoringResponse * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__ProcessAnchoringResponse__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__PROCESS_ANCHORING_RESPONSE__STRUCT_H_
