// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/SE2VelocityCommandRequest.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__SE2_VELOCITY_COMMAND_REQUEST__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__SE2_VELOCITY_COMMAND_REQUEST__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'end_time'
#include "builtin_interfaces/msg/detail/time__struct.h"
// Member 'se2_frame_name'
#include "rosidl_runtime_c/string.h"
// Member 'velocity'
// Member 'slew_rate_limit'
#include "bosdyn_msgs/msg/detail/se2_velocity__struct.h"

/// Struct defined in msg/SE2VelocityCommandRequest in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__SE2VelocityCommandRequest
{
  /// The timestamp (in robot time) by which a command must finish executing. This is a
  /// required field and used to prevent runaway commands.
  builtin_interfaces__msg__Time end_time;
  bool end_time_is_set;
  /// The name of the frame that velocity and slew_rate_limit are relative to.
  /// The trajectory must be expressed in a gravity aligned frame, so either
  /// "vision", "odom", or "flat_body". Any other provided
  /// se2_frame_name will be rejected and the velocity command will not be executed.
  rosidl_runtime_c__String se2_frame_name;
  /// Desired planar velocity of the robot body relative to se2_frame_name.
  bosdyn_msgs__msg__SE2Velocity velocity;
  bool velocity_is_set;
  /// If set, limits how quickly velocity can change relative to se2_frame_name.
  /// Otherwise, robot may decide to limit velocities using default settings.
  /// These values should be non-negative.
  bosdyn_msgs__msg__SE2Velocity slew_rate_limit;
  bool slew_rate_limit_is_set;
} bosdyn_msgs__msg__SE2VelocityCommandRequest;

// Struct for a sequence of bosdyn_msgs__msg__SE2VelocityCommandRequest.
typedef struct bosdyn_msgs__msg__SE2VelocityCommandRequest__Sequence
{
  bosdyn_msgs__msg__SE2VelocityCommandRequest * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__SE2VelocityCommandRequest__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__SE2_VELOCITY_COMMAND_REQUEST__STRUCT_H_
