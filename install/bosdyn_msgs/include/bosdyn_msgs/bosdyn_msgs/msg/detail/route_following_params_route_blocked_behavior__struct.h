// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/RouteFollowingParamsRouteBlockedBehavior.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__ROUTE_FOLLOWING_PARAMS_ROUTE_BLOCKED_BEHAVIOR__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__ROUTE_FOLLOWING_PARAMS_ROUTE_BLOCKED_BEHAVIOR__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

/// Constant 'ROUTE_BLOCKED_UNKNOWN'.
/**
  * The mode is unset.
 */
enum
{
  bosdyn_msgs__msg__RouteFollowingParamsRouteBlockedBehavior__ROUTE_BLOCKED_UNKNOWN = 0
};

/// Constant 'ROUTE_BLOCKED_REROUTE'.
/**
  * For NavigateToRequests, the robot will find the shortest path to the desination
  * that avoids the blockage.
  * For NavigateRouteRequests, the robot will find the shortest path to any point
  * after the furthest-along blockage, and after the furthest-along traversed edge,
  * and go to the point that gives that shortest path. Then, the robot will follow
  * the rest of the route from that point. If multiple points on the route are
  * similarly close to the robot, the robot will prefer the earliest on the route.
  * This is the default.
 */
enum
{
  bosdyn_msgs__msg__RouteFollowingParamsRouteBlockedBehavior__ROUTE_BLOCKED_REROUTE = 1
};

/// Constant 'ROUTE_BLOCKED_FAIL'.
/**
  * The robot will fail the command with status STATUS_STUCK;
 */
enum
{
  bosdyn_msgs__msg__RouteFollowingParamsRouteBlockedBehavior__ROUTE_BLOCKED_FAIL = 2
};

/// Struct defined in msg/RouteFollowingParamsRouteBlockedBehavior in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__RouteFollowingParamsRouteBlockedBehavior
{
  int8_t value;
} bosdyn_msgs__msg__RouteFollowingParamsRouteBlockedBehavior;

// Struct for a sequence of bosdyn_msgs__msg__RouteFollowingParamsRouteBlockedBehavior.
typedef struct bosdyn_msgs__msg__RouteFollowingParamsRouteBlockedBehavior__Sequence
{
  bosdyn_msgs__msg__RouteFollowingParamsRouteBlockedBehavior * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__RouteFollowingParamsRouteBlockedBehavior__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__ROUTE_FOLLOWING_PARAMS_ROUTE_BLOCKED_BEHAVIOR__STRUCT_H_
