// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/ArmCommandFeedback.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__ARM_COMMAND_FEEDBACK__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__ARM_COMMAND_FEEDBACK__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'feedback'
#include "bosdyn_msgs/msg/detail/arm_command_feedback_one_of_feedback__struct.h"
// Member 'status'
#include "bosdyn_msgs/msg/detail/robot_command_feedback_status_status__struct.h"

/// Struct defined in msg/ArmCommandFeedback in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__ArmCommandFeedback
{
  /// The feedback message associated with the requested command. Some commands may have
  /// an empty feedback message if they do not provide any updates/progress.
  bosdyn_msgs__msg__ArmCommandFeedbackOneOfFeedback feedback;
  bosdyn_msgs__msg__RobotCommandFeedbackStatusStatus status;
} bosdyn_msgs__msg__ArmCommandFeedback;

// Struct for a sequence of bosdyn_msgs__msg__ArmCommandFeedback.
typedef struct bosdyn_msgs__msg__ArmCommandFeedback__Sequence
{
  bosdyn_msgs__msg__ArmCommandFeedback * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__ArmCommandFeedback__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__ARM_COMMAND_FEEDBACK__STRUCT_H_
