// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/NetworkComputeInputData.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__NETWORK_COMPUTE_INPUT_DATA__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__NETWORK_COMPUTE_INPUT_DATA__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'input'
#include "bosdyn_msgs/msg/detail/network_compute_input_data_one_of_input__struct.h"
// Member 'model_name'
#include "rosidl_runtime_c/string.h"
// Member 'rotate_image'
#include "bosdyn_msgs/msg/detail/network_compute_input_data_rotate_image__struct.h"

/// Struct defined in msg/NetworkComputeInputData in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__NetworkComputeInputData
{
  /// DEPRECATED as of 3.3. Use NetworkComputeInputDataBridge instead.
  /// NetworkComputeInputData is multipurpose.  It's used both at runtime to call a NCB
  /// worker "run right now with this data" AND it's embedded in missions to say "when
  /// you run this action, run this NCB worker with an image from this camera".  When
  /// embedded in missions, we store which camera source and service to take a picture from
  /// at runtime.  At runtime, the ImageSourceAndService is converted to an actual image
  /// by the NetworkComputeBridge service.  If you're writing a worker, you can always
  /// expect to receive an actual image.
  bosdyn_msgs__msg__NetworkComputeInputDataOneOfInput input;
  /// Other data that isn't an image.  NetworkComputeBridge service will pass it through
  /// to the remote server so you can do computation on arbitrary data.
  ///     google.protobuf.Any other_data = 3;
  /// Name of the model to be run on the input data.
  rosidl_runtime_c__String model_name;
  /// Minimum confidence an object must have to be returned. Detections below this
  /// confidence threshold will be suppressed in the response.
  float min_confidence;
  /// Options for rotating the image before processing. When unset, no rotation is applied.
  /// Rotation is supported for data from image services that provide a FrameTreeSnapshot
  /// defining the sensor's frame with respect to Spot's body and vision frames.
  /// Field is ignored for non-image input.
  /// DEPRECATED as of 3.3. Please rotate the image client-side before passing it to NCB worker.
  bosdyn_msgs__msg__NetworkComputeInputDataRotateImage rotate_image;
} bosdyn_msgs__msg__NetworkComputeInputData;

// Struct for a sequence of bosdyn_msgs__msg__NetworkComputeInputData.
typedef struct bosdyn_msgs__msg__NetworkComputeInputData__Sequence
{
  bosdyn_msgs__msg__NetworkComputeInputData * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__NetworkComputeInputData__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__NETWORK_COMPUTE_INPUT_DATA__STRUCT_H_
