// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/ArmCartesianCommandFeedback.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__ARM_CARTESIAN_COMMAND_FEEDBACK__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__ARM_CARTESIAN_COMMAND_FEEDBACK__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'status'
#include "bosdyn_msgs/msg/detail/arm_cartesian_command_feedback_status__struct.h"

/// Struct defined in msg/ArmCartesianCommandFeedback in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__ArmCartesianCommandFeedback
{
  /// Current status of the pose trajectory.
  bosdyn_msgs__msg__ArmCartesianCommandFeedbackStatus status;
  /// Current linear tracking error of the tool frame.
  double measured_pos_tracking_error;
  /// Current rotational tracking error of the tool frame.
  double measured_rot_tracking_error;
  /// Linear distance from the tool to the tool trajectory's end point.
  double measured_pos_distance_to_goal;
  /// Rotational distance from the tool to the trajectory's end point.
  double measured_rot_distance_to_goal;
} bosdyn_msgs__msg__ArmCartesianCommandFeedback;

// Struct for a sequence of bosdyn_msgs__msg__ArmCartesianCommandFeedback.
typedef struct bosdyn_msgs__msg__ArmCartesianCommandFeedback__Sequence
{
  bosdyn_msgs__msg__ArmCartesianCommandFeedback * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__ArmCartesianCommandFeedback__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__ARM_CARTESIAN_COMMAND_FEEDBACK__STRUCT_H_
