// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/NetworkComputeInputDataRotateImage.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__NETWORK_COMPUTE_INPUT_DATA_ROTATE_IMAGE__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__NETWORK_COMPUTE_INPUT_DATA_ROTATE_IMAGE__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

/// Constant 'ROTATE_IMAGE_UNKNOWN'.
/**
  * Unspecified rotation method. Do not use.
 */
enum
{
  bosdyn_msgs__msg__NetworkComputeInputDataRotateImage__ROTATE_IMAGE_UNKNOWN = 0
};

/// Constant 'ROTATE_IMAGE_NO_ROTATION'.
/**
  * No rotation applied.
 */
enum
{
  bosdyn_msgs__msg__NetworkComputeInputDataRotateImage__ROTATE_IMAGE_NO_ROTATION = 1
};

/// Constant 'ROTATE_IMAGE_ALIGN_HORIZONTAL'.
/**
  * Rotate the images so the horizon is not rolled with respect to gravity.
 */
enum
{
  bosdyn_msgs__msg__NetworkComputeInputDataRotateImage__ROTATE_IMAGE_ALIGN_HORIZONTAL = 2
};

/// Constant 'ROTATE_IMAGE_ALIGN_WITH_BODY'.
/**
  * Rotate the images so that the horizon in the image is aligned with the inclination of
  * the body. For example, when applied to the left body camera this option rotates the image
  * so that the world does not appear upside down when the robot is standing upright, but if
  * the body is pitched up, the image will appear rotated.
 */
enum
{
  bosdyn_msgs__msg__NetworkComputeInputDataRotateImage__ROTATE_IMAGE_ALIGN_WITH_BODY = 3
};

/// Struct defined in msg/NetworkComputeInputDataRotateImage in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__NetworkComputeInputDataRotateImage
{
  int8_t value;
} bosdyn_msgs__msg__NetworkComputeInputDataRotateImage;

// Struct for a sequence of bosdyn_msgs__msg__NetworkComputeInputDataRotateImage.
typedef struct bosdyn_msgs__msg__NetworkComputeInputDataRotateImage__Sequence
{
  bosdyn_msgs__msg__NetworkComputeInputDataRotateImage * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__NetworkComputeInputDataRotateImage__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__NETWORK_COMPUTE_INPUT_DATA_ROTATE_IMAGE__STRUCT_H_
