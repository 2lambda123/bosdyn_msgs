// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/Switch.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__SWITCH__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__SWITCH__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'pivot_value'
#include "bosdyn_msgs/msg/detail/value__struct.h"
// Member 'int_children'
#include "bosdyn_msgs/msg/detail/key_int32_value_bosdyn_msgs_node__struct.h"
// Member 'default_child'
#include "bosdyn_msgs/msg/detail/node__struct.h"

/// Struct defined in msg/Switch in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__Switch
{
  /// Run a specific child based on a specified pivot_value.
  ///
  /// This node exists because of a subtle implmentation detail in Selector(always_restart = true).
  /// The astute reader might believe that they can construct a switch node by using a selector
  /// with sequences & conditions as children.  This is ALMOST true, EXCEPT that a selector
  /// (with always_restart = true) can leave multiple children in the running state IF:
  ///
  ///  - A later selector child was RUNNING last tick
  ///  - An eariler selector child returns RUNNING this tick
  ///
  /// Even though the later selector child won't be ticked, it will still be left in the running state
  /// and not restart when the selector advances to it again later.  Sometimes this is desireable,
  /// sometimes it isn't.  Switch is constrained to only have one child running, and if the switch ever
  /// switches children and return to a previously running child, that child will be restarted.
  /// Expresses an integer value that decides which child to run.
  bosdyn_msgs__msg__Value pivot_value;
  bool pivot_value_is_set;
  /// If false, this node will read the pivot_value once when its starts, and execute
  /// the specified child until it finishes even if the pivot_value changes.
  ///
  /// If true, this node will read from the pivot_value every tick, and change
  /// which child it's ticking when an underlying blackboard variable changes.
  bool always_restart;
  /// List of all children to possibly run.
  bosdyn_msgs__msg__KeyInt32ValueBosdynMsgsNode__Sequence int_children;
  /// If none of the above cases match, use this child
  bosdyn_msgs__msg__Node default_child;
  bool default_child_is_set;
} bosdyn_msgs__msg__Switch;

// Struct for a sequence of bosdyn_msgs__msg__Switch.
typedef struct bosdyn_msgs__msg__Switch__Sequence
{
  bosdyn_msgs__msg__Switch * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__Switch__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__SWITCH__STRUCT_H_
