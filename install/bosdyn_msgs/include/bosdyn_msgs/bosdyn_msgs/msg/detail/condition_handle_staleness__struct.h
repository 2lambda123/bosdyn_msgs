// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/ConditionHandleStaleness.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__CONDITION_HANDLE_STALENESS__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__CONDITION_HANDLE_STALENESS__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

/// Constant 'HANDLE_STALE_UNKNOWN'.
/**
  * acts like READ_ANYWAY for backwards compatibility.
 */
enum
{
  bosdyn_msgs__msg__ConditionHandleStaleness__HANDLE_STALE_UNKNOWN = 0
};

/// Constant 'HANDLE_STALE_READ_ANYWAY'.
/**
  * ignore how stale this data is.
 */
enum
{
  bosdyn_msgs__msg__ConditionHandleStaleness__HANDLE_STALE_READ_ANYWAY = 1
};

/// Constant 'HANDLE_STALE_RUN_UNTIL_FRESH'.
/**
  * return the RUNNING status until the data being read is not stale.
 */
enum
{
  bosdyn_msgs__msg__ConditionHandleStaleness__HANDLE_STALE_RUN_UNTIL_FRESH = 2
};

/// Constant 'HANDLE_STALE_FAIL'.
/**
  * return FAILURE status if stale data is read.
 */
enum
{
  bosdyn_msgs__msg__ConditionHandleStaleness__HANDLE_STALE_FAIL = 3
};

/// Struct defined in msg/ConditionHandleStaleness in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__ConditionHandleStaleness
{
  int8_t value;
} bosdyn_msgs__msg__ConditionHandleStaleness;

// Struct for a sequence of bosdyn_msgs__msg__ConditionHandleStaleness.
typedef struct bosdyn_msgs__msg__ConditionHandleStaleness__Sequence
{
  bosdyn_msgs__msg__ConditionHandleStaleness * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__ConditionHandleStaleness__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__CONDITION_HANDLE_STALENESS__STRUCT_H_
