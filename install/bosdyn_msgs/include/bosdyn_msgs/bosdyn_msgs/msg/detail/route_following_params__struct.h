// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/RouteFollowingParams.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__ROUTE_FOLLOWING_PARAMS__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__ROUTE_FOLLOWING_PARAMS__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'new_cmd_behavior'
#include "bosdyn_msgs/msg/detail/route_following_params_start_route_behavior__struct.h"
// Member 'existing_cmd_behavior'
#include "bosdyn_msgs/msg/detail/route_following_params_resume_behavior__struct.h"
// Member 'route_blocked_behavior'
#include "bosdyn_msgs/msg/detail/route_following_params_route_blocked_behavior__struct.h"

/// Struct defined in msg/RouteFollowingParams in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__RouteFollowingParams
{
  /// These parameters are specific to how the robot follows a specified route in NavigateRoute.
  /// For each enum in this message, if UNKNOWN is passed in, we default to one of the values
  /// (indicated in the comments). Passing UNKNOWN is not considered a programming error.
  /// This setting applies when a new NavigateRoute command is issued (different route or
  /// final-waypoint-offset), and command_id indicates a new command.
  /// This setting applies when a NavigateRoute command is issued with the same route and
  /// final-waypoint-offset. It is not necessary that command_id indicate the same command.
  /// The expected waypoint is the last waypoint that GraphNav was autonomously navigating to.
  /// This setting applies when the robot discovers that the route is blocked.
  bosdyn_msgs__msg__RouteFollowingParamsStartRouteBehavior new_cmd_behavior;
  bosdyn_msgs__msg__RouteFollowingParamsResumeBehavior existing_cmd_behavior;
  bosdyn_msgs__msg__RouteFollowingParamsRouteBlockedBehavior route_blocked_behavior;
} bosdyn_msgs__msg__RouteFollowingParams;

// Struct for a sequence of bosdyn_msgs__msg__RouteFollowingParams.
typedef struct bosdyn_msgs__msg__RouteFollowingParams__Sequence
{
  bosdyn_msgs__msg__RouteFollowingParams * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__RouteFollowingParams__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__ROUTE_FOLLOWING_PARAMS__STRUCT_H_
