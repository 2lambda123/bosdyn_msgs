// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/RetrieveResponse.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__RETRIEVE_RESPONSE__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__RETRIEVE_RESPONSE__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'header'
#include "bosdyn_msgs/msg/detail/response_header__struct.h"
// Member 'logpoint'
#include "bosdyn_msgs/msg/detail/logpoint__struct.h"
// Member 'data'
#include "bosdyn_msgs/msg/detail/data_chunk__struct.h"

/// Struct defined in msg/RetrieveResponse in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__RetrieveResponse
{
  /// Provide the data stored at a log point.
  /// Store() dictates what processing happens in this response.
  /// c0 -> c4 will return the raw (rgb24) fisheye image of the camera at that index.
  /// Storing a panorama will process the data into a stitched image.
  /// Common response header.
  bosdyn_msgs__msg__ResponseHeader header;
  bool header_is_set;
  /// Log point retrieved.
  bosdyn_msgs__msg__Logpoint logpoint;
  bool logpoint_is_set;
  /// Data chunk bytes field should be concatenated together to recover the binary data.
  bosdyn_msgs__msg__DataChunk data;
  bool data_is_set;
} bosdyn_msgs__msg__RetrieveResponse;

// Struct for a sequence of bosdyn_msgs__msg__RetrieveResponse.
typedef struct bosdyn_msgs__msg__RetrieveResponse__Sequence
{
  bosdyn_msgs__msg__RetrieveResponse * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__RetrieveResponse__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__RETRIEVE_RESPONSE__STRUCT_H_
