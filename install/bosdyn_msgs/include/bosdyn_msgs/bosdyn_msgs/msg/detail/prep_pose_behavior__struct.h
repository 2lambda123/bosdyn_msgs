// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/PrepPoseBehavior.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__PREP_POSE_BEHAVIOR__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__PREP_POSE_BEHAVIOR__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

/// Constant 'PREP_POSE_UNKNOWN'.
/**
  * Defines how and whether we use the "pre-docking" pose.
  * Default behavior, equivalent to PREP_POSE_USE_POSE.
 */
enum
{
  bosdyn_msgs__msg__PrepPoseBehavior__PREP_POSE_UNKNOWN = 0
};

/// Constant 'PREP_POSE_USE_POSE'.
/**
  * Goes to the pre-docking pose before docking.
 */
enum
{
  bosdyn_msgs__msg__PrepPoseBehavior__PREP_POSE_USE_POSE = 1
};

/// Constant 'PREP_POSE_SKIP_POSE'.
/**
  * Docks before going to the pre-docking pose.
 */
enum
{
  bosdyn_msgs__msg__PrepPoseBehavior__PREP_POSE_SKIP_POSE = 2
};

/// Constant 'PREP_POSE_ONLY_POSE'.
/**
  * Goes to the pre-docking pose, and then returns SUCCESS without docking.
 */
enum
{
  bosdyn_msgs__msg__PrepPoseBehavior__PREP_POSE_ONLY_POSE = 3
};

/// Constant 'PREP_POSE_UNDOCK'.
/**
  * Use this enum to undock a currently docked robot.
 */
enum
{
  bosdyn_msgs__msg__PrepPoseBehavior__PREP_POSE_UNDOCK = 4
};

/// Struct defined in msg/PrepPoseBehavior in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__PrepPoseBehavior
{
  int8_t value;
} bosdyn_msgs__msg__PrepPoseBehavior;

// Struct for a sequence of bosdyn_msgs__msg__PrepPoseBehavior.
typedef struct bosdyn_msgs__msg__PrepPoseBehavior__Sequence
{
  bosdyn_msgs__msg__PrepPoseBehavior * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__PrepPoseBehavior__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__PREP_POSE_BEHAVIOR__STRUCT_H_
