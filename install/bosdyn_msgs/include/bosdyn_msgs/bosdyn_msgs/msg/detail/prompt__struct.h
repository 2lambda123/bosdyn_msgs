// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/Prompt.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__PROMPT__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__PROMPT__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'text'
// Member 'source'
// Member 'question_name_in_blackboard'
#include "rosidl_runtime_c/string.h"
// Member 'options'
#include "bosdyn_msgs/msg/detail/prompt_option__struct.h"
// Member 'child'
#include "bosdyn_msgs/msg/detail/node__struct.h"
// Member 'severity'
#include "bosdyn_msgs/msg/detail/alert_data_severity_level__struct.h"

/// Struct defined in msg/Prompt in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__Prompt
{
  /// Prompt the world at large to answer a question.
  /// This node represents a request for information from ANY listeners that may be out there.
  /// Should we always re-prompt when this node is started?
  /// If false, this node will only ever prompt if it is started and its question is unanswered.
  /// This may be used, for example, to ask the user to check the robot after any self-right.
  /// If true, this node will prompt whenever it is started.
  /// This may be used, for example, to tell the user to perform some one-time action, like open a
  /// door for the robot.
  bool always_reprompt;
  /// The text of the question itself.  The question text may contain formatted blackboard
  /// variables.  Please see the documentation in FormatBlackboard for more information
  /// about supported string formats.
  rosidl_runtime_c__String text;
  /// Metadata describing the source of the question.
  /// The answer will be written into the state blackboard with this as the variable name.
  rosidl_runtime_c__String source;
  /// Data about the options to choose from.
  /// The set of options that can be chosen for this prompt.
  bosdyn_msgs__msg__PromptOption__Sequence options;
  /// Child node, run after the prompt has been responded to.
  /// Children will have access to the answer code provided by the response.
  bosdyn_msgs__msg__Node child;
  bool child_is_set;
  /// Hint that Question posed by this Prompt is meant to be answered by some automated system.
  /// See the Question message for details.
  bool for_autonomous_processing;
  /// Severity for this prompt. Used to determine what sort of alerting
  /// this prompt will trigger.
  /// Here are guidelines for severity as it pertains to missions:
  /// INFO: Normal operation.  For example, waiting for charge; waiting on the dock for logs to
  /// download. WARN: Something went wrong, but the mission will try to recover autonomously.
  /// ERROR: Something went wrong, and the mission can't recover without human intervention.
  /// Intervention is not time sensitive and can be resolved when convenient.
  /// CRITICAL: Something went wrong, and the mission can't recover without human intervention.
  /// Human needs to rescue the robot before battery runs out because it's not charging.
  bosdyn_msgs__msg__AlertDataSeverityLevel severity;
  /// If specified, this node will write its current question (bosdyn.api.mission.Question proto)
  /// to the blackboard while it is being ticked.
  rosidl_runtime_c__String question_name_in_blackboard;
} bosdyn_msgs__msg__Prompt;

// Struct for a sequence of bosdyn_msgs__msg__Prompt.
typedef struct bosdyn_msgs__msg__Prompt__Sequence
{
  bosdyn_msgs__msg__Prompt * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__Prompt__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__PROMPT__STRUCT_H_
