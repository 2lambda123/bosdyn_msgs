// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/ProcessAnchoringRequestParamsMeasurementParams.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__PROCESS_ANCHORING_REQUEST_PARAMS_MEASUREMENT_PARAMS__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__PROCESS_ANCHORING_REQUEST_PARAMS_MEASUREMENT_PARAMS__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

/// Struct defined in msg/ProcessAnchoringRequestParamsMeasurementParams in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__ProcessAnchoringRequestParamsMeasurementParams
{
  /// If true, waypoints which share the same kinematic odometry
  /// frame will be constrained to one another using it.
  bool use_kinematic_odometry;
  bool use_kinematic_odometry_is_set;
  /// If true, waypoints which share the same visual odometry frame
  /// will be constrained to one another using it.
  bool use_visual_odometry;
  bool use_visual_odometry_is_set;
  /// If true, waypoints will be constrained so that the apparent pose of the
  /// robot w.r.t the waypoint at the time of recording is consistent with gravity.
  bool use_gyroscope_measurements;
  bool use_gyroscope_measurements_is_set;
  /// If true, edges which were created by topology processing via loop closures will
  /// be used as constraints.
  bool use_loop_closures;
  bool use_loop_closures_is_set;
  /// If true, world object measurements will be used to constrain waypoints to one another
  /// when those waypoints co-observe the same world object.
  bool use_world_objects;
  bool use_world_objects_is_set;
} bosdyn_msgs__msg__ProcessAnchoringRequestParamsMeasurementParams;

// Struct for a sequence of bosdyn_msgs__msg__ProcessAnchoringRequestParamsMeasurementParams.
typedef struct bosdyn_msgs__msg__ProcessAnchoringRequestParamsMeasurementParams__Sequence
{
  bosdyn_msgs__msg__ProcessAnchoringRequestParamsMeasurementParams * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__ProcessAnchoringRequestParamsMeasurementParams__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__PROCESS_ANCHORING_REQUEST_PARAMS_MEASUREMENT_PARAMS__STRUCT_H_
