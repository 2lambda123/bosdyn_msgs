// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/RemoteGrpc.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__REMOTE_GRPC__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__REMOTE_GRPC__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'host'
// Member 'service_name'
// Member 'lease_resources'
// Member 'group_name_format'
#include "rosidl_runtime_c/string.h"
// Member 'inputs'
#include "bosdyn_msgs/msg/detail/key_value__struct.h"
// Member 'params'
#include "bosdyn_msgs/msg/detail/dict_param__struct.h"

/// Struct defined in msg/RemoteGrpc in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__RemoteGrpc
{
  /// Call out to another system using the RemoteMission service.
  /// Host that is running the directory server. Usually, this is just the robot.
  rosidl_runtime_c__String host;
  /// Name of the service in the directory.
  rosidl_runtime_c__String service_name;
  /// Timeout of any single RPC. If the timeout is exceeded, the RPC will fail. The mission service
  /// treats each failed RPC differently:
  /// - EstablishSession: An error is returned in LoadMission.
  /// - Tick: The RPC is retried.
  /// - Stop: The error is ignored, and the RPC is not retried.
  /// Omit for a default of 60 seconds.
  float timeout;
  /// Resources that we will need leases on.
  rosidl_runtime_c__String__Sequence lease_resources;
  /// The list of variables the remote host should receive.
  /// Variables given can be available at either run-time or compile-time.
  /// The "key" in KeyValue is the name of the variable as used by the remote system.
  bosdyn_msgs__msg__KeyValue__Sequence inputs;
  /// Define a format string that will be used together with the blackboard to generate
  /// a group_name.  If a value is specified in this field, it will override the group_name value
  /// specified in the group_name of the TickRequest.  Values from the blackboard will
  /// replace the keys in braces {}.
  /// Example: "telop-{date}", where "date" is a blackboard variable.
  /// Example: "{date}_loop_{loop_counter}", where "loop_counter" is a blackboard variable from a
  /// Repeat node.
  rosidl_runtime_c__String group_name_format;
  /// Should match the advertised spec for the RemoteMissionService in question.
  bosdyn_msgs__msg__DictParam params;
  bool params_is_set;
} bosdyn_msgs__msg__RemoteGrpc;

// Struct for a sequence of bosdyn_msgs__msg__RemoteGrpc.
typedef struct bosdyn_msgs__msg__RemoteGrpc__Sequence
{
  bosdyn_msgs__msg__RemoteGrpc * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__RemoteGrpc__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__REMOTE_GRPC__STRUCT_H_
