// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/BodyExternalForceParams.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__BODY_EXTERNAL_FORCE_PARAMS__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__BODY_EXTERNAL_FORCE_PARAMS__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'external_force_indicator'
#include "bosdyn_msgs/msg/detail/body_external_force_params_external_force_indicator__struct.h"
// Member 'frame_name'
#include "rosidl_runtime_c/string.h"
// Member 'external_force_override'
#include "geometry_msgs/msg/detail/vector3__struct.h"

/// Struct defined in msg/BodyExternalForceParams in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__BodyExternalForceParams
{
  /// External Force on robot body parameters. This is a beta feature and still can have some odd
  /// behaviors. By default, the external force estimator is disabled on the robot.
  /// Indicates what external force estimate/override the robot should use.
  /// By default, the external force estimator is disabled on the robot.
  /// The type of external force described by the parameters.
  bosdyn_msgs__msg__BodyExternalForceParamsExternalForceIndicator external_force_indicator;
  /// The frame name for which the external_force_override is defined in. The frame must be known
  /// to the robot.
  rosidl_runtime_c__String frame_name;
  /// Specifies a force that the body should expect to feel. This allows the robot to "lean into"
  /// an external force. Be careful using this override, since incorrect information can cause
  /// the robot to fall over.
  /// For example, if the robot is leaning against a wall in front of it, the force override would
  /// be in the negative x dimension. If the robot was pulling something directly behind it, the
  /// force override would be in the negative x dimension as well.
  geometry_msgs__msg__Vector3 external_force_override;
  bool external_force_override_is_set;
} bosdyn_msgs__msg__BodyExternalForceParams;

// Struct for a sequence of bosdyn_msgs__msg__BodyExternalForceParams.
typedef struct bosdyn_msgs__msg__BodyExternalForceParams__Sequence
{
  bosdyn_msgs__msg__BodyExternalForceParams * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__BodyExternalForceParams__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__BODY_EXTERNAL_FORCE_PARAMS__STRUCT_H_
