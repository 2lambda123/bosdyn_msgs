// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/UploadEdgeSnapshotRequest.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__UPLOAD_EDGE_SNAPSHOT_REQUEST__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__UPLOAD_EDGE_SNAPSHOT_REQUEST__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'header'
#include "bosdyn_msgs/msg/detail/request_header__struct.h"
// Member 'chunk'
#include "bosdyn_msgs/msg/detail/data_chunk__struct.h"
// Member 'lease'
#include "bosdyn_msgs/msg/detail/lease__struct.h"

/// Struct defined in msg/UploadEdgeSnapshotRequest in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__UploadEdgeSnapshotRequest
{
  /// Used to upload edge data in chunks for a specific edge snapshot. Edge snapshots contain
  /// large sensor data associated with each edge.
  /// Chunks will be streamed one at a time to the server. Chunk streaming is required to prevent
  /// overwhelming gRPC with large http requests.
  /// Common response header.
  bosdyn_msgs__msg__RequestHeader header;
  bool header_is_set;
  /// Serialized bytes of a EdgeSnapshot message, restricted to a chunk no larger than 4MB in size.
  /// To break the data into chunks, first serialize it to bytes. Then, send the bytes in order as DataChunk objects.
  /// The chunks will be concatenated together on the server, and deserialized
  bosdyn_msgs__msg__DataChunk chunk;
  bool chunk_is_set;
  /// The Leases to show ownership of the graph-nav service.
  bosdyn_msgs__msg__Lease lease;
  bool lease_is_set;
} bosdyn_msgs__msg__UploadEdgeSnapshotRequest;

// Struct for a sequence of bosdyn_msgs__msg__UploadEdgeSnapshotRequest.
typedef struct bosdyn_msgs__msg__UploadEdgeSnapshotRequest__Sequence
{
  bosdyn_msgs__msg__UploadEdgeSnapshotRequest * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__UploadEdgeSnapshotRequest__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__UPLOAD_EDGE_SNAPSHOT_REQUEST__STRUCT_H_
