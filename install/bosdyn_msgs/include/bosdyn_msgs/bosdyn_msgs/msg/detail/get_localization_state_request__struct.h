// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/GetLocalizationStateRequest.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__GET_LOCALIZATION_STATE_REQUEST__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__GET_LOCALIZATION_STATE_REQUEST__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'header'
#include "bosdyn_msgs/msg/detail/request_header__struct.h"
// Member 'waypoint_id'
#include "rosidl_runtime_c/string.h"

/// Struct defined in msg/GetLocalizationStateRequest in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__GetLocalizationStateRequest
{
  /// The GetLocalizationState request message requests the current localization state and any other
  /// live data from the robot if desired. The localization consists of a waypoint ID and the relative
  /// pose of the robot with respect to that waypoint.
  /// Common request header.
  bosdyn_msgs__msg__RequestHeader header;
  bool header_is_set;
  /// Return the localization relative to this waypoint, if specified.
  rosidl_runtime_c__String waypoint_id;
  /// If true, request the live edge-segmented point cloud that was used
  /// to generate this localization.
  bool request_live_point_cloud;
  /// If true, request the live images from realsense cameras at the time of
  /// localization.
  bool request_live_images;
  /// If true, request the live terrain maps at the time of localization.
  bool request_live_terrain_maps;
  /// If true, reqeuest the live world objects at the time of localization.
  bool request_live_world_objects;
  /// If true, requests the full live robot state at the time of localization.
  bool request_live_robot_state;
  /// If true, the smallest available encoding will be used for the live point cloud
  /// data. If false, three 32 bit floats will be used per point in the point cloud.
  bool compress_live_point_cloud;
} bosdyn_msgs__msg__GetLocalizationStateRequest;

// Struct for a sequence of bosdyn_msgs__msg__GetLocalizationStateRequest.
typedef struct bosdyn_msgs__msg__GetLocalizationStateRequest__Sequence
{
  bosdyn_msgs__msg__GetLocalizationStateRequest * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__GetLocalizationStateRequest__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__GET_LOCALIZATION_STATE_REQUEST__STRUCT_H_
