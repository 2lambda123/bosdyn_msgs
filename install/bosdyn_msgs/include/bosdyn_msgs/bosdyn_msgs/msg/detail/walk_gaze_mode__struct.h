// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/WalkGazeMode.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__WALK_GAZE_MODE__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__WALK_GAZE_MODE__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

/// Constant 'PICK_WALK_GAZE_UNKNOWN'.
/**
  * Configure automatic walking and gazing at the target.
 */
enum
{
  bosdyn_msgs__msg__WalkGazeMode__PICK_WALK_GAZE_UNKNOWN = 0
};

/// Constant 'PICK_AUTO_WALK_AND_GAZE'.
/**
  * Default, walk to the target and gaze at it automatically
 */
enum
{
  bosdyn_msgs__msg__WalkGazeMode__PICK_AUTO_WALK_AND_GAZE = 1
};

/// Constant 'PICK_AUTO_GAZE'.
/**
  * Don't move the robot base, but automatically look at the grasp target.
 */
enum
{
  bosdyn_msgs__msg__WalkGazeMode__PICK_AUTO_GAZE = 2
};

/// Constant 'PICK_NO_AUTO_WALK_OR_GAZE'.
/**
  * No automatic gazing or walking. Note: if you choose this option, the target location
  * must not be near the edges or off the screen on the hand camera's view.
 */
enum
{
  bosdyn_msgs__msg__WalkGazeMode__PICK_NO_AUTO_WALK_OR_GAZE = 3
};

/// Constant 'PICK_PLAN_ONLY'.
/**
  * Only plan for the grasp, don't move the robot.  Since we won't move
  * the robot, the target location must not be near the edges or out of
  * the hand camera's view.  The robot must be located near the object.
  * (Equivalent conditions as for success with PICK_NO_AUTO_WALK_OR_GAZE)
 */
enum
{
  bosdyn_msgs__msg__WalkGazeMode__PICK_PLAN_ONLY = 4
};

/// Struct defined in msg/WalkGazeMode in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__WalkGazeMode
{
  int8_t value;
} bosdyn_msgs__msg__WalkGazeMode;

// Struct for a sequence of bosdyn_msgs__msg__WalkGazeMode.
typedef struct bosdyn_msgs__msg__WalkGazeMode__Sequence
{
  bosdyn_msgs__msg__WalkGazeMode * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__WalkGazeMode__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__WALK_GAZE_MODE__STRUCT_H_
