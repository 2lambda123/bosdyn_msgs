// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/EstopEndpoint.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__ESTOP_ENDPOINT__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__ESTOP_ENDPOINT__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'role'
// Member 'name'
// Member 'unique_id'
#include "rosidl_runtime_c/string.h"
// Member 'timeout'
// Member 'cut_power_timeout'
#include "builtin_interfaces/msg/detail/duration__struct.h"

/// Struct defined in msg/EstopEndpoint in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__EstopEndpoint
{
  /// An  to the robot software-E-Stop system.
  /// Role of this endpoint. Should be a user-friendly string, e.g. "OCU".
  rosidl_runtime_c__String role;
  /// Name of this endpoint. Specifies a thing to fill the given role, e.g. "patrol-ocu01"
  rosidl_runtime_c__String name;
  /// Unique ID assigned by the server.
  rosidl_runtime_c__String unique_id;
  /// Maximum delay between challenge and response for this endpoint prior to soft power off
  /// handling. After timeout seconds has passed, the robot will try to get to a safe state prior
  /// to disabling motor power. The robot response is equivalent to an ESTOP_LEVEL_SETTLE_THEN_CUT
  /// which may involve the robot sitting down in order to prepare for disabling motor power.
  builtin_interfaces__msg__Duration timeout;
  bool timeout_is_set;
  /// Optional maximum delay between challenge and response for this endpoint prior to disabling
  /// motor power. After cut_power_timeout seconds has passed, motor power will be disconnected
  /// immediately regardless of current robot state. If this value is not set robot will default
  /// to timeout plus a nominal expected duration to reach a safe state. In practice this
  /// is typically 3-4 seconds. The response is equivalent to an ESTOP_LEVEL_CUT.
  builtin_interfaces__msg__Duration cut_power_timeout;
  bool cut_power_timeout_is_set;
} bosdyn_msgs__msg__EstopEndpoint;

// Struct for a sequence of bosdyn_msgs__msg__EstopEndpoint.
typedef struct bosdyn_msgs__msg__EstopEndpoint__Sequence
{
  bosdyn_msgs__msg__EstopEndpoint * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__EstopEndpoint__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__ESTOP_ENDPOINT__STRUCT_H_
