// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/NavigationFeedbackResponse.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__NAVIGATION_FEEDBACK_RESPONSE__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__NAVIGATION_FEEDBACK_RESPONSE__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'header'
#include "bosdyn_msgs/msg/detail/response_header__struct.h"
// Member 'status'
#include "bosdyn_msgs/msg/detail/navigation_feedback_response_status__struct.h"
// Member 'impaired_state'
#include "bosdyn_msgs/msg/detail/robot_impaired_state__struct.h"
// Member 'area_callback_errors'
#include "bosdyn_msgs/msg/detail/key_string_value_bosdyn_msgs_area_callback_error__struct.h"
// Member 'remaining_route'
#include "bosdyn_msgs/msg/detail/route__struct.h"
// Member 'last_ko_tform_goal'
#include "geometry_msgs/msg/detail/pose__struct.h"
// Member 'body_movement_status'
#include "bosdyn_msgs/msg/detail/se2_trajectory_command_feedback_body_movement_status__struct.h"
// Member 'path_following_mode'
#include "bosdyn_msgs/msg/detail/edge_annotations_path_following_mode__struct.h"
// Member 'active_region_information'
#include "bosdyn_msgs/msg/detail/key_string_value_bosdyn_msgs_navigation_feedback_response_active_region_information__struct.h"
// Member 'route_following_status'
#include "bosdyn_msgs/msg/detail/navigation_feedback_response_route_following_status__struct.h"
// Member 'blockage_status'
#include "bosdyn_msgs/msg/detail/navigation_feedback_response_blockage_status__struct.h"
// Member 'stuck_reason'
#include "bosdyn_msgs/msg/detail/navigation_feedback_response_stuck_reason__struct.h"

/// Struct defined in msg/NavigationFeedbackResponse in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__NavigationFeedbackResponse
{
  /// The NavigationFeedback response message returns the robot's
  /// progress and current status for the command.
  /// Common response header.
  bosdyn_msgs__msg__ResponseHeader header;
  bool header_is_set;
  /// Return status for the request.
  bosdyn_msgs__msg__NavigationFeedbackResponseStatus status;
  /// If the status is ROBOT_IMPAIRED, this is why the robot is impaired.
  bosdyn_msgs__msg__RobotImpairedState impaired_state;
  bool impaired_state_is_set;
  /// If the status is AREA_CALLBACK_ERROR, this map will be filled out with the error.
  /// The key of the map is the region id.
  bosdyn_msgs__msg__KeyStringValueBosdynMsgsAreaCallbackError__Sequence area_callback_errors;
  /// Remaining part of current route.
  bosdyn_msgs__msg__Route remaining_route;
  bool remaining_route_is_set;
  /// ID of the command this feedback corresponds to.
  uint32_t command_id;
  /// The most recent transform describing the robot's pose relative to the navigation goal.
  geometry_msgs__msg__Pose last_ko_tform_goal;
  bool last_ko_tform_goal_is_set;
  /// Indicates whether the robot's body is currently in motion.
  bosdyn_msgs__msg__SE2TrajectoryCommandFeedbackBodyMovementStatus body_movement_status;
  /// Path following mode
  bosdyn_msgs__msg__EdgeAnnotationsPathFollowingMode path_following_mode;
  /// Map of Region IDs with relevant information
  bosdyn_msgs__msg__KeyStringValueBosdynMsgsNavigationFeedbackResponseActiveRegionInformation__Sequence active_region_information;
  /// Data for a Area Callback region
  /// When the robot is following a route (and Status is STATUS_FOLLOWING_ROUTE), this gives additional
  /// detail about what the robot is doing to follow that route. When Status is not STATUS_FOLLOWING_ROUTE,
  /// this will be set to ROUTE_FOLLOWING_STATUS_UNKNOWN.
  /// Additional information about what kind of route the robot is following and why.
  bosdyn_msgs__msg__NavigationFeedbackResponseRouteFollowingStatus route_following_status;
  /// Indicates whether the robot thinks its current path is blocked by an obstacle. This will be set when
  /// Status is STATUS_FOLLOWING_ROUTE, or STATUS_STUCK, and will be BLOCKAGE_STATUS_UNKNOWN in all other cases.
  /// Additional information about whether or not the robot believes the current route to be blocked.
  bosdyn_msgs__msg__NavigationFeedbackResponseBlockageStatus blockage_status;
  /// If status is STATUS_STUCK, this enum provides reasons differentiating various cases that
  /// can cause the robot to re
  /// Only filled out if status is STATUS_STUCK to provide additional context.
  bosdyn_msgs__msg__NavigationFeedbackResponseStuckReason stuck_reason;
} bosdyn_msgs__msg__NavigationFeedbackResponse;

// Struct for a sequence of bosdyn_msgs__msg__NavigationFeedbackResponse.
typedef struct bosdyn_msgs__msg__NavigationFeedbackResponse__Sequence
{
  bosdyn_msgs__msg__NavigationFeedbackResponse * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__NavigationFeedbackResponse__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__NAVIGATION_FEEDBACK_RESPONSE__STRUCT_H_
