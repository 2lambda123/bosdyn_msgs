// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/RobotCommandFeedbackStatusStatus.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__ROBOT_COMMAND_FEEDBACK_STATUS_STATUS__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__ROBOT_COMMAND_FEEDBACK_STATUS_STATUS__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

/// Constant 'STATUS_UNKNOWN'.
/**
  * / Behavior execution is in an unknown / unexpected state.
 */
enum
{
  bosdyn_msgs__msg__RobotCommandFeedbackStatusStatus__STATUS_UNKNOWN = 0
};

/// Constant 'STATUS_PROCESSING'.
/**
  * / The robot is actively working on the command
 */
enum
{
  bosdyn_msgs__msg__RobotCommandFeedbackStatusStatus__STATUS_PROCESSING = 1
};

/// Constant 'STATUS_COMMAND_OVERRIDDEN'.
/**
  * / The command was replaced by a new command
 */
enum
{
  bosdyn_msgs__msg__RobotCommandFeedbackStatusStatus__STATUS_COMMAND_OVERRIDDEN = 2
};

/// Constant 'STATUS_COMMAND_TIMED_OUT'.
/**
  * / The command expired
 */
enum
{
  bosdyn_msgs__msg__RobotCommandFeedbackStatusStatus__STATUS_COMMAND_TIMED_OUT = 3
};

/// Constant 'STATUS_ROBOT_FROZEN'.
/**
  * / The robot is in an unsafe state, and will only respond to known safe commands.
 */
enum
{
  bosdyn_msgs__msg__RobotCommandFeedbackStatusStatus__STATUS_ROBOT_FROZEN = 4
};

/// Constant 'STATUS_INCOMPATIBLE_HARDWARE'.
/**
  * / The request cannot be executed because the required hardware is missing.
  * / For example, an armless robot receiving a synchronized command with an arm_command
  * / request will return this value in the arm_command_feedback status.
 */
enum
{
  bosdyn_msgs__msg__RobotCommandFeedbackStatusStatus__STATUS_INCOMPATIBLE_HARDWARE = 5
};

/// Struct defined in msg/RobotCommandFeedbackStatusStatus in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__RobotCommandFeedbackStatusStatus
{
  int8_t value;
} bosdyn_msgs__msg__RobotCommandFeedbackStatusStatus;

// Struct for a sequence of bosdyn_msgs__msg__RobotCommandFeedbackStatusStatus.
typedef struct bosdyn_msgs__msg__RobotCommandFeedbackStatusStatus__Sequence
{
  bosdyn_msgs__msg__RobotCommandFeedbackStatusStatus * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__RobotCommandFeedbackStatusStatus__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__ROBOT_COMMAND_FEEDBACK_STATUS_STATUS__STRUCT_H_
