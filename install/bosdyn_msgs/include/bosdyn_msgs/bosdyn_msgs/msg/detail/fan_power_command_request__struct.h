// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/FanPowerCommandRequest.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__FAN_POWER_COMMAND_REQUEST__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__FAN_POWER_COMMAND_REQUEST__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'header'
#include "bosdyn_msgs/msg/detail/request_header__struct.h"
// Member 'lease'
#include "bosdyn_msgs/msg/detail/lease__struct.h"
// Member 'duration'
#include "builtin_interfaces/msg/detail/duration__struct.h"

/// Struct defined in msg/FanPowerCommandRequest in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__FanPowerCommandRequest
{
  /// Common request header.
  bosdyn_msgs__msg__RequestHeader header;
  bool header_is_set;
  /// The Lease to show ownership of the robot.
  bosdyn_msgs__msg__Lease lease;
  bool lease_is_set;
  /// What percent power does the user want the fans to run at?
  /// Range is 0 to 100, with 0 being off and 100 being full power
  int32_t percent_power;
  /// How long the user wants control of the fans
  /// May not be duration the command is actually in effect for if temperature gets too high
  builtin_interfaces__msg__Duration duration;
  bool duration_is_set;
} bosdyn_msgs__msg__FanPowerCommandRequest;

// Struct for a sequence of bosdyn_msgs__msg__FanPowerCommandRequest.
typedef struct bosdyn_msgs__msg__FanPowerCommandRequest__Sequence
{
  bosdyn_msgs__msg__FanPowerCommandRequest * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__FanPowerCommandRequest__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__FAN_POWER_COMMAND_REQUEST__STRUCT_H_
