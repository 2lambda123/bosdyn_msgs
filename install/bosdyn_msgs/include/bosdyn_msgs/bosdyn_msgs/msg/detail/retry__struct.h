// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/Retry.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__RETRY__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__RETRY__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'child'
#include "bosdyn_msgs/msg/detail/node__struct.h"
// Member 'attempt_counter_state_name'
#include "rosidl_runtime_c/string.h"

/// Struct defined in msg/Retry in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__Retry
{
  /// Retry a child node until it succeeds, or exceeds a number of attempts.
  /// Only allow this many attempts. Note that a value of 1 makes this Retry node a no-op.
  int32_t max_attempts;
  /// Child to retry up to max_attempts.
  bosdyn_msgs__msg__Node child;
  bool child_is_set;
  /// If set, the node will write the attempt index to the blackboard.
  rosidl_runtime_c__String attempt_counter_state_name;
} bosdyn_msgs__msg__Retry;

// Struct for a sequence of bosdyn_msgs__msg__Retry.
typedef struct bosdyn_msgs__msg__Retry__Sequence
{
  bosdyn_msgs__msg__Retry * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__Retry__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__RETRY__STRUCT_H_
