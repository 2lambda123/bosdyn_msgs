// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/ArmJointTrajectory.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__ARM_JOINT_TRAJECTORY__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__ARM_JOINT_TRAJECTORY__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'points'
#include "bosdyn_msgs/msg/detail/arm_joint_trajectory_point__struct.h"
// Member 'reference_time'
#include "builtin_interfaces/msg/detail/time__struct.h"

/// Struct defined in msg/ArmJointTrajectory in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__ArmJointTrajectory
{
  /// This allows a user to move the arm's joints directly. Each of the arm's joints will never move
  /// faster than maximum_velocity and never accelerate faster than maximum_acceleration. The user can
  /// specify a trajectory of joint positions and optional velocities for the arm to follow. The
  /// trajectory will be acted upon as follows. If a single trajectory point with no time is provided,
  /// the arm will take the joint currently furthest away from the goal pose and plan a minimum time
  /// trajectory such that the joint accelerates at maximum_acceleration, coasts at maximum_velocity,
  /// and decelerates at maximum_acceleration. The other joints will accelerate at
  /// maximum_acceleration, but then coast at a slower speed such that all joints arrive at the goal
  /// pose simultaneously with zero velocity. If the user provides trajectory times, the robot will fit
  /// a piece-wise cubic trajectory (continuous position and velocity) to the user's requested
  /// positions and (optional) velocities. If the requested trajectory is not achievable because it
  /// will violate position limits or the maximum_velocity or maximum_acceleration, the robot will pick
  /// a trajectory that is as close as possible to the user requested without violating velocity or
  /// acceleration limits.
  ///
  /// If the robot is not hitting the desired trajectory, try increasing the time between knot points,
  /// increasing the max velocity and acceleration, or only specifying joint position goals without a
  /// velocity
  /// The points in our trajectory. (positions, (optional) velocity, (optional) time)
  bosdyn_msgs__msg__ArmJointTrajectoryPoint__Sequence points;
  /// All trajectory points specify times relative to this reference time. The reference
  /// time should be in robot clock. If this field is not included, this time will be
  /// the receive time of the command.
  builtin_interfaces__msg__Time reference_time;
  bool reference_time_is_set;
  /// The maximum velocity in rad/s that any joint is allowed to achieve.
  /// If this field is not set, a default value will be used.
  double maximum_velocity;
  bool maximum_velocity_is_set;
  /// The maximum acceleration in rad/s^2 that any joint is allowed to
  /// achieve. If this field is not set, a default value will be used.
  double maximum_acceleration;
  bool maximum_acceleration_is_set;
} bosdyn_msgs__msg__ArmJointTrajectory;

// Struct for a sequence of bosdyn_msgs__msg__ArmJointTrajectory.
typedef struct bosdyn_msgs__msg__ArmJointTrajectory__Sequence
{
  bosdyn_msgs__msg__ArmJointTrajectory * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__ArmJointTrajectory__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__ARM_JOINT_TRAJECTORY__STRUCT_H_
