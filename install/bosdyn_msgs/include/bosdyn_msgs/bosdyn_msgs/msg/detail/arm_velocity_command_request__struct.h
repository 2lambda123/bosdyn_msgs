// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/ArmVelocityCommandRequest.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__ARM_VELOCITY_COMMAND_REQUEST__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__ARM_VELOCITY_COMMAND_REQUEST__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'command'
#include "bosdyn_msgs/msg/detail/arm_velocity_command_request_one_of_command__struct.h"
// Member 'angular_velocity_of_hand_rt_odom_in_hand'
#include "geometry_msgs/msg/detail/vector3__struct.h"
// Member 'end_time'
#include "builtin_interfaces/msg/detail/time__struct.h"

/// Struct defined in msg/ArmVelocityCommandRequest in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__ArmVelocityCommandRequest
{
  /// Specify the linear velocity of the hand in either a cylindrical or Cartesian coordinate
  /// system.
  bosdyn_msgs__msg__ArmVelocityCommandRequestOneOfCommand command;
  /// The angular velocity of the hand frame measured with respect to the odom frame, expressed
  /// in the hand frame. A 'X' rate will cause the hand to rotate about its x-axis, e.g. the
  /// final wrist twist joint will rotate. And similarly, 'Y' and 'Z' rates will cause the hand
  /// to rotate about its y and z axis respectively.
  /// The units should be rad/sec.
  geometry_msgs__msg__Vector3 angular_velocity_of_hand_rt_odom_in_hand;
  bool angular_velocity_of_hand_rt_odom_in_hand_is_set;
  /// Optional maximum acceleration magnitude of the end-effector. (m/s^2)
  double maximum_acceleration;
  bool maximum_acceleration_is_set;
  /// The timestamp (in robot time) by which a command must finish executing.
  /// This is a required field and used to prevent runaway commands.
  builtin_interfaces__msg__Time end_time;
  bool end_time_is_set;
} bosdyn_msgs__msg__ArmVelocityCommandRequest;

// Struct for a sequence of bosdyn_msgs__msg__ArmVelocityCommandRequest.
typedef struct bosdyn_msgs__msg__ArmVelocityCommandRequest__Sequence
{
  bosdyn_msgs__msg__ArmVelocityCommandRequest * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__ArmVelocityCommandRequest__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__ARM_VELOCITY_COMMAND_REQUEST__STRUCT_H_
