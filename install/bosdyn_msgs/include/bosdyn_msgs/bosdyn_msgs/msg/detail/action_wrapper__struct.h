// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/ActionWrapper.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__ACTION_WRAPPER__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__ACTION_WRAPPER__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'robot_body_sit'
#include "bosdyn_msgs/msg/detail/action_wrapper_robot_body_sit__struct.h"
// Member 'robot_body_pose'
#include "bosdyn_msgs/msg/detail/action_wrapper_robot_body_pose__struct.h"
// Member 'spot_cam_led'
#include "bosdyn_msgs/msg/detail/action_wrapper_spot_cam_led__struct.h"
// Member 'spot_cam_ptz'
#include "bosdyn_msgs/msg/detail/action_wrapper_spot_cam_ptz__struct.h"
// Member 'arm_sensor_pointing'
#include "bosdyn_msgs/msg/detail/action_wrapper_arm_sensor_pointing__struct.h"
// Member 'spot_cam_alignment'
#include "bosdyn_msgs/msg/detail/action_wrapper_spot_cam_alignment__struct.h"
// Member 'gripper_camera_params'
#include "bosdyn_msgs/msg/detail/action_wrapper_gripper_camera_params__struct.h"
// Member 'gripper_command'
#include "bosdyn_msgs/msg/detail/action_wrapper_gripper_command__struct.h"

/// Struct defined in msg/ActionWrapper in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__ActionWrapper
{
  /// An ActionWrapper is what the robot should do prior to and during an action.
  /// For example, the user may desire that the robot stand in such a way that its
  /// z-axis is aligned with the gravity vector, even though it is standing on an
  /// incline.
  /// Sit the robot prior to performing the action
  /// Pose the robot prior to performing the action
  /// Set the brightness of the LEDs on the SpotCam.
  /// Set the pan, tilt, and zoom of the SpotCam.
  /// Align SpotCam to a waypoint. Cannot be used with SpotCamPtz or RobotBodyPose
  /// Position the body and perform a joint move and cartesian command in target frame
  /// Set the camera params of the gripper camera
  bosdyn_msgs__msg__ActionWrapperRobotBodySit robot_body_sit;
  bool robot_body_sit_is_set;
  bosdyn_msgs__msg__ActionWrapperRobotBodyPose robot_body_pose;
  bool robot_body_pose_is_set;
  bosdyn_msgs__msg__ActionWrapperSpotCamLed spot_cam_led;
  bool spot_cam_led_is_set;
  bosdyn_msgs__msg__ActionWrapperSpotCamPtz spot_cam_ptz;
  bool spot_cam_ptz_is_set;
  bosdyn_msgs__msg__ActionWrapperArmSensorPointing arm_sensor_pointing;
  bool arm_sensor_pointing_is_set;
  bosdyn_msgs__msg__ActionWrapperSpotCamAlignment spot_cam_alignment;
  bool spot_cam_alignment_is_set;
  bosdyn_msgs__msg__ActionWrapperGripperCameraParams gripper_camera_params;
  bool gripper_camera_params_is_set;
  bosdyn_msgs__msg__ActionWrapperGripperCommand gripper_command;
  bool gripper_command_is_set;
} bosdyn_msgs__msg__ActionWrapper;

// Struct for a sequence of bosdyn_msgs__msg__ActionWrapper.
typedef struct bosdyn_msgs__msg__ActionWrapper__Sequence
{
  bosdyn_msgs__msg__ActionWrapper * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__ActionWrapper__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__ACTION_WRAPPER__STRUCT_H_
