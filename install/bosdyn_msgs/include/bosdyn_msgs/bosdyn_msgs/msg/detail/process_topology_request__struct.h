// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/ProcessTopologyRequest.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__PROCESS_TOPOLOGY_REQUEST__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__PROCESS_TOPOLOGY_REQUEST__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'header'
#include "bosdyn_msgs/msg/detail/request_header__struct.h"
// Member 'params'
#include "bosdyn_msgs/msg/detail/process_topology_request_params__struct.h"

/// Struct defined in msg/ProcessTopologyRequest in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__ProcessTopologyRequest
{
  /// Processes a GraphNav map by creating additional edges. After processing,
  /// a new subgraph is created containing additional edges to add to the map.
  /// Edges are created between waypoints that are near each other. These waypoint pairs
  /// are called "loop closures", and are found by different means.
  /// In general, if parameters are not provided, reasonable defaults will be used.
  /// Note that this can be used to merge disconnected subgraphs from multiple recording
  /// sessions so long as they share fiducial observations.
  /// Parameters for how to refine loop closure edges using iterative
  /// closest point matching.
  /// Parameters for how to close loops using odometry. This infers which waypoints
  /// should be connected to one another based on the odometry measurements in the map.
  /// Parameters for how to close a loop using fiducials (AprilTags). This infers
  /// which waypoints should be connected to one another based on shared observations
  /// of AprilTags.
  /// Note that multiple disconnected subgraphs (for example from multiple recording sessions)
  /// can be merged this way.
  /// Parameters for how to check for collisions when creating loop closures. The system
  /// will avoid creating edges in the map that the robot cannot actually traverse due to
  /// the presence of nearby obstacles.
  /// Parameters which control topology processing. In general, anything which isn't filled out
  /// will be replaced by reasonable defaults.
  /// Standard message header.
  bosdyn_msgs__msg__RequestHeader header;
  bool header_is_set;
  /// Parameters. If not filled out, reasonable defaults will be used.
  bosdyn_msgs__msg__ProcessTopologyRequestParams params;
  bool params_is_set;
  /// If true, any processing should directly modify the map on the server.
  /// Otherwise, the client is expected to upload the processing results (newly created edges)
  /// back to the server. The processing service shares memory with a map container service
  /// (e.g the GraphNav service).
  bool modify_map_on_server;
} bosdyn_msgs__msg__ProcessTopologyRequest;

// Struct for a sequence of bosdyn_msgs__msg__ProcessTopologyRequest.
typedef struct bosdyn_msgs__msg__ProcessTopologyRequest__Sequence
{
  bosdyn_msgs__msg__ProcessTopologyRequest * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__ProcessTopologyRequest__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__PROCESS_TOPOLOGY_REQUEST__STRUCT_H_
