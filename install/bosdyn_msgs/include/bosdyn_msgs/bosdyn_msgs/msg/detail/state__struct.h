// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/State.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__STATE__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__STATE__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'questions'
#include "bosdyn_msgs/msg/detail/question__struct.h"
// Member 'answered_questions'
#include "bosdyn_msgs/msg/detail/state_answered_question__struct.h"
// Member 'history'
#include "bosdyn_msgs/msg/detail/state_node_states_at_tick__struct.h"
// Member 'status'
#include "bosdyn_msgs/msg/detail/state_status__struct.h"
// Member 'error'
#include "rosidl_runtime_c/string.h"

/// Struct defined in msg/State in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__State
{
  /// State of the mission service.
  /// What questions are outstanding?
  bosdyn_msgs__msg__Question__Sequence questions;
  /// A question that has been answered already.
  /// History of questions that have been answered.
  /// The server will set some limit on the available history.
  bosdyn_msgs__msg__StateAnsweredQuestion__Sequence answered_questions;
  /// Node states ordered from newest to oldest.
  /// history will always be the data from this tick.
  bosdyn_msgs__msg__StateNodeStatesAtTick__Sequence history;
  /// Possible overall status states of the mission.
  /// Current status of the mission.
  bosdyn_msgs__msg__StateStatus status;
  /// Describes the unexpected error encountered by the mission service.
  /// Only filled out if STATUS_ERROR is set.
  rosidl_runtime_c__String error;
  /// The mission's tick counter when this state was generated.
  /// -1 indicates no mission has been started.
  int64_t tick_counter;
  /// The mission's ID.
  /// -1 indicates no mission has been loaded.
  int64_t mission_id;
} bosdyn_msgs__msg__State;

// Struct for a sequence of bosdyn_msgs__msg__State.
typedef struct bosdyn_msgs__msg__State__Sequence
{
  bosdyn_msgs__msg__State * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__State__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__STATE__STRUCT_H_
