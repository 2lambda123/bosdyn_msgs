// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/RestartMissionRequest.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__RESTART_MISSION_REQUEST__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__RESTART_MISSION_REQUEST__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'header'
#include "bosdyn_msgs/msg/detail/request_header__struct.h"
// Member 'pause_time'
#include "builtin_interfaces/msg/detail/time__struct.h"
// Member 'leases'
#include "bosdyn_msgs/msg/detail/lease__struct.h"
// Member 'settings'
#include "bosdyn_msgs/msg/detail/play_settings__struct.h"

/// Struct defined in msg/RestartMissionRequest in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__RestartMissionRequest
{
  /// A request to restart the currently loaded mission.
  /// Common request header.
  bosdyn_msgs__msg__RequestHeader header;
  bool header_is_set;
  /// Run the mission until this time.
  /// Pause the mission at that time if we have not received a new PlayMissionRequest.
  /// This ensures the mission stops relatively quickly if there is an unexpected client drop-out.
  /// Clients should regularly send PlayMissionRequests with a pause_time that reflects how often
  /// they expect to check in with the mission service.
  builtin_interfaces__msg__Time pause_time;
  bool pause_time_is_set;
  /// Leases that the mission will need, plus the lease on the mission service.
  bosdyn_msgs__msg__Lease__Sequence leases;
  /// Settings active until the next PlayMission or RestartMission request.
  bosdyn_msgs__msg__PlaySettings settings;
  bool settings_is_set;
} bosdyn_msgs__msg__RestartMissionRequest;

// Struct for a sequence of bosdyn_msgs__msg__RestartMissionRequest.
typedef struct bosdyn_msgs__msg__RestartMissionRequest__Sequence
{
  bosdyn_msgs__msg__RestartMissionRequest * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__RestartMissionRequest__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__RESTART_MISSION_REQUEST__STRUCT_H_
