// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/GetAuthTokenResponseStatus.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__GET_AUTH_TOKEN_RESPONSE_STATUS__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__GET_AUTH_TOKEN_RESPONSE_STATUS__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

/// Constant 'STATUS_UNKNOWN'.
/**
  * STATUS_UNKNOWN should never be used. If used, an internal error has happend.
 */
enum
{
  bosdyn_msgs__msg__GetAuthTokenResponseStatus__STATUS_UNKNOWN = 0
};

/// Constant 'STATUS_OK'.
/**
  * STATUS_OK indicates that authentication has succeeded. The 'token' field field will
  * be populated with a session token that can be used to authenticate the user.
 */
enum
{
  bosdyn_msgs__msg__GetAuthTokenResponseStatus__STATUS_OK = 1
};

/// Constant 'STATUS_INVALID_LOGIN'.
/**
  * STATUS_INVALID_LOGIN indicates that authentication has failed since an invalid
  * username and/or password were provided.
 */
enum
{
  bosdyn_msgs__msg__GetAuthTokenResponseStatus__STATUS_INVALID_LOGIN = 2
};

/// Constant 'STATUS_INVALID_TOKEN'.
/**
  * STATUS_INVALID_TOKEN indicates that authentication has failed since the 'token'
  * provided in the request is invalid. Reasons for the token being invalid could be
  * because it has expired, because it is improperly formed, for the wrong robot, the
  * user that the token is for has changed a password, or many other reasons. Clients
  * should use username/password-based authentication when refreshing the token fails.
 */
enum
{
  bosdyn_msgs__msg__GetAuthTokenResponseStatus__STATUS_INVALID_TOKEN = 3
};

/// Constant 'STATUS_TEMPORARILY_LOCKED_OUT'.
/**
  * STATUS_TEMPORARILY_LOCKED_OUT indicates that authentication has failed since
  * authentication for the user is temporarily locked out due to too many unsuccessful
  * attempts. Any new authentication attempts should be delayed so they may happen after
  * the lock out period ends.
 */
enum
{
  bosdyn_msgs__msg__GetAuthTokenResponseStatus__STATUS_TEMPORARILY_LOCKED_OUT = 4
};

/// Constant 'STATUS_INVALID_APPLICATION_TOKEN'.
/**
  * STATUS_INVALID_APPLICATION_TOKEN indicates that the 'application_token' field in the
  * request was invalid.
 */
enum
{
  bosdyn_msgs__msg__GetAuthTokenResponseStatus__STATUS_INVALID_APPLICATION_TOKEN = 5
};

/// Constant 'STATUS_EXPIRED_APPLICATION_TOKEN'.
/**
  * STATUS_EXPIRED_APPLICATION_TOKEN indicates that the 'application_token' field in the
  * request was valid, but has expired.
 */
enum
{
  bosdyn_msgs__msg__GetAuthTokenResponseStatus__STATUS_EXPIRED_APPLICATION_TOKEN = 6
};

/// Struct defined in msg/GetAuthTokenResponseStatus in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__GetAuthTokenResponseStatus
{
  int8_t value;
} bosdyn_msgs__msg__GetAuthTokenResponseStatus;

// Struct for a sequence of bosdyn_msgs__msg__GetAuthTokenResponseStatus.
typedef struct bosdyn_msgs__msg__GetAuthTokenResponseStatus__Sequence
{
  bosdyn_msgs__msg__GetAuthTokenResponseStatus * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__GetAuthTokenResponseStatus__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__GET_AUTH_TOKEN_RESPONSE_STATUS__STRUCT_H_
