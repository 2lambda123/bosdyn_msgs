// generated from rosidl_generator_c/resource/idl__struct.h.em
// with input from bosdyn_msgs:msg/ManipulationApiFeedbackResponse.idl
// generated code does not contain a copyright notice

#ifndef BOSDYN_MSGS__MSG__DETAIL__MANIPULATION_API_FEEDBACK_RESPONSE__STRUCT_H_
#define BOSDYN_MSGS__MSG__DETAIL__MANIPULATION_API_FEEDBACK_RESPONSE__STRUCT_H_

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>


// Constants defined in the message

// Include directives for member types
// Member 'header'
#include "bosdyn_msgs/msg/detail/response_header__struct.h"
// Member 'current_state'
#include "bosdyn_msgs/msg/detail/manipulation_feedback_state__struct.h"
// Member 'transforms_snapshot_manipulation_data'
#include "bosdyn_msgs/msg/detail/frame_tree_snapshot__struct.h"

/// Struct defined in msg/ManipulationApiFeedbackResponse in the package bosdyn_msgs.
/**
  * AUTOMATICALLY GENERATED BY PROTO CONVERSION
 */
typedef struct bosdyn_msgs__msg__ManipulationApiFeedbackResponse
{
  /// / Common response header.
  bosdyn_msgs__msg__ResponseHeader header;
  bool header_is_set;
  /// The unique identifier for the ManipulationApiFeedbackRequest.
  int32_t manipulation_cmd_id;
  bosdyn_msgs__msg__ManipulationFeedbackState current_state;
  /// Data from the manipulation system:
  /// "walkto_raycast_intersection":
  ///      If you sent a WalkToObject request, we raycast in the world to intersect your pixel/ray
  ///      with the world.  The point of intersection is included in this transform snapshot
  ///      with the name "walkto_raycast_intersection".
  /// "grasp_planning_solution":
  ///      If you requested a grasp plan, this frame will contain the planning solution if
  ///      available.  This will be the pose of the "hand" frame at the completion of the grasp.
  /// "gripper_nearest_object":
  ///      If the range camera in the hand senses an object, this frame will have the position of
  ///      the nearest object.  This is useful for getting a ballpark range measurement.
  bosdyn_msgs__msg__FrameTreeSnapshot transforms_snapshot_manipulation_data;
  bool transforms_snapshot_manipulation_data_is_set;
} bosdyn_msgs__msg__ManipulationApiFeedbackResponse;

// Struct for a sequence of bosdyn_msgs__msg__ManipulationApiFeedbackResponse.
typedef struct bosdyn_msgs__msg__ManipulationApiFeedbackResponse__Sequence
{
  bosdyn_msgs__msg__ManipulationApiFeedbackResponse * data;
  /// The number of valid items in data
  size_t size;
  /// The number of allocated items in data
  size_t capacity;
} bosdyn_msgs__msg__ManipulationApiFeedbackResponse__Sequence;

#ifdef __cplusplus
}
#endif

#endif  // BOSDYN_MSGS__MSG__DETAIL__MANIPULATION_API_FEEDBACK_RESPONSE__STRUCT_H_
